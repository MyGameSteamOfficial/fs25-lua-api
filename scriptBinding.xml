<?xml version="1.0" encoding="utf-8" standalone="no"?>
<scriptBinding>
    <function name="addAudioSourceSampleElement" desc="Add a sample element to an AudioSource" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
            <param name="filename" type="string" desc="filename"/>
            <param name="probability" type="float" desc="probability"/>
        </input>
        <output/>
    </function>
    <function name="addDifferential" desc="Add differential" category="Physics">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="diff0Index" type="integer" desc="diff0Index"/>
            <param name="diffIndex0IsWheel" type="boolean" desc="diffIndex0IsWheel"/>
            <param name="diff1Index" type="integer" desc="diff1Index"/>
            <param name="diffIndex1IsWheel" type="boolean" desc="diffIndex1IsWheel"/>
            <param name="ratio" type="float" desc="ratio"/>
            <param name="bias" type="float" desc="bias"/>
        </input>
        <output/>
    </function>
    <function name="addFoliageTypeFromXML" desc="Load a new foliage type from an XML file, creating a new multilayer if a new density map is used" category="Foliage">
        <input>
            <param name="terrainNode" type="entityId" desc=""/>
            <param name="foliageDataPlaneId" type="entityId" desc="id for density map to use for the foliage layer, or a dataplane that shares this density map"/>
            <param name="name" type="string" desc="name of new layer"/>
            <param name="xmlFilename" type="string" desc="XML filename containing the layer definition"/>
        </input>
        <output>
            <param name="densityMapTypeId" type="entityId" desc="the type ID the density map will use for this layer, or 0 if the call failed"/>
        </output>
    </function>
    <function name="addForce" desc="Add force to object (only for dynamic physics objects)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="forceX" type="float" desc="forceX"/>
            <param name="forceY" type="float" desc="forceY"/>
            <param name="forceZ" type="float" desc="forceZ"/>
            <param name="positionX" type="float" desc="positionX"/>
            <param name="positionY" type="float" desc="positionY"/>
            <param name="positionZ" type="float" desc="positionZ"/>
            <param name="isPositionLocal" type="boolean" desc="isPositionLocal"/>
        </input>
        <output/>
    </function>
    <function name="addImpulse" desc="Add impulse to object (only for dynamic physics objects)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="impulseX" type="float" desc="impulseX"/>
            <param name="impulseY" type="float" desc="impulseY"/>
            <param name="impulseZ" type="float" desc="impulseZ"/>
            <param name="positionX" type="float" desc="positionX"/>
            <param name="positionY" type="float" desc="positionY"/>
            <param name="positionZ" type="float" desc="positionZ"/>
            <param name="isPositionLocal" type="boolean" desc="isPositionLocal"/>
        </input>
        <output/>
    </function>
    <function name="addLightShadowIgnoreShapes" desc="(Recursively) adds given entity or its shape children to the ignore list for shadow rendering" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source node"/>
            <param name="nodeId" type="entityId" desc="id of shape or parent node of a set of shapes (such as a vehicle)."/>
        </input>
        <output/>
    </function>
    <function name="addMergedShadowIgnoreShapes" desc="(Recursively) adds given entity or its shape children to the ignore list for merged shadow rendering" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source node"/>
            <param name="shapeId" type="entityId" desc="id of shape or parent node of a set of shapes (such as a vehicle)."/>
        </input>
        <output/>
    </function>
    <function name="addParticleSystemSimulationTime" desc="Add particle system simulation time&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="dt" type="float" desc="dt"/>
        </input>
        <output/>
    </function>
    <function name="addSplineAttribute" desc="Add a spline attribute" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc=""/>
            <param name="attributeName" type="string" desc=""/>
        </input>
        <output>
            <param name="attributeIndex" type="integer" desc=""/>
        </output>
    </function>
    <function name="addTerrainFillLayer" desc="Add terrain fill layer to given terrain" category="Terrain Detail">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
            <param name="name" type="string" desc="fill type name"/>
            <param name="diffuseTexture" type="string" desc="diffuse texture filename"/>
            <param name="normalTexture" type="string" desc="normal texture filename"/>
            <param name="heightTexture" type="string" desc="height texture filename"/>
            <param name="displacementTexture" type="string" desc="displacement texture filename"/>
            <param name="layerUnitSize" type="float" desc="size of texture in worldspace (4.0 is typical)"/>
            <param name="displacementMaxHeight" type="float" desc="maximum height (+ or -) for displacement texture, in meters"/>
            <param name="blendContrast" type="float" desc="contrast value for blending (0.5 is typical)"/>
            <param name="noiseScale" type="float" desc="noise scale for blending (0.5 is typical)"/>
            <param name="noiseSharp" type="float" desc="noise sharpness for blending (0.25 is typical)"/>
            <param name="porosityAtZeroRoughness" type="float" desc="porosity when roughness is 0"/>
            <param name="porosityAtFullRoughness" type="float" desc="porosity when roughness is 1"/>
            <param name="firmness" type="float" desc="firmness of the ground 0-1 (used by tyre tracks to determine max depression)"/>
            <param name="viscosity" type="float" desc="viscosity of the ground 0-1 (used by tyre tracks to determine rate of sinking)"/>
            <param name="firmnessWet" type="float" desc="firmness of the ground when the terrain is wet 0-1"/>
        </input>
        <output/>
    </function>
    <function name="addToPhysics" desc="Add node and recursively all child nodes to physics.&#xA;Not instant as physics run in a separate thread with an independent framerate.&#xA;Use getIsAddedToPhysics() to check a nodes current state." category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output/>
    </function>
    <function name="addTorque" desc="Adds torque to a collision (only for dynamic physics objects)" category="Physics">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output/>
    </function>
    <function name="addTorqueImpulse" desc="Adds torque impulse to a collision (only for dynamic physics objects)" category="Physics">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output/>
    </function>
    <function name="addTrackPoint" desc="Adds a tire track position" category="Tire Track">
        <input>
            <param name="tyreTrackSystem" type="entityId" desc="tyreTrackSystem"/>
            <param name="trackId" type="integer" desc="trackId"/>
            <param name="x" type="float" desc="x coordinate"/>
            <param name="y" type="float" desc="y coordinate"/>
            <param name="z" type="float" desc="z coordinate"/>
            <param name="ux" type="float" desc="up direction x"/>
            <param name="uy" type="float" desc="up direction y"/>
            <param name="uz" type="float" desc="up direction z"/>
            <param name="r" type="float" desc="red"/>
            <param name="g" type="float" desc="green"/>
            <param name="b" type="float" desc="blue"/>
            <param name="a" type="float" desc="alpha"/>
            <param name="bumpiness" type="float" desc=""/>
            <param name="dTheta" type="float" desc="wheel dTheta/dT (used to determine forward/backward motion of wheel)"/>
            <param name="terrainOnly" type="boolean" desc="omit from geometry (only render on terrain)"/>
            <param name="colorBlendWithTerrain" type="float" desc="defines how the color should be blended with the terrain (0:100% terrain color, 1:0% terrain color)"/>
        </input>
        <output/>
    </function>
    <function name="addVehicleLink" desc="Add vehicle link" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="transformId2" type="entityId" desc="transformId2"/>
        </input>
        <output/>
    </function>
    <function name="addXMLComment" desc="Add comment to XML element." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="xmlPath" type="string" desc="Path to element"/>
            <param name="comment" type="string" desc="comment"/>
        </input>
        <output/>
    </function>
    <function name="aimCamera" desc="Aim camera (spring/damper)" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="distance" type="float" desc="distance"/>
            <param name="dt" type="float" desc="dt"/>
            <param name="springStrength" type="float" desc="springStrength"/>
        </input>
        <output/>
    </function>
    <function name="asciiToUtf8" desc="Converts an ascii latin1 (ISO 88859-1) encoded string to an utf8 string" category="String">
        <input>
            <param name="asciiString" type="string" desc="asciiString"/>
        </input>
        <output>
            <param name="utf8string" type="string" desc="utf8string"/>
        </output>
    </function>
    <function name="assignAnimTrackClip" desc="Assign clip to animation track" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
            <param name="clipIndex" type="integer" desc="clipIndex"/>
        </input>
        <output/>
    </function>
    <function name="base64Decode" desc="base64 decode" category="Math">
        <input>
            <param name="input" type="string" desc="input"/>
        </input>
        <output>
            <param name="output" type="byteArray" desc="output"/>
        </output>
    </function>
    <function name="base64Encode" desc="base64 encode" category="Math">
        <input>
            <param name="input" type="byteArray" desc="input"/>
        </input>
        <output>
            <param name="output" type="string" desc="output"/>
        </output>
    </function>
    <function name="bitAND" desc="bit AND-Operation" category="Math">
        <input>
            <param name="value1" type="integer" desc="value1"/>
            <param name="value2" type="integer" desc="value2"/>
        </input>
        <output>
            <param name="result" type="integer" desc="result"/>
        </output>
    </function>
    <function name="bitHighestSet" desc="bit HighestSet-Operation" category="Math">
        <input>
            <param name="input" type="integer" desc="input"/>
        </input>
        <output>
            <param name="highestBit" type="integer" desc="highestBit"/>
        </output>
    </function>
    <function name="bitOR" desc="bit OR-Operation" category="Math">
        <input>
            <param name="value1" type="integer" desc="value1"/>
            <param name="value2" type="integer" desc="value2"/>
        </input>
        <output>
            <param name="result" type="integer" desc="result"/>
        </output>
    </function>
    <function name="bitShiftRight" desc="bit ShiftRight-Operation" category="Math">
        <input>
            <param name="value1" type="integer" desc="value1"/>
            <param name="value2" type="integer" desc="value2"/>
        </input>
        <output>
            <param name="result" type="integer" desc="result"/>
        </output>
    </function>
    <function name="buildNavMesh" desc="Build the navigation mesh based on the specified world data" category="NavMesh">
        <input>
            <param name="navMeshId" type="entityId" desc="navMeshId"/>
            <param name="worldNode" type="entityId" desc="worldNode"/>
            <param name="cellSize" type="float" desc="cellSize"/>
            <param name="cellHeight" type="float" desc="cellHeight"/>
            <param name="agentHeight" type="float" desc="agentHeight"/>
            <param name="agentRadius" type="float" desc="agentRadius"/>
            <param name="agentMaxClimb" type="float" desc="agentMaxClimb"/>
            <param name="agentMaxSlope" type="float" desc="agentMaxSlope"/>
            <param name="minRegionSize" type="float" desc="minRegionSize"/>
            <param name="mergeRegionSize" type="float" desc="mergeRegionSize"/>
            <param name="maxEdgeLength" type="float" desc="maxEdgeLength"/>
            <param name="maxSimplificationError" type="float" desc="maxSimplificationError"/>
            <param name="navMeshBuildMask" type="integer" desc="navMeshBuildMask"/>
            <param name="terrainDetail" type="float" desc="terrainDetail"/>
            <param name="terrainCullInfoLayer" type="string" desc="terrainCullInfoLayer"/>
            <param name="terrainCullInfoLayerChannels" type="integer" desc="terrainCullInfoLayerChannels"/>
        </input>
        <output>
            <param name="success" type="boolean" desc="success"/>
        </output>
    </function>
    <function name="buildNavMeshFromContour" desc="Build the navigation mesh based on the provided contour" category="NavMesh">
        <input>
            <param name="navMeshId" type="entityId" desc=""/>
            <param name="contourWorldPositions" type="floatArray" desc=""/>
            <param name="terrainNodeId" type="entityId" desc=""/>
            <param name="collisionMask" type="integer" desc=""/>
            <param name="cellSize" type="float" desc="cellSize"/>
            <param name="cellHeight" type="float" desc="cellHeight"/>
            <param name="agentHeight" type="float" desc="agentHeight"/>
            <param name="agentRadius" type="float" desc="agentRadius"/>
            <param name="agentMaxClimb" type="float" desc="agentMaxClimb"/>
            <param name="agentMaxSlope" type="float" desc="agentMaxSlope"/>
            <param name="minRegionSize" type="float" desc="minRegionSize"/>
            <param name="mergeRegionSize" type="float" desc="mergeRegionSize"/>
            <param name="maxEdgeLength" type="float" desc="maxEdgeLength"/>
            <param name="maxSimplificationError" type="float" desc="maxSimplificationError"/>
        </input>
        <output>
            <param name="success" type="boolean" desc=""/>
        </output>
    </function>
    <function name="buildNavMeshFromShapesAndContour" desc="Build the navigation mesh based on the specified shapes and provided contour" category="NavMesh">
        <input>
            <param name="navMeshId" type="entityId" desc=""/>
            <param name="shapesNodeId" type="entityId" desc=""/>
            <param name="shapesMask" type="integer" desc=""/>
            <param name="contourWorldPositions" type="floatArray" desc=""/>
            <param name="terrainNodeId" type="entityId" desc=""/>
            <param name="collisionMask" type="integer" desc=""/>
            <param name="cellSize" type="float" desc=""/>
            <param name="cellHeight" type="float" desc=""/>
            <param name="agentHeight" type="float" desc=""/>
            <param name="agentRadius" type="float" desc=""/>
            <param name="agentMaxClimb" type="float" desc=""/>
            <param name="agentMaxSlope" type="float" desc=""/>
            <param name="minRegionSize" type="float" desc=""/>
            <param name="mergeRegionSize" type="float" desc=""/>
            <param name="maxEdgeLength" type="float" desc=""/>
            <param name="maxSimplificationError" type="float" desc=""/>
        </input>
        <output>
            <param name="success" type="boolean" desc=""/>
        </output>
    </function>
    <function name="calcDistanceFrom" desc="Calculate distance between two nodes" category="Node">
        <input>
            <param name="transformOne" type="entityId" desc="transformId of first node"/>
            <param name="transformTwo" type="entityId" desc="transformId of second node"/>
        </input>
        <output>
            <param name="distance" type="float" desc="distance between the two nodes"/>
        </output>
    </function>
    <function name="calcDistanceSquaredFrom" desc="Calculate squared distance between two transforms" category="Node">
        <input>
            <param name="transformOne" type="entityId" desc="transformId of first node"/>
            <param name="transformTwo" type="entityId" desc="transformId of second node"/>
        </input>
        <output>
            <param name="squaredDistance" type="float" desc="squared distance between the two nodes"/>
        </output>
    </function>
    <function name="cancelStreamI3DFile" desc="Cancel streaming I3D file" category="I3D">
        <input>
            <param name="requestId" type="integer" desc="request id from streamI3DFile"/>
        </input>
        <output/>
    </function>
    <function name="clearAnimTrackClip" desc="Clear animation track clip assignment" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
        </input>
        <output/>
    </function>
    <function name="clearEntireSharedI3DFileCache" desc="Clears the shared i3d cache, deleting all data and calling finish callbacks on all pending loads with failedReason = Cancelled." category="I3D">
        <input/>
        <output/>
    </function>
    <function name="clearLightShadowIgnoreShapes" desc="Clears (removes) all ignore shapes of the given light" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source node"/>
        </input>
        <output/>
    </function>
    <function name="clearMergedShadowIgnoreShapes" desc="Clears (removes) all ignore shapes for merged shadow of the given light" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source node"/>
        </input>
        <output/>
    </function>
    <function name="clearOverlayArea" desc="Clears all overlays in the given area.&#xA;Only allowed to be called within &quot;draw&quot;" category="Overlays">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="width" type="float" desc="width"/>
            <param name="height" type="float" desc="height"/>
            <param name="rotation" type="float" desc="rotation"/>
            <param name="rotCenterX" type="float" desc="center of rotation x"/>
            <param name="rotCenterY" type="float" desc="center of rotation y"/>
        </input>
        <output/>
    </function>
    <function name="clearTerrainFillLayers" desc="Clear terrain fill layers in given terrain" category="Terrain Detail">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
        </input>
        <output/>
    </function>
    <function name="clone" desc="Clone scenegraph object" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="groupUnderParent" type="boolean" desc="groupUnderParent"/>
            <param name="callOnCreate" type="boolean?" desc="callOnCreate [optional]"/>
            <param name="addPhysics" type="boolean?" desc="addPhysics [optional]"/>
        </input>
        <output>
            <param name="cloneId" type="entityId" desc="cloneId"/>
        </output>
    </function>
    <function name="cloneAnimCharacterSet" desc="Clone anim character set" category="Animation">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="targetId" type="entityId" desc="targetId"/>
        </input>
        <output>
            <param name="success" type="boolean" desc="success"/>
        </output>
    </function>
    <function name="computeWheelShapeTireForces" desc="Calculate wheel shape tire forces" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
            <param name="longSlipRatio" type="float" desc="longSlipRatio"/>
            <param name="latSlipAngle" type="float" desc="latSlipAngle"/>
            <param name="tireLoad" type="float" desc="tireLoad"/>
        </input>
        <output>
            <param name="longForce" type="float" desc="longForce"/>
            <param name="latForce" type="float" desc="latForce"/>
        </output>
    </function>
    <function name="conditionalAnimationDebugDraw" desc="Debug draw" category="Animation">
        <input>
            <param name="conditionalAnimationEntityId" type="entityId" desc="conditionalAnimationEntityId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output/>
    </function>
    <function name="conditionalAnimationRegisterParameter" desc="Register parameter" category="Animation">
        <input>
            <param name="conditionalAnimationEntityId" type="entityId" desc="conditionalAnimationEntityId"/>
            <param name="parameterId" type="integer" desc=""/>
            <param name="parameterType" type="integer" desc=""/>
            <param name="parameterLabel" type="string" desc=""/>
        </input>
        <output/>
    </function>
    <function name="conditionalAnimationZeroiseTrackTimes" desc="Zeroise track times" category="Animation">
        <input>
            <param name="conditionalAnimationEntityId" type="entityId" desc="conditionalAnimationEntityId"/>
        </input>
        <output/>
    </function>
    <function name="createAudioSource" desc="Create audio source object for 3D sounds" category="Sound">
        <input>
            <param name="audioSourceName" type="string" desc="audioSourceName"/>
            <param name="sampleFilename" type="string" desc="sampleFilename"/>
            <param name="radius" type="float" desc="radius"/>
            <param name="innerRadius" type="float" desc="innerRadius"/>
            <param name="volume" type="float" desc="volume"/>
            <param name="loops" type="integer" desc="loops"/>
        </input>
        <output>
            <param name="audioSource" type="entityId" desc=""/>
        </output>
    </function>
    <function name="createCamera" desc="Create camera" category="Camera">
        <input>
            <param name="cameraName" type="string" desc="cameraName"/>
            <param name="fovy" type="float" desc="fovy"/>
            <param name="nearClip" type="float" desc="nearClip"/>
            <param name="farClip" type="float" desc="farClip"/>
        </input>
        <output>
            <param name="cameraId" type="entityId" desc="cameraId"/>
        </output>
    </function>
    <function name="createCCT" desc="Create character controller (y axis capsule based). Total resulting capsule height is 2 * radius + height" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="radius" type="float" desc="radius of the cylinder and capsule ends"/>
            <param name="height" type="float" desc="height of the cylinder part of the capsule."/>
            <param name="stepOffset" type="float" desc="stepOffset"/>
            <param name="slopeLimit" type="float" desc="slopeLimit (in degrees)"/>
            <param name="skinWidth" type="float" desc="skinWidth"/>
            <param name="collisionGroup" type="integer" desc="collisionGroup"/>
            <param name="collisionMask" type="integer" desc="collisionMask"/>
            <param name="mass" type="float" desc="mass"/>
        </input>
        <output>
            <param name="characterIndex" type="integer" desc="characterIndex"/>
        </output>
    </function>
    <function name="createConditionalAnimation" desc="Create conditional animation" category="Animation">
        <input/>
        <output>
            <param name="conditionalAnimationEntityId" type="entityId" desc=""/>
        </output>
    </function>
    <function name="createFillPlaneShape" desc="Creates a fill plane shape based on shapeId" category="Fillplanes">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="shapeName" type="string" desc="shapeName"/>
            <param name="volume" type="float" desc="volume"/>
            <param name="deltaMax" type="float" desc="deltaMax"/>
            <param name="maxSurfaceAngle" type="float" desc="maxSurfaceAngle"/>
            <param name="maxPhysicalSurfaceAngle" type="float" desc="maxPhysicalSurfaceAngle"/>
            <param name="maxSurfaceDistanceError" type="float" desc="maxSurfaceDistanceError"/>
            <param name="maxSubDivEdgeLength" type="float" desc="maxSubDivEdgeLength"/>
            <param name="syncMaxSubDivEdgeLength" type="float" desc="syncMaxSubDivEdgeLength"/>
            <param name="createSidePlanes" type="boolean" desc="createSidePlanes"/>
            <param name="retessellateTop" type="boolean" desc="retessellateTop"/>
        </input>
        <output>
            <param name="fillPlaneShapeId" type="entityId" desc="fillPlaneShapeId"/>
        </output>
    </function>
    <function name="createFoliageBendingRectangle" desc="" category="Foliage">
        <input>
            <param name="foliageBendingSystemId" type="entityId" desc=""/>
            <param name="minX" type="float" desc=""/>
            <param name="maxX" type="float" desc=""/>
            <param name="minZ" type="float" desc=""/>
            <param name="maxZ" type="float" desc=""/>
            <param name="yOffset" type="float" desc=""/>
            <param name="centerTransformid" type="entityId" desc=""/>
        </input>
        <output>
            <param name="rectangleId" type="integer" desc=""/>
        </output>
    </function>
    <function name="createImageOverlay" desc="Create overlay object" category="Overlays">
        <input>
            <param name="textureFilename" type="string" desc="textureFilename"/>
        </input>
        <output>
            <param name="imageOverlay" type="entityId" desc=""/>
        </output>
    </function>
    <function name="createImageOverlayWithTexture" desc="Create overlay object with existing texture" category="Overlays">
        <input>
            <param name="textureId" type="entityId" desc="textureId"/>
        </input>
        <output>
            <param name="imageOverlay" type="entityId" desc=""/>
        </output>
    </function>
    <function name="createLightSource" desc="Create a new light source" category="Node">
        <input>
            <param name="name" type="string" desc=""/>
            <param name="lightType" type="integer" desc="one of enum LightType"/>
            <param name="r" type="float" desc=""/>
            <param name="g" type="float" desc=""/>
            <param name="b" type="float" desc=""/>
            <param name="range" type="float" desc=""/>
        </input>
        <output>
            <param name="lightEntity" type="entityId" desc=""/>
        </output>
    </function>
    <function name="createLoopSynthesisSample" desc="Create a loop synthesis sample object" category="Sound">
        <input>
            <param name="objectName" type="string" desc="objectName"/>
        </input>
        <output>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </output>
    </function>
    <function name="createNavMesh" desc="Create a navigation mesh node." category="NavMesh">
        <input>
            <param name="name" type="string" desc="name"/>
        </input>
        <output>
            <param name="navMeshId" type="entityId" desc="navMeshId"/>
        </output>
    </function>
    <function name="createNoteNode" desc="Create note node" category="NoteNode">
        <input>
            <param name="parentId" type="entityId?" desc="Parent ID [optional] otherwise linked to rootNode"/>
            <param name="text" type="string?" desc="Text [optional]"/>
            <param name="colorR" type="float?" desc="R component of note color [optional, 0-1]"/>
            <param name="colorG" type="float?" desc="G component of note color [optional, 0-1]"/>
            <param name="colorB" type="float?" desc="B component of note color [optional, 0-1]"/>
            <param name="fixedSize" type="boolean?" desc="Fixed size on screen [optional]"/>
        </input>
        <output>
            <param name="noteNodeId" type="entityId" desc=""/>
        </output>
    </function>
    <function name="createPlaneShapeFrom2DContour" desc="Create plane shape from 2D contour" category="Shape">
        <input>
            <param name="name" type="string" desc=""/>
            <param name="contour2DWorldPositions" type="floatArray" desc=""/>
            <param name="createRigidBody" type="boolean?" desc="[optional] defaults to false"/>
        </input>
        <output>
            <param name="shape" type="entityId" desc=""/>
        </output>
    </function>
    <function name="createSample" desc="Create sample object" category="Sound">
        <input>
            <param name="objectName" type="string" desc="objectName"/>
        </input>
        <output>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </output>
    </function>
    <function name="createShallowWaterSimulation" desc="Creates a shallow water simulation" category="ShallowWaterSimulation">
        <input>
            <param name="name" type="string" desc="name"/>
            <param name="gridWidth" type="integer" desc="Number of simulation grid cells in the x direction"/>
            <param name="gridHeight" type="integer" desc="Number of simulation grid cells in the y direction"/>
            <param name="physicalWidth" type="float" desc="Physical (world) width of the whole grid"/>
            <param name="physicalHeight" type="float" desc="Physical (world) height/length of the whole grid"/>
            <param name="useHeightDisplacement" type="boolean?" desc="[optional] Determines whether the simulation will make use of the height displacement of the water surface for rendering. Setting this to false assumes the output will only be used to modify water surface normals. Defaults to false"/>
        </input>
        <output>
            <param name="shallowWaterSimulationId" type="entityId" desc="ID of the created simulation"/>
        </output>
    </function>
    <function name="createSplineFromEditPoints" desc="Creates a new spline entity from the given edit points." category="Spline">
        <input>
            <param name="parentId" type="entityId" desc="The id of the entity which should be the parent of the newly created spline."/>
            <param name="editPoints" type="floatArray" desc="A list of edit point coordinates. Each edit point is defined by three consecutive coordinates (x, y, z). The number of supplied coordinates must be divisible by three. At least two edit points (six coordinates) must be supplied."/>
            <param name="makeLinearSpline" type="boolean?" desc="If true, the newly created spline is of linear type. Otherwise its of cubic type. [optional, default=false]"/>
            <param name="isClosed" type="boolean?" desc="If true, the newly created spline is closed. Otherwise its open. [optional, default=false]"/>
        </input>
        <output>
            <param name="objectId" type="entityId" desc="The id of the newly created spline entity."/>
        </output>
    </function>
    <function name="createStreamedSample" desc="Create streamed sample object" category="Sound">
        <input>
            <param name="objectName" type="string" desc="objectName"/>
            <param name="isBackgroundMusic" type="boolean" desc="isBackgroundMusic"/>
        </input>
        <output>
            <param name="streamedSampleId" type="entityId" desc="streamedSampleId"/>
        </output>
    </function>
    <function name="createTrack" desc="Creates a tire track system" category="Tire Track">
        <input>
            <param name="tyreTrackSystem" type="entityId" desc="tyreTrackSystem"/>
            <param name="width" type="float" desc="width"/>
            <param name="atlasIndex" type="integer" desc="atlasIndex"/>
        </input>
        <output>
            <param name="trackid" type="integer" desc="trackid"/>
        </output>
    </function>
    <function name="createTransformGroup" desc="Create transform group&#xA;Use link() to place/move transform in the scenegraph" category="Node">
        <input>
            <param name="transformName" type="string" desc="transformName"/>
        </input>
        <output>
            <param name="transformId" type="entityId" desc="transformId"/>
        </output>
    </function>
    <function name="createTyreTrackSystem" desc="Creates a tire track system" category="Tire Track">
        <input>
            <param name="rootNode" type="entityId" desc=""/>
            <param name="shape" type="entityId" desc="shape with tire track material"/>
            <param name="maxNumTracks" type="integer" desc=""/>
            <param name="maxNumSegments" type="integer" desc=""/>
            <param name="atlasSize" type="integer" desc=""/>
            <param name="terrainNode" type="entityId" desc=""/>
        </input>
        <output>
            <param name="tyreTrackSystemEntity" type="entityId" desc=""/>
        </output>
    </function>
    <function name="createWheelShape" desc="Create wheel shape" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="positionX" type="float" desc="positionX"/>
            <param name="positionY" type="float" desc="positionY"/>
            <param name="positionZ" type="float" desc="positionZ"/>
            <param name="radius" type="float" desc="radius"/>
            <param name="suspensionTravel" type="float" desc="suspensionTravel"/>
            <param name="spring" type="float" desc="spring"/>
            <param name="damperCompressionLowSpeed" type="float" desc="damperCompressionLowSpeed"/>
            <param name="damperCompressionHighSpeed" type="float" desc="damperCompressionHighSpeed"/>
            <param name="damperCompressionLowSpeedThreshold" type="float" desc="damperCompressionLowSpeedThreshold"/>
            <param name="damperRelaxationLowSpeed" type="float" desc="damperRelaxationLowSpeed"/>
            <param name="damperRelaxationHighSpeed" type="float" desc="damperRelaxationHighSpeed"/>
            <param name="damperRelaxationLowSpeedThreshold" type="float" desc="damperRelaxationLowSpeedThreshold"/>
            <param name="mass" type="float" desc="mass"/>
            <param name="collisionGroup" type="integer" desc="collisionGroup"/>
            <param name="collisionMask" type="integer" desc="collisionMask"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex (if 0, will create a new wheel)"/>
        </input>
        <output>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
        </output>
    </function>
    <function name="createXMLFile" desc="Create an empty XML file" category="XML">
        <input>
            <param name="objectName" type="string" desc="objectName"/>
            <param name="filename" type="string" desc="filename"/>
            <param name="rootNodeName" type="string" desc="rootNodeName"/>
        </input>
        <output>
            <param name="xmlId" type="integer" desc="xmlId"/>
        </output>
    </function>
    <function name="cutTrack" desc="Relinquish track segments" category="Tire Track">
        <input>
            <param name="tyreTrackSystem" type="entityId" desc="tyreTrackSystem"/>
            <param name="trackId" type="integer" desc="trackId"/>
        </input>
        <output/>
    </function>
    <function name="debugDisableSingleStep" desc="Disable single step script execution" category="Debug">
        <input/>
        <output/>
    </function>
    <function name="debugEnableSingleStep" desc="Enable single step script execution" category="Debug">
        <input/>
        <output/>
    </function>
    <function name="delete" desc="Delete Entity/Object" category="Entity">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output/>
    </function>
    <function name="destroyFoliageBendingObject" desc="" category="Foliage">
        <input>
            <param name="foliageBendingSystemId" type="entityId" desc=""/>
            <param name="objectId" type="integer" desc="id of the bending object, such as returned by createFoliageBendingRectangle"/>
        </input>
        <output/>
    </function>
    <function name="destroyTrack" desc="Destroys a tire track" category="Tire Track">
        <input>
            <param name="tyreTrackSystem" type="entityId" desc="tyreTrackSystem"/>
            <param name="trackId" type="integer" desc="trackId"/>
        </input>
        <output/>
    </function>
    <function name="disableAnimTrack" desc="Disable animation track" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
        </input>
        <output/>
    </function>
    <function name="drawDebugArrow" desc="Render an arrow. Only use for debug rendering" category="Debug">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="dirX" type="float" desc="dirX"/>
            <param name="dirY" type="float" desc="dirY"/>
            <param name="dirZ" type="float" desc="dirZ"/>
            <param name="tangX" type="float" desc="tangX"/>
            <param name="tangY" type="float" desc="tangY"/>
            <param name="tangZ" type="float" desc="tangZ"/>
            <param name="r" type="float" desc="r"/>
            <param name="g" type="float" desc="g"/>
            <param name="b" type="float" desc="b"/>
            <param name="solid" type="boolean?" desc="[optional] true: depth is checked and point can be hidden behind other meshes; false: always rendered on top (default=true)"/>
        </input>
        <output/>
    </function>
    <function name="drawDebugLine" desc="Render a line. Only use for debug rendering" category="Debug">
        <input>
            <param name="x0" type="float" desc="x0"/>
            <param name="y0" type="float" desc="y0"/>
            <param name="z0" type="float" desc="z0"/>
            <param name="r0" type="float" desc="r0"/>
            <param name="g0" type="float" desc="g0"/>
            <param name="b0" type="float" desc="b0"/>
            <param name="x1" type="float" desc="x1"/>
            <param name="y1" type="float" desc="y1"/>
            <param name="z1" type="float" desc="z1"/>
            <param name="r1" type="float" desc="r1"/>
            <param name="g1" type="float" desc="g1"/>
            <param name="b1" type="float" desc="b1"/>
            <param name="solid" type="boolean?" desc="[optional] true: depth is checked and point can be hidden behind other meshes; false: always rendered on top (default=true)"/>
        </input>
        <output/>
    </function>
    <function name="drawDebugPoint" desc="Render a point. Only use for debug rendering" category="Debug">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="r" type="float" desc="r"/>
            <param name="g" type="float" desc="g"/>
            <param name="b" type="float" desc="b"/>
            <param name="a" type="float" desc="a"/>
            <param name="solid" type="boolean?" desc="[optional] true: depth is checked and point can be hidden behind other meshes; false: always rendered on top (default=true)"/>
        </input>
        <output/>
    </function>
    <function name="drawDebugSetDimmingState" desc="Enable/disable full screen dimming" category="Debug">
        <input>
            <param name="enableDimming" type="boolean" desc="enable/disable dimming"/>
        </input>
        <output/>
    </function>
    <function name="enableAnimTrack" desc="Enable animation track" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
        </input>
        <output/>
    </function>
    <function name="eraseParallelogram" desc="Erase segments inside parallelogram" category="Tire Track">
        <input>
            <param name="tyreTrackSystem" type="entityId" desc="tyreTrackSystem"/>
            <param name="startWorldX" type="float" desc="startWorldX"/>
            <param name="startWorldZ" type="float" desc="startWorldZ"/>
            <param name="widthWorldX" type="float" desc="widthWorldX"/>
            <param name="widthWorldZ" type="float" desc="widthWorldZ"/>
            <param name="heightWorldX" type="float" desc="heightWorldX"/>
            <param name="heightWorldZ" type="float" desc="heightWorldZ"/>
        </input>
        <output/>
    </function>
    <function name="erasePolygon" desc="Erase segments inside polygonal area" category="Tire Track">
        <input>
            <param name="tyreTrackSystem" type="entityId" desc="tyreTrackSystem"/>
            <param name="vertexPositions" type="floatArray" desc="an array x1,z1, x2,z2, ... defining the vertices of the polygon"/>
        </input>
        <output/>
    </function>
    <function name="exportNoteNodes" desc="Export all script created notes to file" category="NoteNode">
        <input>
            <param name="filePath" type="string" desc=""/>
        </input>
        <output/>
    </function>
    <function name="fillPlaneAdd" desc="Add material/volume to a fill plane" category="Fillplanes">
        <input>
            <param name="fillPlaneShapeId" type="entityId" desc="fillPlaneShapeId"/>
            <param name="dTvolume" type="float" desc="dTvolume"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="dx1" type="float" desc="dx1"/>
            <param name="dy1" type="float" desc="dy1"/>
            <param name="dz1" type="float" desc="dz1"/>
            <param name="dx2" type="float" desc="dx2"/>
            <param name="dy2" type="float" desc="dy2"/>
            <param name="dz2" type="float" desc="dz2"/>
        </input>
        <output/>
    </function>
    <function name="finalizeTerrainFillLayers" desc="Finalize terrain fill layers in given terrain" category="Terrain Detail">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
        </input>
        <output/>
    </function>
    <function name="findPolyline" desc="find nearest polyline" category="Fillplanes">
        <input>
            <param name="fillPlaneShapeId" type="entityId" desc="fillPlaneShapeId"/>
            <param name="x" type="float" desc="x"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="polyLineId" type="integer" desc="polyLineId"/>
        </output>
    </function>
    <function name="getAllSharedI3DFileRequestIds" desc="Get all shared I3D file request ids" category="I3D">
        <input/>
        <output>
            <param name="ids" type="intArray" desc="array of request ids"/>
        </output>
    </function>
    <function name="getAllStreamI3DFileRequestIds" desc="Get all streaming I3D file request ids" category="I3D">
        <input/>
        <output>
            <param name="ids" type="intArray" desc="array of request ids"/>
        </output>
    </function>
    <function name="getAngularDamping" desc="Get angular damping" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="angularDamping" type="float" desc="angularDamping"/>
        </output>
    </function>
    <function name="getAngularVelocity" desc="Get angular velocity of transform object" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="velocityX" type="float" desc="velocityX"/>
            <param name="velocityY" type="float" desc="velocityY"/>
            <param name="velocityZ" type="float" desc="velocityZ"/>
        </output>
    </function>
    <function name="getAnimCharacterSet" desc="Get animation character set id" category="Animation">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="characterSetId" type="integer" desc="characterSetId"/>
        </output>
    </function>
    <function name="getAnimClipDuration" desc="Get the duration of the clip at the given index" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="index" type="integer" desc="index"/>
        </input>
        <output>
            <param name="duration" type="float" desc="duration"/>
        </output>
    </function>
    <function name="getAnimClipIndex" desc="Return the index of the clip with the given name" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="clipName" type="string" desc="clipName"/>
        </input>
        <output>
            <param name="index" type="integer" desc="index"/>
        </output>
    </function>
    <function name="getAnimClipName" desc="Get the name of the clip at the given index" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc=""/>
            <param name="index" type="integer" desc=""/>
        </input>
        <output>
            <param name="name" type="string" desc=""/>
        </output>
    </function>
    <function name="getAnimNumOfClips" desc="Get number of clips" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
        </input>
        <output>
            <param name="numClips" type="integer" desc="numClips"/>
        </output>
    </function>
    <function name="getAnimTrackAssignedClip" desc="Get animation track assigned clip index number" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
        </input>
        <output>
            <param name="clipIndex" type="integer" desc="clipIndex"/>
        </output>
    </function>
    <function name="getAnimTrackBlendWeight" desc="Get animation track blend weight" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
        </input>
        <output>
            <param name="weight" type="float" desc="weight"/>
        </output>
    </function>
    <function name="getAnimTrackTime" desc="Get animation track time" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
        </input>
        <output>
            <param name="time" type="float" desc="time"/>
        </output>
    </function>
    <function name="getAudioSourceAutoPlay" desc="Get if audio source has auto play enabled" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
        </input>
        <output>
            <param name="autoPlayEnabled" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getAudioSourceInnerRange" desc="Gets inner range of audio source. If the camera is further than this distance volume will start to decrease" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
        </input>
        <output>
            <param name="range" type="float" desc="inner range (fade start)"/>
        </output>
    </function>
    <function name="getAudioSourceMaxRetriggerDelay" desc="Get the AudioSource&apos;s max retrigger delay" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
        </input>
        <output>
            <param name="maxRetriggerDelay" type="float" desc="maxRetriggerDelay"/>
        </output>
    </function>
    <function name="getAudioSourceMinRetriggerDelay" desc="Get the AudioSource&apos;s min retrigger delay" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
        </input>
        <output>
            <param name="minRetriggerDelay" type="float" desc="minRetriggerDelay"/>
        </output>
    </function>
    <function name="getAudioSourcePriority" desc="Get audio source priority." category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
        </input>
        <output>
            <param name="priority" type="integer" desc=""/>
        </output>
    </function>
    <function name="getAudioSourceRandomPlayback" desc="Get the AudioSource&apos;s random playback state" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
        </input>
        <output>
            <param name="randomPlayback" type="boolean" desc="randomPlayback"/>
        </output>
    </function>
    <function name="getAudioSourceRange" desc="Gets (outer) range of audio source" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
        </input>
        <output>
            <param name="range" type="float" desc="outer range (fade end)"/>
        </output>
    </function>
    <function name="getAudioSourceSample" desc="Gets the sample id of an audio source" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
        </input>
        <output>
            <param name="sampleId" type="integer" desc="sampleId"/>
        </output>
    </function>
    <function name="getAudioSourceSampleElementProbability" desc="Get the AudioSource&apos;s sample element&apos;s probability" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
            <param name="index" type="integer" desc="index"/>
        </input>
        <output>
            <param name="probability" type="float" desc="probability"/>
        </output>
    </function>
    <function name="getAudioSourceTickInaudible" desc="Get the inaudible behavior of the sound. By default, if a sound is inaudible, it&apos;s paused, and will resume when it becomes audible again." category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
        </input>
        <output>
            <param name="tickIfInaudible" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getCamera" desc="Get currently active camera" category="Camera">
        <input/>
        <output>
            <param name="cameraId" type="entityId" desc="cameraId"/>
        </output>
    </function>
    <function name="getCanRenderUnicode" desc="Get can render unicode" category="Text Rendering">
        <input>
            <param name="unicode" type="integer" desc="unicode"/>
        </input>
        <output>
            <param name="canRender" type="boolean" desc="canRender"/>
        </output>
    </function>
    <function name="getCCTCollisionFlags" desc="Get character controller collision flags" category="Physics">
        <input>
            <param name="characterIndex" type="integer" desc="characterIndex"/>
        </input>
        <output>
            <param name="side" type="boolean" desc="side"/>
            <param name="up" type="boolean" desc="up"/>
            <param name="down" type="boolean" desc="down"/>
        </output>
    </function>
    <function name="getCCTHeight" desc="Get character height in meters of the cylinder part of the character capsule." category="Physics">
        <input>
            <param name="characterIndex" type="integer" desc="characterIndex"/>
        </input>
        <output>
            <param name="height" type="float" desc="height"/>
        </output>
    </function>
    <function name="getCenterOfMass" desc="Get center of mass (only for dynamic physics objects)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </output>
    </function>
    <function name="getChild" desc="Get first child node matching given name" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="childName" type="string" desc="childName"/>
        </input>
        <output>
            <param name="childId" type="entityId" desc="entityId of first child with the given name, 0 if no child matches"/>
        </output>
    </function>
    <function name="getChildAt" desc="Get child id at given index. Indices start at 0." category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="index" type="integer" desc="index "/>
        </input>
        <output>
            <param name="childId" type="entityId" desc="childId"/>
        </output>
    </function>
    <function name="getChildIndex" desc="Get child index of given transform relative to its parent. Indices starting at 0" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="childIndex" type="integer" desc="childIndex, -1 if transform has no parent"/>
        </output>
    </function>
    <function name="getClipDistance" desc="Get object clip distance" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="distance" type="float" desc="distance"/>
        </output>
    </function>
    <function name="getClipDistancesWithLOD" desc="Get clip distance respecting LODs, ignoring view distance coefficients" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="minDist" type="float" desc="minDist"/>
            <param name="maxDist" type="float" desc="maxDist"/>
        </output>
    </function>
    <function name="getClosestSplinePosition" desc="Get closest world space position and time on spline to given world space position" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc=""/>
            <param name="worldX" type="float" desc=""/>
            <param name="worldY" type="float" desc=""/>
            <param name="worldZ" type="float" desc=""/>
            <param name="eps" type="float" desc="acceptable world space error"/>
        </input>
        <output>
            <param name="worldX" type="float" desc=""/>
            <param name="worldY" type="float" desc=""/>
            <param name="worldZ" type="float" desc=""/>
            <param name="time" type="float" desc=""/>
        </output>
    </function>
    <function name="getCollisionFilter" desc="Get collision filter" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="group" type="integer" desc="group"/>
            <param name="mask" type="integer" desc="mask"/>
        </output>
    </function>
    <function name="getCollisionFilterGroup" desc="Get collision filter group" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="group" type="integer" desc="group"/>
        </output>
    </function>
    <function name="getCollisionFilterMask" desc="Get collision filter mask" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="mask" type="integer" desc="mask"/>
        </output>
    </function>
    <function name="getConditionalAnimationBoolValue" desc="Get boolean value" category="Animation">
        <input>
            <param name="conditionalAnimationEntityId" type="entityId" desc="conditionalAnimationEntityId"/>
            <param name="parameterId" type="integer" desc="parameterId"/>
        </input>
        <output>
            <param name="value" type="boolean" desc="value"/>
        </output>
    </function>
    <function name="getConditionalAnimationFloatValue" desc="Get float value" category="Animation">
        <input>
            <param name="conditionalAnimationEntityId" type="entityId" desc="conditionalAnimationEntityId"/>
            <param name="parameterId" type="integer" desc="parameterId"/>
        </input>
        <output>
            <param name="value" type="float" desc="value"/>
        </output>
    </function>
    <function name="getConditionalAnimationTime" desc="Get time" category="Animation">
        <input>
            <param name="conditionalAnimationEntityId" type="entityId" desc="conditionalAnimationEntityId"/>
        </input>
        <output>
            <param name="time" type="float" desc=""/>
        </output>
    </function>
    <function name="getCurrentMasterVolume" desc="Get current master volume" category="Sound">
        <input/>
        <output>
            <param name="volume" type="float" desc="volume"/>
        </output>
    </function>
    <function name="getDataPlaneAssociatedTransformGroup" desc="Get associated transform group (foliage or terrain fill) from a given dataplane" category="Terrain Detail">
        <input>
            <param name="dataPlaneId" type="entityId" desc="dataPlaneId"/>
        </input>
        <output>
            <param name="tgId" type="integer" desc="transform group ID"/>
        </output>
    </function>
    <function name="getDensity" desc="Get density" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="density" type="float" desc="density"/>
        </output>
    </function>
    <function name="getDensityAtWorldPos" desc="Get density at world position" category="Terrain Detail">
        <input>
            <param name="dataPlaneId" type="entityId" desc="dataPlaneId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="density" type="integer" desc="density"/>
        </output>
    </function>
    <function name="getDensityHeightAtWorldPos" desc="Get height of the density map at the world position" category="Terrain Detail">
        <input>
            <param name="fillDataPlaneId" type="entityId" desc="fillDataPlaneId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="height" type="float" desc=""/>
            <param name="delta" type="float" desc="height to terrain"/>
        </output>
    </function>
    <function name="getDensityMapSize" desc="Get density map file name" category="Terrain Detail">
        <input>
            <param name="terrainDataPlane" type="entityId" desc="terrainDataPlane"/>
        </input>
        <output>
            <param name="mapSize" type="integer" desc="mapSize"/>
        </output>
    </function>
    <function name="getDensityMapSyncerCellIndicesAtWorldPosition" desc="" category="Terrain Detail">
        <input>
            <param name="densityMapSyncerId" type="entityId" desc=""/>
            <param name="densityMapId" type="entityId" desc=""/>
            <param name="worldX" type="float" desc="world X coordinate"/>
            <param name="worldZ" type="float" desc="world Z coordinate"/>
        </input>
        <output>
            <param name="cellX" type="integer" desc="cell index"/>
            <param name="cellZ" type="integer" desc="cell index"/>
            <param name="inRangeFlag" type="boolean" desc="cell indices are in range"/>
        </output>
    </function>
    <function name="getDensityNormalAtWorldPos" desc="Get normal of the density map at the world position" category="Terrain Detail">
        <input>
            <param name="fillDataPlaneId" type="entityId" desc="fillDataPlaneId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="nx" type="float" desc="normal x"/>
            <param name="ny" type="float" desc="normal y"/>
            <param name="nz" type="float" desc="normal z"/>
        </output>
    </function>
    <function name="getDensityStatesAtWorldPos" desc="Get all density states at world position" category="Terrain Detail">
        <input>
            <param name="dataPlaneId" type="entityId" desc="dataPlaneId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="states" type="integer" desc="density states (this is all the density map bits excluding the type index)"/>
        </output>
    </function>
    <function name="getDensityTypeIndexAtWorldPos" desc="Get density type index at world position" category="Terrain Detail">
        <input>
            <param name="dataPlaneId" type="entityId" desc="dataPlaneId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="typeIndex" type="integer" desc="density type index"/>
        </output>
    </function>
    <function name="getEffectiveClipDistancesWithLOD" desc="Get effective clip distance respecting LODs and current view distance coefficients" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="minDist" type="float" desc="minDist"/>
            <param name="maxDist" type="float" desc="maxDist"/>
        </output>
    </function>
    <function name="getEffectiveVisibility" desc="Get effective transform object visibility respecting parent hierarchy" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="visibility" type="boolean" desc="true if node and all its parent nodes are visible"/>
        </output>
    </function>
    <function name="getEmitCountScale" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
        </input>
        <output>
            <param name="countScale" type="float" desc="countScale"/>
        </output>
    </function>
    <function name="getEmitStartTime" desc="Get emitter starting time.&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
        </input>
        <output>
            <param name="emitStartTime" type="float" desc="emitStartTime"/>
        </output>
    </function>
    <function name="getEmitStopTime" desc="Get emitter stop time.&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
        </input>
        <output>
            <param name="emitStopTime" type="float" desc="emitStopTime"/>
        </output>
    </function>
    <function name="getEmitterShape" desc="Returns the emitter shape of the particle system&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
        </input>
        <output>
            <param name="shapeId" type="integer" desc="shapeId"/>
        </output>
    </function>
    <function name="getEmitterShapeVelocityScale" desc="Returns the emitter shape velocity scale of the particle system&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
        </input>
        <output>
            <param name="shape" type="float" desc="velocity scale"/>
        </output>
    </function>
    <function name="getFarClip" desc="Get camera far clip distance" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
        </input>
        <output>
            <param name="farClip" type="float" desc="farClip"/>
        </output>
    </function>
    <function name="getFillPlaneHeightAtLocalPos" desc="Get the fill plane height at a specific position" category="Fillplanes">
        <input>
            <param name="fillPlaneShapeId" type="entityId" desc="fillPlaneShapeId"/>
            <param name="x" type="float" desc="x"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="height" type="float" desc="height"/>
        </output>
    </function>
    <function name="getFoliageBendingRectangleAttributes" desc="" category="Foliage">
        <input>
            <param name="foliageBendingSystemId" type="entityId" desc=""/>
            <param name="rectangleId" type="integer" desc=""/>
        </input>
        <output>
            <param name="minX" type="float" desc=""/>
            <param name="maxX" type="float" desc=""/>
            <param name="minZ" type="float" desc=""/>
            <param name="maxZ" type="float" desc=""/>
            <param name="yOffset" type="float" desc=""/>
        </output>
    </function>
    <function name="getFoliageTransformGroupIdByFoliageName" desc="Get foliage transform group from foliage (dataplane) name" category="Terrain Detail">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
            <param name="detailName" type="string" desc="detailName"/>
        </input>
        <output>
            <param name="foliageTgId" type="integer" desc="foliageTgId"/>
        </output>
    </function>
    <function name="getFovY" desc="Get the vertical field of view angle" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="id of the camera"/>
        </input>
        <output>
            <param name="fovY" type="float" desc="field of view angle (radian)"/>
        </output>
    </function>
    <function name="getGamepadAxisLabel" desc="Get joystick/gamepad axis label" category="Input">
        <input>
            <param name="axisNumber" type="integer" desc="axisNumber"/>
            <param name="gamepadIndex" type="integer" desc="gamepadIndex"/>
        </input>
        <output>
            <param name="axisLabel" type="string" desc="axisLabel"/>
        </output>
    </function>
    <function name="getGamepadButtonLabel" desc="Get joystick/gamepad button label" category="Input">
        <input>
            <param name="buttonNumber" type="integer" desc="buttonNumber"/>
            <param name="gamepadIndex" type="integer" desc="gamepadIndex"/>
        </input>
        <output>
            <param name="buttonLabel" type="string" desc="buttonLabel"/>
        </output>
    </function>
    <function name="getGamepadName" desc="Get name of joystick/gamepad" category="Input">
        <input>
            <param name="gamepadIndex" type="integer" desc="gamepadIndex"/>
        </input>
        <output>
            <param name="gamepadName" type="string" desc="gamepadName"/>
        </output>
    </function>
    <function name="getGeometry" desc="Get shape geometry id" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="geometryId" type="integer" desc="geometryId"/>
        </output>
    </function>
    <function name="getHasClassId" desc="Get has class id" category="Entity">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="classId" type="integer" desc="one of enum ClassIds"/>
        </input>
        <output>
            <param name="hasClassId" type="boolean" desc="hasClassId"/>
        </output>
    </function>
    <function name="getHasCollision" desc="Get if transform group has physics collision" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="hasCollision" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getHasShaderParameter" desc="Get has shader parameter" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc=""/>
            <param name="parameterName" type="string" desc=""/>
            <param name="materialIndex" type="integer?" desc="material index or a negative value to set to all materials [optional, default=-1]"/>
        </input>
        <output>
            <param name="hasParam" type="boolean" desc="hasParam"/>
        </output>
    </function>
    <function name="getHasTouchpad" desc="Get existence of a touchpad - this is dynamic (e.g. Switch has touchpad only when not docked)" category="Input">
        <input/>
        <output>
            <param name="hasTouchpad" type="boolean" desc="true iff the device has an active touchpad"/>
        </output>
    </function>
    <function name="getHasTrigger" desc="Get if rigid body has &apos;trigger&apos; flag set.&#xA;Returns false if node does not exist or is not a rigid body." category="Physics">
        <input>
            <param name="shapeId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="hasTriggerFlag" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getInactiveWindowAudioVolume" desc="Get inactive window volume" category="Sound">
        <input/>
        <output>
            <param name="volume" type="float" desc="volume"/>
        </output>
    </function>
    <function name="getInputAxis" desc="Get joystick/gamepad axis value" category="Input">
        <input>
            <param name="axisNumber" type="integer" desc="axisNumber"/>
            <param name="gamepadIndex" type="integer" desc="gamepadIndex"/>
        </input>
        <output>
            <param name="axisValue" type="float" desc="axisValue"/>
        </output>
    </function>
    <function name="getInputButton" desc="Get joystick/gamepad button value" category="Input">
        <input>
            <param name="buttonNumber" type="integer" desc="buttonNumber"/>
            <param name="gamepadIndex" type="integer" desc="gamepadIndex"/>
        </input>
        <output>
            <param name="buttonValue" type="float" desc="buttonValue"/>
        </output>
    </function>
    <function name="getIsAddedToPhysics" desc="Get if transform is added to physics world (may not immediately return true after addToPhysics due to async effects)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="isAddedToPhysics" type="boolean" desc="isAddedToPhysics"/>
        </output>
    </function>
    <function name="getIsCompound" desc="Get if rigid body transform is a compound" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="isCompound" type="boolean" desc="isCompound"/>
        </output>
    </function>
    <function name="getIsCompoundChild" desc="Get if rigid body transform is a compound child" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="isCompound" type="boolean" desc="isCompound"/>
        </output>
    </function>
    <function name="getIsLockedGroup" desc="Get transform object locked group flag" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="locked" type="boolean" desc="group locked group"/>
        </output>
    </function>
    <function name="getIsLODTransformGroup" desc="Get if transform group is LOD transform group" category="Node">
        <input>
            <param name="transformId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="true" type="boolean" desc="if transformId is LOD transform group, false otherwise"/>
        </output>
    </function>
    <function name="getIsNonRenderable" desc="Get if shape is non-renderable" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="isNonRenderable" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getIsOrthographic" desc="Get if camera is in orthographic mode" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
        </input>
        <output>
            <param name="isOrthographic" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getIsSplineClosed" desc="Checks if given spline has closed form" category="Spline">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="isClosed" type="boolean" desc="isClosed"/>
        </output>
    </function>
    <function name="getLevenshteinDistance" desc="Get levenshtein distance" category="Math">
        <input>
            <param name="value1" type="string" desc="value1"/>
            <param name="value2" type="string" desc="value2"/>
        </input>
        <output>
            <param name="distance" type="integer" desc="distance"/>
        </output>
    </function>
    <function name="getLightCastingShadowMap" desc="Returns whether the light source casts a shadow or not." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="lightId"/>
        </input>
        <output>
            <param name="doesCastShadowMap" type="boolean" desc="doesCastShadowMap"/>
        </output>
    </function>
    <function name="getLightConeAngle" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="cone" type="float" desc="angle in radian"/>
        </output>
    </function>
    <function name="getLightConeAngleFromIESProfile" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="cone" type="float" desc="angle in radian"/>
        </output>
    </function>
    <function name="getLightDropOff" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="dropoff" type="float" desc=""/>
        </output>
    </function>
    <function name="getLightIESProfile" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="&apos;*.ies&apos;" type="string" desc="filepath "/>
        </output>
    </function>
    <function name="getLightRange" desc="Get range of a light" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="lightId"/>
        </input>
        <output>
            <param name="range" type="float" desc="range"/>
        </output>
    </function>
    <function name="getLightScatteringConeAngle" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="scattering" type="float" desc="cone angle"/>
        </output>
    </function>
    <function name="getLightScatteringDirection" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="dirX" type="float" desc=""/>
            <param name="dirY" type="float" desc=""/>
            <param name="dirZ" type="float" desc=""/>
        </output>
    </function>
    <function name="getLightScatteringIntensity" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="scattering" type="float" desc="intensity"/>
        </output>
    </function>
    <function name="getLightShadowPriority" desc="Gets shadow priority (float value) for the given shadow light. Higher value means higher priority (will be picked before lower priority lights when too many shadows are on the screen)." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source"/>
        </input>
        <output>
            <param name="shadowPriority" type="float" desc="shadow priority value of the light source"/>
        </output>
    </function>
    <function name="getLightSoftShadowDepthBiasFactor" desc="Gets soft shadow depth bias factor of light source. The bias factor is multiplied with the depth bias of the light source (e.g. depth bias = 0.0001f, bias factor = 2.0f -> depth bias is 0.0002f). They are separated so you can still have the normal bias for PCF shadows (when soft shadows are disabled), which generally&#xA;need a smaller bias." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source"/>
        </input>
        <output>
            <param name="softShadowBias" type="float" desc="depth bias factor for soft shadows used by the light source"/>
        </output>
    </function>
    <function name="getLightSoftShadowDistance" desc="Gets soft shadow light distance for directional lights (it&apos;s fake, fixed distance from each pixel). Ignored by spot lights (though it will still return a value)" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source"/>
        </input>
        <output>
            <param name="softShadowDistance" type="float" desc="light distance used for the soft shadow"/>
        </output>
    </function>
    <function name="getLightSoftShadowSize" desc="Gets soft shadow size. This is essentially the size of the virtual/imagined light source that is casting the soft shadow (for directional lights, instead of an infinitely far away sun, it&apos;s a fake square light source). The size of the shadow on the floor is then a function of this size, the light source distance from the ground,&#xA;and the distance of shadow blocker to the ground. For dir lights, the light source distance is fixed at a fake distance, and can be set with another scripting command (setLightSoftShadowDistance)." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source"/>
        </input>
        <output>
            <param name="softShadowSize" type="float" desc="soft shadow light size"/>
        </output>
    </function>
    <function name="getLightType" desc="Get light type" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="lightId"/>
        </input>
        <output>
            <param name="lightType" type="integer" desc="one of enum LightType"/>
        </output>
    </function>
    <function name="getLightUseLightScattering" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="usesLightScattering" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getLinearDamping" desc="Get linear damping" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="linearDamping" type="float" desc="linearDamping"/>
        </output>
    </function>
    <function name="getLinearVelocity" desc="Get linear velocity of transform object (only for kinematic and dynamic physics objects)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="velocityX" type="float" desc="velocityX"/>
            <param name="velocityY" type="float" desc="velocityY"/>
            <param name="velocityZ" type="float" desc="velocityZ"/>
        </output>
    </function>
    <function name="getLocalClosestSplinePosition" desc="Get closest world space position and time on spline to given world space position" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc="shapeId"/>
            <param name="time" type="float" desc=""/>
            <param name="timeRange" type="float" desc="(searches in -/+ 0.5*range)"/>
            <param name="worldX" type="float" desc=""/>
            <param name="worldY" type="float" desc=""/>
            <param name="worldZ" type="float" desc=""/>
            <param name="eps" type="float" desc="epsilon value in meters used for matching precision. Minimum value 0.001"/>
        </input>
        <output>
            <param name="worldX" type="float" desc=""/>
            <param name="worldY" type="float" desc=""/>
            <param name="worldZ" type="float" desc=""/>
            <param name="time" type="float" desc=""/>
        </output>
    </function>
    <function name="getLocalLinearVelocity" desc="Get local linear velocity of transform object (only for kinematic and dynamic physics objects)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="velocityX" type="float" desc="velocityX"/>
            <param name="velocityY" type="float" desc="velocityY"/>
            <param name="velocityZ" type="float" desc="velocityZ"/>
        </output>
    </function>
    <function name="getLODTransformGroup" desc="Returns the LOD transform group that this transform group belongs to" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId is either a shape, an audio source or a light source"/>
        </input>
        <output>
            <param name="lodTransformId" type="integer" desc=""/>
        </output>
    </function>
    <function name="getMass" desc="Get mass" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="mass" type="float" desc="mass in tons"/>
        </output>
    </function>
    <function name="getMasterVolume" desc="Get master volume" category="Sound">
        <input/>
        <output>
            <param name="volume" type="float" desc="volume"/>
        </output>
    </function>
    <function name="getMaterial" desc="Get material by index" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="materialIndex" type="integer" desc="materialIndex"/>
        </input>
        <output>
            <param name="materialId" type="integer" desc="materialId"/>
        </output>
    </function>
    <function name="getMaterialAlbedoColor" desc="Returns the materials albedo color, if available." category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="success" type="boolean" desc="Indicates whether the returned color is valid"/>
            <param name="r" type="float" desc="r (0.0 to 1.0)"/>
            <param name="g" type="float" desc="g (0.0 to 1.0)"/>
            <param name="b" type="float" desc="b (0.0 to 1.0)"/>
            <param name="a" type="float" desc="a (0.0 to 1.0)"/>
        </output>
    </function>
    <function name="getMaterialCustomMapFilename" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
            <param name="customMapName" type="string" desc="customMapName"/>
        </input>
        <output>
            <param name="filename" type="string" desc=""/>
        </output>
    </function>
    <function name="getMaterialCustomMapIsSRGB" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
            <param name="customMapName" type="string" desc="customMapName"/>
        </input>
        <output>
            <param name="isSRGB" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getMaterialCustomParameter" desc="Retrieves the custom parameter values of a material" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
            <param name="name" type="string" desc="name of the custom parameter"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="w" type="float" desc="w"/>
        </output>
    </function>
    <function name="getMaterialCustomShaderFilename" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="customShaderFilename" type="string" desc="filename of the custom shader"/>
        </output>
    </function>
    <function name="getMaterialCustomShaderVariation" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="customShaderVariation" type="string" desc="name of the custom shader variation"/>
        </output>
    </function>
    <function name="getMaterialDiffuseMapFilename" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="filename" type="string" desc="filename"/>
        </output>
    </function>
    <function name="getMaterialDiffuseMapHasAlpha" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="hasAlphaChannel" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getMaterialEmissiveMapFilename" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="filename" type="string" desc="filename"/>
        </output>
    </function>
    <function name="getMaterialEmissiveMapHasAlpha" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="hasAlphaChannel" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getMaterialGlossMapFilename" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="filename" type="string" desc="filename"/>
        </output>
    </function>
    <function name="getMaterialHasRefractionMap" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="hasRefractionMap" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getMaterialIsAlphaBlended" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="isAlphaBlended" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getMaterialIsAlphaTested" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="isAlphaTested" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getMaterialMetalness" desc="Returns the materials metalness, if available." category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="success" type="boolean" desc="Indicates whether the returned value is valid"/>
            <param name="metalness" type="float" desc="metalness (0.0 to 1.0)"/>
        </output>
    </function>
    <function name="getMaterialNormalMapFilename" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="filename" type="string" desc="filename"/>
        </output>
    </function>
    <function name="getMaterialNormalMapFormat" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="normalFormat" type="integer" desc="format of enum NormalMapFormat"/>
        </output>
    </function>
    <function name="getMaterialReflectionMapScaling" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="reflectionMapScaling" type="float" desc="scaling of reflection map. 0 if no reflection map."/>
        </output>
    </function>
    <function name="getMaterialSlotName" desc="Returns the shapes slot name for the material at the given index." category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="materialIndex" type="integer" desc="material index of shape, starting at 0"/>
        </input>
        <output>
            <param name="slotName" type="string" desc="slotName"/>
        </output>
    </function>
    <function name="getMaterialSmoothness" desc="Returns the materials smoothness, if available." category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="success" type="boolean" desc="Indicates whether the returned value is valid"/>
            <param name="smoothness" type="float" desc="smoothness (0.0 to 1.0)"/>
        </output>
    </function>
    <function name="getMaxNumOfParticles" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
        </input>
        <output>
            <param name="maxNumParticles" type="integer" desc="maximum number of active particles"/>
        </output>
    </function>
    <function name="getMergedShadowSettingsLight" desc="Gets ID of the shadow settings light used in a given group of light sources with merged shadows. Will return id 0 if the light source doesn&apos;t have any settings light, or if its not part of a merged shadow group." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of one of the light sources in a given merged shadow group"/>
        </input>
        <output>
            <param name="settingsLightId" type="entityId" desc="id of the shadow settings light (or 0 if there isn&apos;t one assigned to the merged shadow group)"/>
        </output>
    </function>
    <function name="getMinClipDistance" desc="Get minimum clip distance" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="minDist" type="float" desc="minDist"/>
        </output>
    </function>
    <function name="getMotorRotationSpeed" desc="Get motor rotation speed" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="motorRotSpeed" type="float" desc="motorRotSpeed"/>
            <param name="clutchRotSpeed" type="float" desc="clutchRotSpeed"/>
            <param name="motorLoad" type="float" desc="motorLoad"/>
        </output>
    </function>
    <function name="getMotorTorque" desc="Get motor torque" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="availableTorque" type="float" desc=""/>
            <param name="appliedTorque" type="float" desc=""/>
            <param name="externalTorque" type="float" desc=""/>
        </output>
    </function>
    <function name="getName" desc="Get entity name" category="Entity">
        <input>
            <param name="entityId" type="entityId" desc="entityId"/>
        </input>
        <output>
            <param name="entityName" type="string" desc="entityName"/>
        </output>
    </function>
    <function name="getNearClip" desc="Get camera near clip distance" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
        </input>
        <output>
            <param name="nearClip" type="float" desc="nearClip"/>
        </output>
    </function>
    <function name="getNoteNodeText" desc="Get note node text" category="NoteNode">
        <input>
            <param name="noteId" type="entityId" desc="Id of the note node"/>
        </input>
        <output>
            <param name="text" type="string" desc=""/>
        </output>
    </function>
    <function name="getNumOfAudioSourceSampleElements" desc="Get the number of sample elements for an AudioSource" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
        </input>
        <output>
            <param name="count" type="integer" desc="count"/>
        </output>
    </function>
    <function name="getNumOfChildren" desc="Get number of children" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="numOfChildren" type="integer" desc="numOfChildren"/>
        </output>
    </function>
    <function name="getNumOfGamepads" desc="Get number of joysticks/gamepads" category="Input">
        <input/>
        <output>
            <param name="numOfGamepads" type="integer" desc="numOfGamepads"/>
        </output>
    </function>
    <function name="getNumOfMaterials" desc="Get number of materials" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="numMaterials" type="integer" desc="numMaterials"/>
        </output>
    </function>
    <function name="getNumOfParticlesToEmitPerMs" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
        </input>
        <output>
            <param name="emittedParticlesPerMs" type="float" desc="emittedParticlesPerMs"/>
        </output>
    </function>
    <function name="getNumOfShapeBones" desc="" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="numOfBones" type="integer" desc=""/>
        </output>
    </function>
    <function name="getNumOfSharedI3DFiles" desc="Gets the number of shared I3d files" category="I3D">
        <input/>
        <output>
            <param name="fileCount" type="integer" desc="fileCount"/>
        </output>
    </function>
    <function name="getNumOfUserAttributes" desc="Get number of user attributes" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="numAttributes" type="integer" desc="numAttributes"/>
        </output>
    </function>
    <function name="getNumSplineAttributes" desc="Get number of spline attributes" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc=""/>
        </input>
        <output>
            <param name="numAttributes" type="integer" desc=""/>
        </output>
    </function>
    <function name="getObjectMask" desc="Get object mask" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="mask" type="integer" desc="mask"/>
        </output>
    </function>
    <function name="getOrthographicHeight" desc="Get camera orthographic height" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
        </input>
        <output>
            <param name="orthographicHeight" type="float" desc=""/>
        </output>
    </function>
    <function name="getParent" desc="Get parent id" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="parentId" type="entityId" desc="parentId, 0 if transform has no parent e.g. node is not linked or rootNode"/>
        </output>
    </function>
    <function name="getParticleSystemAverageSpeed" desc="Get particle system average speed.&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
        </input>
        <output>
            <param name="normalSpeed" type="float" desc="normalSpeed"/>
            <param name="tangentSpeed" type="float" desc="tangentSpeed"/>
        </output>
    </function>
    <function name="getParticleSystemLifespan" desc="Get particle system life span.&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
        </input>
        <output>
            <param name="lifeSpan" type="float" desc="lifeSpan"/>
        </output>
    </function>
    <function name="getParticleSystemNormalSpeed" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
        </input>
        <output>
            <param name="normalSpeed" type="float" desc="normalSpeed"/>
        </output>
    </function>
    <function name="getParticleSystemSpeed" desc="Get particle system speed&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
        </input>
        <output>
            <param name="speed" type="float" desc="speed"/>
        </output>
    </function>
    <function name="getParticleSystemSpeedRandom" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
        </input>
        <output>
            <param name="speedRandom" type="float" desc="speedRandom"/>
        </output>
    </function>
    <function name="getParticleSystemSpriteScaleX" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
        </input>
        <output>
            <param name="spriteScaleX" type="float" desc="spriteScaleX"/>
        </output>
    </function>
    <function name="getParticleSystemSpriteScaleXGain" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
        </input>
        <output>
            <param name="spriteScaleXGain" type="float" desc="spriteScaleXGain"/>
        </output>
    </function>
    <function name="getParticleSystemSpriteScaleY" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
        </input>
        <output>
            <param name="spriteScaleY" type="float" desc="spriteScaleY"/>
        </output>
    </function>
    <function name="getParticleSystemSpriteScaleYGain" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
        </input>
        <output>
            <param name="spriteScaleXGain" type="float" desc="spriteScaleXGain"/>
        </output>
    </function>
    <function name="getParticleSystemTangentSpeed" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
        </input>
        <output>
            <param name="tangentSpeed" type="float" desc="tangentSpeed"/>
        </output>
    </function>
    <function name="getProjectionOffset" desc="Get camera projection offset" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
        </output>
    </function>
    <function name="getQuaternion" desc="Get quaternion in local space" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="w" type="float" desc="w"/>
        </output>
    </function>
    <function name="getRainAmountMultiplier" desc="Get current multiplier for number of supported rain drops (for hardware settings purposes)." category="Rendering">
        <input/>
        <output>
            <param name="multiplier" type="float" desc="multiplier"/>
        </output>
    </function>
    <function name="getRigidBodyAABB" desc="Get rigid body AABB. Returns nil if transform is not added to physics (yet)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="minX" type="float" desc=""/>
            <param name="maxX" type="float" desc=""/>
            <param name="minY" type="float" desc=""/>
            <param name="maxY" type="float" desc=""/>
            <param name="minZ" type="float" desc=""/>
            <param name="maxZ" type="float" desc=""/>
        </output>
    </function>
    <function name="getRigidBodyType" desc="Get rigid body type" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="rigidBodyType" type="integer" desc="one of enum RIGID_BODY_TYPE"/>
        </output>
    </function>
    <function name="getRootNode" desc="Get root node" category="Node">
        <input/>
        <output>
            <param name="transformId" type="entityId" desc="transformId"/>
        </output>
    </function>
    <function name="getRotation" desc="Get local space rotation of a transform object (relative to its parent)" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="x" type="float" desc="local x rotation in radians"/>
            <param name="y" type="float" desc="local y rotation in radians"/>
            <param name="z" type="float" desc="local z rotation in radians"/>
        </output>
    </function>
    <function name="getSampleDuration" desc="Get sample duration" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </input>
        <output>
            <param name="duration" type="float" desc="duration"/>
        </output>
    </function>
    <function name="getSampleLoopSynthesisLoadFactor" desc="Get the loop synthesis sample load factor currently played" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </input>
        <output>
            <param name="loadFactor" type="float" desc="loadFactor normalized between [-1;1]"/>
        </output>
    </function>
    <function name="getSampleLoopSynthesisMaxRPM" desc="Get the loop synthesis sample max RPM" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </input>
        <output>
            <param name="max" type="float" desc="RPM"/>
        </output>
    </function>
    <function name="getSampleLoopSynthesisMinRPM" desc="Get the loop synthesis sample min RPM" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </input>
        <output>
            <param name="min" type="float" desc="RPM"/>
        </output>
    </function>
    <function name="getSampleLoopSynthesisRPM" desc="Get the loop synthesis sample RPM currently played" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
            <param name="useNormalizedValue" type="boolean" desc="If true, return normalized value between [0;1]; else return real range value."/>
        </input>
        <output>
            <param name="rpm" type="float" desc="rpm"/>
        </output>
    </function>
    <function name="getSampleLoopSynthesisStartDuration" desc="Get the loop synthesis sample start sound duration" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </input>
        <output>
            <param name="startDuration" type="float" desc="duration [ms] of the loop synthesis start sound."/>
        </output>
    </function>
    <function name="getSampleLoopSynthesisStopDuration" desc="Get the loop synthesis sample stop sound duration" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </input>
        <output>
            <param name="stopDuration" type="float" desc="duration [ms] of the loop synthesis stop sound. Should be passed to the stopSample delay to make sure the stop sound can be played fully."/>
        </output>
    </function>
    <function name="getSampleLoopSynthesisTargetLoadFactor" desc="Get the loop synthesis sample target load factor" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </input>
        <output>
            <param name="loadFactor" type="float" desc="loadFactor normalized between [-1;1]"/>
        </output>
    </function>
    <function name="getSampleLoopSynthesisTargetRPM" desc="Get the loop synthesis sample target RPM" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
            <param name="useNormalizedValue" type="boolean" desc="If true, return normalized value between [0;1]; else return real range value."/>
        </input>
        <output>
            <param name="rpm" type="float" desc="rpm"/>
        </output>
    </function>
    <function name="getSamplePitch" desc="Set sample pitch" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </input>
        <output>
            <param name="pitch" type="float" desc="pitch"/>
        </output>
    </function>
    <function name="getSamplePlayOffset" desc="Get sample play offset" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </input>
        <output>
            <param name="offset" type="float" desc="offset in ms"/>
        </output>
    </function>
    <function name="getSamplePlayTimeLeft" desc="Get sample left play time" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </input>
        <output>
            <param name="leftPlayTime" type="float" desc="remaining play time in ms"/>
        </output>
    </function>
    <function name="getSampleVelocity" desc="Get velocity of a sample object" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </output>
    </function>
    <function name="getSampleVolume" desc="Get sample volume" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
        </input>
        <output>
            <param name="volume" type="float" desc="volume"/>
        </output>
    </function>
    <function name="getScale" desc="Get scale of a transform object" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </output>
    </function>
    <function name="getShaderParameter" desc="Get shader parameter" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="parameterName" type="string" desc="parameterName"/>
            <param name="materialIndex" type="integer?" desc="[optional, default=0]"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="w" type="float" desc="w"/>
        </output>
    </function>
    <function name="getShallowWaterSimulationFakeExtraDepth" desc="Gets the fake extra terrain height (for terrain under the water) that is used in the simulation, in order to make the water deeper than it really is." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="simulation/id of the shallow water sim to retrieve the texture from"/>
        </input>
        <output>
            <param name="height" type="float" desc="extra height added to the water under the rest level"/>
        </output>
    </function>
    <function name="getShallowWaterSimulationFoamAccumulationRate" desc="Gets foam accumulation rate (determines how much and how quickly foam spawns in turbulent waters)." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="simulation/id of the shallow water sim to retrieve the texture from"/>
        </input>
        <output>
            <param name="foam" type="float" desc="accumulation rate"/>
        </output>
    </function>
    <function name="getShallowWaterSimulationFoamDecayRate" desc="Gets foam decay rate (how quickly foam decays after it has spawned)." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="simulation/id of the shallow water sim to retrieve the texture from"/>
        </input>
        <output>
            <param name="foam" type="float" desc="decay rate"/>
        </output>
    </function>
    <function name="getShallowWaterSimulationOutputTexture" desc="Returns output texture of the simulation, which defines the total height of the water surface at every point" category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="simulation/id of the shallow water sim to retrieve the texture from"/>
        </input>
        <output>
            <param name="textureId" type="integer" desc="id of the output texture"/>
        </output>
    </function>
    <function name="getShallowWaterSimulationOutputVelocityUTexture" desc="Returns u (aka x) component of velocity output texture of the simulation, which defines the u component of velocity of the simulation at every point." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="simulation/id of the shallow water sim to retrieve the texture from"/>
        </input>
        <output>
            <param name="textureId" type="integer" desc="id of the velocity u texture"/>
        </output>
    </function>
    <function name="getShallowWaterSimulationOutputVelocityVTexture" desc="Returns v (aka y) component of velocity output texture of the simulation, which defines the v component of velocity of the simulation at every point." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="simulation/id of the shallow water sim to retrieve the texture from"/>
        </input>
        <output>
            <param name="textureId" type="integer" desc="id of the velocity u texture"/>
        </output>
    </function>
    <function name="getShapeBone" desc="" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc=""/>
            <param name="boneIndex" type="integer" desc=""/>
        </input>
        <output>
            <param name="boneId" type="integer" desc=""/>
        </output>
    </function>
    <function name="getShapeBoundingSphere" desc="Returns bounding sphere of shape" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="localPosX" type="float" desc=""/>
            <param name="localPosY" type="float" desc=""/>
            <param name="localPosZ" type="float" desc=""/>
            <param name="radius" type="float" desc=""/>
            <param name="usesGeometry" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getShapeBuildNavMeshMask" desc="Get shape build nav mesh mask" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="mask" type="integer" desc=""/>
        </output>
    </function>
    <function name="getShapeGeometryBoundingSphere" desc="Returns bounding sphere of the shape&apos;s geometry." category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="localPosX" type="float" desc=""/>
            <param name="localPosY" type="float" desc=""/>
            <param name="localPosZ" type="float" desc=""/>
            <param name="radius" type="float" desc=""/>
        </output>
    </function>
    <function name="getShapeIsCPUMesh" desc="Get if shape is marked as CPU mesh" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="isCPUMesh" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getShapeIsSkinned" desc="Get if shape is skinned" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="isSkinned" type="boolean" desc=""/>
            <param name="isSkinnedSingleWeight" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getShapeWorldBoundingSphere" desc="Returns world space bounding sphere of shape" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="worldPosX" type="float" desc=""/>
            <param name="worldPosY" type="float" desc=""/>
            <param name="worldPosZ" type="float" desc=""/>
            <param name="radius" type="float" desc=""/>
        </output>
    </function>
    <function name="getSharedI3DFileProgressInfo" desc="Get shared I3D file progress information" category="I3D">
        <input>
            <param name="requestId" type="integer" desc="request id from streamSharedI3DFile"/>
        </input>
        <output>
            <param name="progress" type="string" desc="a string describing the progress"/>
            <param name="elapsedTime" type="float" desc="the elapsed time in seconds since the request was made"/>
            <param name="filename" type="string" desc="the filename being loaded, or else &quot;&quot;"/>
            <param name="function" type="string" desc="the Lua callback name, or else the name of the C++ class that handles the callback, or else &quot;&quot;"/>
            <param name="target" type="object" desc="the Lua callback target, or nil"/>
            <param name="args" type="object" desc="the Lua callback arguments, or nil"/>
        </output>
    </function>
    <function name="getSharedI3DFileRefCount" desc="Gets the number references a shared I3D file has" category="I3D">
        <input>
            <param name="filename" type="string" desc=""/>
        </input>
        <output>
            <param name="refCount" type="integer" desc="Number of references for the shared i3d. Smaller than 0 if file is not loaded or loading. Can be 0 when the file is still loaded (e.g. due to a releaseSharedI3DFile call with autoDelete = false)."/>
        </output>
    </function>
    <function name="getSplineAttribute" desc="Get the spline attribute value at given t" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc=""/>
            <param name="attributeIndex" type="integer" desc="attribute index (0 based)"/>
            <param name="t" type="float" desc=""/>
        </input>
        <output>
            <param name="value" type="float" desc=""/>
        </output>
    </function>
    <function name="getSplineAttributeAtCV" desc="Get the spline attribute value at given CV" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc=""/>
            <param name="attributeIndex" type="integer" desc="attribute index (0 based)"/>
            <param name="CVIndex" type="integer" desc=""/>
        </input>
        <output>
            <param name="value" type="float" desc=""/>
        </output>
    </function>
    <function name="getSplineAttributeIndex" desc="Get the index of a spline attribute" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc=""/>
            <param name="attributeName" type="string" desc=""/>
        </input>
        <output>
            <param name="attributeIndex" type="integer" desc=""/>
        </output>
    </function>
    <function name="getSplineAttributeName" desc="Get spline attribute name" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc=""/>
            <param name="attributeIndex" type="integer" desc="attribute index (0 based)"/>
        </input>
        <output>
            <param name="attributeName" type="string" desc=""/>
        </output>
    </function>
    <function name="getSplineCurvature" desc="Get spline curvature" category="Spline">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="time" type="float" desc="time"/>
        </input>
        <output>
            <param name="curvature" type="float" desc="curvature"/>
        </output>
    </function>
    <function name="getSplineCV" desc="Get spline control vertex" category="Spline">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="index" type="integer" desc="index starting at 0"/>
        </input>
        <output>
            <param name="x" type="float" desc="worldspace x"/>
            <param name="y" type="float" desc="worldspace y"/>
            <param name="z" type="float" desc="worldspace z"/>
        </output>
    </function>
    <function name="getSplineDirection" desc="Get spline direction" category="Spline">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="time" type="float" desc="time"/>
        </input>
        <output>
            <param name="dirX" type="float" desc="dirX"/>
            <param name="dirY" type="float" desc="dirY"/>
            <param name="dirZ" type="float" desc="dirZ"/>
        </output>
    </function>
    <function name="getSplineEP" desc="Get spline edit point" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc="shapeId"/>
            <param name="index" type="integer" desc="The index of edit point to be positioned, starting at 0"/>
        </input>
        <output>
            <param name="x" type="float" desc="worldspace x"/>
            <param name="y" type="float" desc="worldspace y"/>
            <param name="z" type="float" desc="worldspace z"/>
        </output>
    </function>
    <function name="getSplineLength" desc="Get spline length" category="Spline">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="length" type="float" desc="length"/>
        </output>
    </function>
    <function name="getSplineNumOfCV" desc="Get number of spline control vertices" category="Spline">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="num" type="integer" desc="num"/>
        </output>
    </function>
    <function name="getSplineOrientation" desc="Get spline orientation" category="Spline">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="time" type="float" desc="time"/>
            <param name="upDirX" type="float" desc="upDirX"/>
            <param name="upDirY" type="float" desc="upDirY"/>
            <param name="upDirZ" type="float" desc="upDirZ"/>
        </input>
        <output>
            <param name="rx" type="float" desc="rx"/>
            <param name="ry" type="float" desc="ry"/>
            <param name="rz" type="float" desc="rz"/>
        </output>
    </function>
    <function name="getSplinePosition" desc="Get spline position" category="Spline">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="time" type="float" desc="time"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </output>
    </function>
    <function name="getSplinePositionWithDistance" desc="Get world space position and time on spline that has the given world space distance to the position on the spline at the given time" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc="shapeId"/>
            <param name="time" type="float" desc=""/>
            <param name="distance" type="float" desc=""/>
            <param name="positiveTimeOffset" type="boolean" desc="search in positive or negative direction of t"/>
            <param name="eps" type="float" desc="epsilon value in meters used for matching precision. Minimum value 0.001"/>
        </input>
        <output>
            <param name="worldX" type="float" desc=""/>
            <param name="worldY" type="float" desc=""/>
            <param name="worldZ" type="float" desc=""/>
            <param name="time" type="float" desc=""/>
        </output>
    </function>
    <function name="getSplitType" desc="Get split type of shape&#xA;Max supported value is 63." category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output>
            <param name="splitType" type="integer" desc="splitType, 0 if shape is not a mesh split shape"/>
        </output>
    </function>
    <function name="getStreamedSampleVolume" desc="Get streamed sample volume" category="Sound">
        <input>
            <param name="streamedSampleId" type="entityId" desc="streamedSampleId"/>
        </input>
        <output>
            <param name="volume" type="float" desc="volume"/>
        </output>
    </function>
    <function name="getStreamI3DFileProgressInfo" desc="Get streaming I3D file progress information" category="I3D">
        <input>
            <param name="requestId" type="integer" desc="request id from streamI3DFile"/>
        </input>
        <output>
            <param name="progress" type="string" desc="a string describing the progress"/>
            <param name="elapsedTime" type="float" desc="the elapsed time in seconds since the request was made"/>
            <param name="filename" type="string" desc="the filename being loaded, or else &quot;&quot;"/>
            <param name="callbackFunctionName" type="string" desc="the Lua callback name, or else the name of the C++ class that handles the callback, or else &quot;&quot;"/>
            <param name="callbackTarget" type="object" desc="the Lua callback target, or nil"/>
            <param name="args" type="object" desc="the Lua callback arguments, or nil"/>
        </output>
    </function>
    <function name="getTerrainAttributesAtWorldPos" desc="Get terrain attributes at world pos" category="Terrain">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="xComb" type="boolean" desc="xComb"/>
            <param name="yComb" type="boolean" desc="yComb"/>
            <param name="zComb" type="boolean" desc="zComb"/>
            <param name="wComb" type="boolean" desc="wComb"/>
            <param name="uComb" type="boolean" desc="uComb"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="w" type="float" desc="w"/>
            <param name="u" type="float" desc="u"/>
        </output>
    </function>
    <function name="getTerrainDataPlaneByName" desc="Get terrain data plane by name" category="Terrain Detail">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
            <param name="detailName" type="string" desc="detailName"/>
        </input>
        <output>
            <param name="detailId" type="integer" desc="detailId"/>
            <param name="typeId" type="integer" desc="Density Map type index for this detail (may be shared with others e.g. &quot;potato&quot; and &quot;potato_haulm&quot; have the same type index)"/>
        </output>
    </function>
    <function name="getTerrainDetailByName" desc="Get terrain detail by name" category="Terrain Detail">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
            <param name="detailName" type="string" desc="detailName"/>
        </input>
        <output>
            <param name="detailId" type="integer" desc="detailId"/>
        </output>
    </function>
    <function name="getTerrainDetailName" desc="Get terrain detail name" category="Terrain Detail">
        <input>
            <param name="dataPlaneId" type="entityId" desc="dataPlaneId"/>
        </input>
        <output>
            <param name="viewDistance" type="string" desc="viewDistance"/>
        </output>
    </function>
    <function name="getTerrainDetailNumChannels" desc="Get number of terrain detail channels" category="Terrain Detail">
        <input>
            <param name="dataPlaneId" type="entityId" desc="dataPlaneId"/>
        </input>
        <output>
            <param name="numChannels" type="integer" desc="numChannels"/>
        </output>
    </function>
    <function name="getTerrainDetailTypeIndex" desc="Get density map type ID for terrain detail" category="Terrain Detail">
        <input>
            <param name="dataPlaneId" type="entityId" desc="dataPlaneId"/>
        </input>
        <output>
            <param name="typeIndex" type="integer" desc="type index"/>
        </output>
    </function>
    <function name="getTerrainHeightAtWorldPos" desc="Get terrain height at world pos" category="Terrain">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y (not relevant, can be 0)"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="height" type="float" desc="height"/>
        </output>
    </function>
    <function name="getTerrainHeightmapUnitSize" desc="Get terrain heightmap unit size" category="Terrain">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
        </input>
        <output>
            <param name="unitSize" type="float" desc="the unit size for the main terrain heightmap"/>
        </output>
    </function>
    <function name="getTerrainNormalAtWorldPos" desc="Get terrain normal at world pos" category="Terrain">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="nx" type="float" desc="nx"/>
            <param name="ny" type="float" desc="ny"/>
            <param name="nz" type="float" desc="nz"/>
        </output>
    </function>
    <function name="getTerrainSize" desc="Get terrain size" category="Terrain Detail">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
        </input>
        <output>
            <param name="size" type="float" desc="size"/>
        </output>
    </function>
    <function name="getText3DWidth" desc="Get 3D text width" category="Text Rendering">
        <input>
            <param name="fontSize" type="float" desc="fontSize "/>
            <param name="utf8string" type="string" desc="utf8string"/>
        </input>
        <output>
            <param name="width" type="float" desc="normalized screenspace width of given text at given size"/>
        </output>
    </function>
    <function name="getTextHeight" desc="Get text height" category="Text Rendering">
        <input>
            <param name="fontSize" type="float" desc="fontSize"/>
            <param name="utf8string" type="string" desc="utf8string"/>
        </input>
        <output>
            <param name="textHeight" type="float" desc="textHeight"/>
            <param name="numLines" type="integer" desc="numLines"/>
        </output>
    </function>
    <function name="getTextLength" desc="Get text length" category="Text Rendering">
        <input>
            <param name="fontSize" type="float" desc="fontSize"/>
            <param name="utf8string" type="string" desc="utf8string"/>
            <param name="maxNumLines" type="integer" desc="maxNumLines"/>
        </input>
        <output>
            <param name="numChars" type="integer" desc="numChars"/>
        </output>
    </function>
    <function name="getTextLineLength" desc="Get text length" category="Text Rendering">
        <input>
            <param name="fontSize" type="float" desc="fontSize"/>
            <param name="utf8string" type="string" desc="utf8string"/>
            <param name="maxWidth" type="float" desc="maxWidth"/>
        </input>
        <output>
            <param name="numChars" type="integer" desc="numChars"/>
        </output>
    </function>
    <function name="getTextWidth" desc="Get text width" category="Text Rendering">
        <input>
            <param name="fontSize" type="float" desc="fontSize"/>
            <param name="utf8string" type="string" desc="utf8string"/>
        </input>
        <output>
            <param name="textWidth" type="float" desc="textWidth"/>
        </output>
    </function>
    <function name="getTimeAtSplineCV" desc="Get spline time of the control vertex with the given index" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc="shapeId"/>
            <param name="index" type="integer" desc="index of the control vertex, starting at 0"/>
        </input>
        <output>
            <param name="t" type="float" desc="t"/>
        </output>
    </function>
    <function name="getTranslation" desc="Get translation of a transform object in its local space (relative to parent node)" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="x" type="float" desc="x translation relative to parent node"/>
            <param name="y" type="float" desc="y translation relative to parent node"/>
            <param name="z" type="float" desc="z translation relative to parent node"/>
        </output>
    </function>
    <function name="getUserAttribute" desc="Get user attribute value" category="Node">
        <input>
            <param name="objectId" type="entityId" desc=""/>
            <param name="name" type="string" desc=""/>
        </input>
        <output>
            <param name="value" type="any?" desc=" [optional]"/>
        </output>
    </function>
    <function name="getUserAttributeByIndex" desc="Get user attribute value by index starting at 0" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="attributeIndex" type="integer" desc="attributeIndex starting at 0"/>
        </input>
        <output>
            <param name="value" type="any?" desc=" [optional]"/>
            <param name="name" type="string" desc=""/>
            <param name="type" type="integer" desc="Value of UserAttributeType enum"/>
        </output>
    </function>
    <function name="getUserAttributeValueAndType" desc="Get user attribute value and type" category="Node">
        <input>
            <param name="objectId" type="entityId" desc=""/>
            <param name="name" type="string" desc=""/>
        </input>
        <output>
            <param name="value" type="any?" desc=" [optional]"/>
            <param name="type" type="integer" desc="Value of UserAttributeType enum"/>
        </output>
    </function>
    <function name="getVelocityAtLocalPos" desc="Get velocity at local position of transform object" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="positionX" type="float" desc="positionX"/>
            <param name="positionY" type="float" desc="positionY"/>
            <param name="positionZ" type="float" desc="positionZ"/>
        </input>
        <output>
            <param name="velocityX" type="float" desc="velocityX"/>
            <param name="velocityY" type="float" desc="velocityY"/>
            <param name="velocityZ" type="float" desc="velocityZ"/>
        </output>
    </function>
    <function name="getVelocityAtWorldPos" desc="Get velocity at world position of transform object (only for dynamic physics objects)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="positionX" type="float" desc="positionX"/>
            <param name="positionY" type="float" desc="positionY"/>
            <param name="positionZ" type="float" desc="positionZ"/>
        </input>
        <output>
            <param name="velocityX" type="float" desc="velocityX"/>
            <param name="velocityY" type="float" desc="velocityY"/>
            <param name="velocityZ" type="float" desc="velocityZ"/>
        </output>
    </function>
    <function name="getVisibility" desc="Get transform object visibility, ignoring parent hierarchy visibility" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="visibility" type="boolean" desc="true if node itself is visible"/>
        </output>
    </function>
    <function name="getVisibilityConditionDayOfYear" desc="Get the day of year condition of the visibility condition" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="dayOfYearStart" type="integer" desc="dayOfYearStart"/>
            <param name="dayOfYearEnd" type="integer" desc="dayOfYearEnd"/>
            <param name="hasOwnVisibilityCondition" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getVisibilityConditionEntityState" desc="Get the visibility condition entity state" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="isVisible" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getVisibilityConditionMinuteOfDay" desc="Get the minute of day condition of the visibility condition" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="minuteOfDayStart" type="integer" desc="minuteOfDayStart"/>
            <param name="minuteOfDayEnd" type="integer" desc="minuteOfDayEnd"/>
            <param name="hasOwnVisibilityCondition" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getVisibilityConditionRenderInvisible" desc="Get the render invisible property of the visibility condition" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="renderInvisible" type="boolean" desc="if true, the object will always be rendered and the custom shader is supposed to change the rendering based on the visibility parameter"/>
            <param name="hasOwnVisibilityCondition" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getVisibilityConditionViewerSpacialityMask" desc="Get the viewerspaciality mask condition of the visibility condition" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="viewerSpacialityRequiredMask" type="integer" desc=""/>
            <param name="viewerSpacialityPreventMask" type="integer" desc=""/>
            <param name="hasOwnVisibilityCondition" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getVisibilityConditionVisibleShaderParameter" desc="Get the shader parameter of the visibility condition" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="shaderVisibilityParam" type="float" desc="shader parameter when condition is met (ie. object is visible)"/>
            <param name="hasOwnVisibilityCondition" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getVisibilityConditionWeatherMask" desc="Get the weather mask condition of the visibility condition" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="weatherRequiredMask" type="integer" desc=""/>
            <param name="weatherPreventMask" type="integer" desc=""/>
            <param name="hasOwnVisibilityCondition" type="boolean" desc=""/>
        </output>
    </function>
    <function name="getVolume" desc="Get volume, only for dynamic and kinematic shapes, 0 otherwise" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="volume" type="float" desc="volume in cubic meters"/>
        </output>
    </function>
    <function name="getWetness" desc="" category="Rendering">
        <input/>
        <output>
            <param name="wetness" type="float" desc=""/>
        </output>
    </function>
    <function name="getWheelShapeAxleSpeed" desc="Get wheel shape axle speed" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
        </input>
        <output>
            <param name="axleSpeed" type="float" desc="axleSpeed"/>
        </output>
    </function>
    <function name="getWheelShapeContactForce" desc="Get wheel shape contact force" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
        </input>
        <output>
            <param name="contactForce" type="float" desc="contactForce"/>
        </output>
    </function>
    <function name="getWheelShapeContactNormal" desc="Get wheel shape contact normal" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </output>
    </function>
    <function name="getWheelShapeContactObject" desc="Get wheel shape contact object" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
        </input>
        <output>
            <param name="wheelShapeContactObject" type="entityId" desc="wheelShapeContactObject"/>
            <param name="contactSubShapeIndex" type="integer" desc="contactSubShapeIndex"/>
        </output>
    </function>
    <function name="getWheelShapeContactPoint" desc="Get wheel shape contact point" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
        </input>
        <output>
            <param name="positionX" type="float" desc="positionX"/>
            <param name="positionY" type="float" desc="positionY"/>
            <param name="positionZ" type="float" desc="positionZ"/>
            <param name="contactSkinWidth" type="float" desc="contactSkinWidth"/>
        </output>
    </function>
    <function name="getWheelShapePosition" desc="Get wheel shape contact point" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
        </input>
        <output>
            <param name="positionX" type="float" desc="positionX"/>
            <param name="positionY" type="float" desc="positionY"/>
            <param name="positionZ" type="float" desc="positionZ"/>
            <param name="rotation" type="float" desc="rotation"/>
            <param name="suspensionLength" type="float" desc="suspension length"/>
        </output>
    </function>
    <function name="getWheelShapeSlip" desc="Get wheel shape slip" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
        </input>
        <output>
            <param name="wheelShapeSlip" type="float" desc="wheelShapeSlip"/>
            <param name="wheelShapeSlip" type="float" desc="wheelShapeSlip"/>
        </output>
    </function>
    <function name="getWorldQuaternion" desc="Get quaternion in world space" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="w" type="float" desc="w"/>
        </output>
    </function>
    <function name="getWorldRotation" desc="Get world rotation of a transform object" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </output>
    </function>
    <function name="getWorldTranslation" desc="Get translation of a transform object in world space" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output>
            <param name="x" type="float" desc="x translation"/>
            <param name="y" type="float" desc="y translation"/>
            <param name="z" type="float" desc="z translation"/>
        </output>
    </function>
    <function name="getXMLAttributeName" desc="Returns the name of the attribute of the specified xml element at the given index" category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="xmlElementPath" type="string" desc="Path to an xml element"/>
            <param name="index" type="integer" desc="Index of the attribute to retrieve the name for"/>
        </input>
        <output>
            <param name="attributeName" type="string" desc=""/>
        </output>
    </function>
    <function name="getXMLBool" desc="Get XML file boolean attribute." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="attributePath" type="string" desc="attributePath"/>
        </input>
        <output>
            <param name="value" type="boolean" desc="value"/>
        </output>
    </function>
    <function name="getXMLElementName" desc="Returns the name of the specified xml element. Mostly useful when using wildcard paths" category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="attributePath" type="string" desc=""/>
        </input>
        <output>
            <param name="elementName" type="string" desc=""/>
        </output>
    </function>
    <function name="getXMLFilename" desc="Get XML filename" category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
        </input>
        <output>
            <param name="xmlFilename" type="string" desc="filename of xml entity (can be empty if not loaded from file)"/>
        </output>
    </function>
    <function name="getXMLFloat" desc="Get XML file float attribute." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="attributePath" type="string" desc="attributePath"/>
        </input>
        <output>
            <param name="value" type="float" desc="value"/>
        </output>
    </function>
    <function name="getXMLInt" desc="Get XML file integer attribute. If used on a decimal number any decimals will be cut off." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="attributePath" type="string" desc="attributePath"/>
        </input>
        <output>
            <param name="value" type="integer" desc="value"/>
        </output>
    </function>
    <function name="getXMLLineNum" desc="Get line number of an XML element." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="xmlPath" type="string" desc="Path to element"/>
        </input>
        <output>
            <param name="lineNumber" type="integer" desc="lineNumber"/>
        </output>
    </function>
    <function name="getXMLNumOfAttributes" desc="Returns the number of attributes of the element at the given path" category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="xmlElementPath" type="string" desc="Path to an xml element"/>
        </input>
        <output>
            <param name="numOfAttributes" type="integer" desc=""/>
        </output>
    </function>
    <function name="getXMLNumOfChildren" desc="Returns the number of children of a given element" category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="xmlElementPath" type="string" desc="Path to an xml element"/>
        </input>
        <output>
            <param name="numOfChildren" type="integer" desc=""/>
        </output>
    </function>
    <function name="getXMLNumOfElements" desc="Returns the number of equally named elements with the given path (the last element must not have an index, or the index must be 0)" category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="xmlElementPath" type="string" desc="Path to an xml element"/>
        </input>
        <output>
            <param name="numOfElements" type="integer" desc=""/>
        </output>
    </function>
    <function name="getXMLString" desc="Get XML file string attribute." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="attributePath" type="string" desc="attributePath"/>
        </input>
        <output>
            <param name="value" type="string" desc="value"/>
        </output>
    </function>
    <function name="getXMLUInt" desc="Get XML file unsigned integer attribute. If used on a decimal number any decimals will be cut off." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="attributePath" type="string" desc="attributePath"/>
        </input>
        <output>
            <param name="value" type="integer" desc="value"/>
        </output>
    </function>
    <function name="hasMergedShadow" desc="Returns whether the given light source has a merged shadow (i.e. its shadow is merged with other light sources)." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source node"/>
        </input>
        <output>
            <param name="has" type="boolean" desc="merged shadow, yes or no!"/>
        </output>
    </function>
    <function name="hasXMLProperty" desc="Returns if an XML element or attribute at given path is present." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="xmlElementPath" type="string" desc="Path to an xml element"/>
        </input>
        <output>
            <param name="hasElementOrAttribute" type="boolean" desc=""/>
            <param name="hasAttributeParentElement" type="boolean" desc="true, if the given the attribute&apos;s parent element exists (can be true even if hasElementOrAttribute is false)"/>
        </output>
    </function>
    <function name="initConditionalAnimation" desc="Init animations" category="Animation">
        <input>
            <param name="conditionalAnimationEntityId" type="entityId" desc="conditionalAnimationEntityId"/>
            <param name="charsetNodeId" type="entityId" desc="character set node id"/>
            <param name="xmlFilePath" type="string" desc="xmlFilePath"/>
            <param name="baseNodeName" type="string" desc="baseNodeName"/>
        </input>
        <output/>
    </function>
    <function name="invalidateShapeBoundingVolume" desc="Makes sure the bounding volume of the shape is up to date with the geometry bounding volume.&#xA;This needs to be called after changing the bounding volume of the geometry if the bounding volume of the shape is not invalidated otherwise (e.g. by moving)" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc=""/>
        </input>
        <output/>
    </function>
    <function name="isAnimTrackClipAssigned" desc="Is clip assigned to animation track" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
        </input>
        <output>
            <param name="isClipAssigned" type="boolean" desc="isClipAssigned"/>
        </output>
    </function>
    <function name="isAnimTrackEnabled" desc="Is animation track enabled" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
        </input>
        <output>
            <param name="state" type="boolean" desc="state"/>
        </output>
    </function>
    <function name="isMergedShadowActive" desc="For the given light source, returns whether the merged shadow (for the entire group of lights merged together) is active." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source node"/>
        </input>
        <output>
            <param name="isActive" type="boolean" desc="true - merged shadows is active. false - merged shadow is inactive"/>
        </output>
    </function>
    <function name="isSamplePlaying" desc="Is sample playing" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc=""/>
        </input>
        <output>
            <param name="isPlaying" type="boolean" desc=""/>
        </output>
    </function>
    <function name="JointConstructor:setActors" desc="Set joint actors" category="Physics">
        <input>
            <param name="actor1Id" type="entityId" desc="actor1Id"/>
            <param name="actor2Id" type="entityId" desc="actor2Id"/>
        </input>
        <output/>
    </function>
    <function name="JointConstructor:setJointTransforms" desc="Set joint transforms" category="Physics">
        <input>
            <param name="jointNode1" type="entityId" desc="jointNode1"/>
            <param name="jointNode2" type="entityId" desc="jointNode2"/>
        </input>
        <output/>
    </function>
    <function name="link" desc="Link node to another node" category="Node">
        <input>
            <param name="parentNodeId" type="entityId" desc="node to link to"/>
            <param name="childNodeId" type="entityId" desc="node to be linked"/>
            <param name="index" type="integer?" desc="[optional] child index where childNodeId is linked to (default: append after last child)"/>
        </input>
        <output/>
    </function>
    <function name="loadI3DFile" desc="Load I3D file" category="I3D">
        <input>
            <param name="filename" type="string" desc="filename"/>
            <param name="addPhysics" type="boolean?" desc="addPhysics [optional]"/>
            <param name="callOnCreate" type="boolean?" desc="callOnCreate [optional]"/>
            <param name="verbose" type="boolean?" desc="verbose [optional]"/>
        </input>
        <output>
            <param name="rootNodeId" type="integer" desc="rootNodeId"/>
            <param name="failedReason" type="integer" desc="LoadI3DFailedReason code"/>
        </output>
    </function>
    <function name="loadSample" desc="Load sample object" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
            <param name="sampleFilename" type="string" desc="sampleFilename"/>
            <param name="b3DSound" type="boolean" desc="b3DSound"/>
        </input>
        <output>
            <param name="success" type="boolean" desc="success"/>
        </output>
    </function>
    <function name="loadSharedI3DFile" desc="Load shared I3D file. If another shared stream request is still pending for the same i3d, the call blocks until this request is finished" category="I3D">
        <input>
            <param name="filename" type="string" desc="filename"/>
            <param name="addPhysics" type="boolean?" desc="addPhysics [optional]"/>
            <param name="callOnCreate" type="boolean?" desc="callOnCreate [optional]"/>
            <param name="verbose" type="boolean?" desc="verbose [optional]"/>
        </input>
        <output>
            <param name="rootNodeId" type="integer" desc="rootNodeId"/>
            <param name="requestId" type="integer" desc="shared I3D request ID"/>
            <param name="failedReason" type="integer" desc="LoadI3DFailedReason code"/>
        </output>
    </function>
    <function name="loadStreamedSample" desc="Load streamed sample object" category="Sound">
        <input>
            <param name="streamedSampleId" type="entityId" desc="streamedSampleId"/>
            <param name="sampleFilename" type="string" desc="sampleFilename"/>
        </input>
        <output>
            <param name="success" type="boolean" desc="success"/>
        </output>
    </function>
    <function name="loadXMLFile" desc="Load XML file" category="XML">
        <input>
            <param name="objectName" type="string" desc="objectName"/>
            <param name="filename" type="string" desc="filename"/>
        </input>
        <output>
            <param name="xmlId" type="integer" desc="xmlId (0 if failed to load)"/>
        </output>
    </function>
    <function name="loadXMLFileFromMemory" desc="Load XML file from xml string" category="XML">
        <input>
            <param name="objectName" type="string" desc="objectName"/>
            <param name="xmlString" type="string" desc="xml string to parse"/>
        </input>
        <output>
            <param name="xmlId" type="integer" desc="xmlId (0 if failed to load)"/>
        </output>
    </function>
    <function name="localDirectionToLocal" desc="Local space to local space transformation, only direction without translation" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="targetTransformId" type="entityId" desc="targetTransformId"/>
            <param name="dx" type="float" desc="dx"/>
            <param name="dy" type="float" desc="dy"/>
            <param name="dz" type="float" desc="dz"/>
        </input>
        <output>
            <param name="dx" type="float" desc="dx"/>
            <param name="dy" type="float" desc="dy"/>
            <param name="dz" type="float" desc="dz"/>
        </output>
    </function>
    <function name="localDirectionToWorld" desc="Local space to world space direction transformation" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="ldx" type="float" desc="local direction x"/>
            <param name="ldy" type="float" desc="local direction y"/>
            <param name="ldz" type="float" desc="local direction z"/>
        </input>
        <output>
            <param name="wdx" type="float" desc="world direction x"/>
            <param name="wdy" type="float" desc="world direction y"/>
            <param name="wdz" type="float" desc="world direction z"/>
        </output>
    </function>
    <function name="localRotationToLocal" desc="Local space to local space rotation transformation" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="targetTransformId" type="entityId" desc="targetTransformId"/>
            <param name="rx" type="float" desc="x rotation"/>
            <param name="ry" type="float" desc="y rotation"/>
            <param name="rz" type="float" desc="z rotation"/>
        </input>
        <output>
            <param name="rx" type="float" desc="x rotation"/>
            <param name="ry" type="float" desc="y rotation"/>
            <param name="rz" type="float" desc="z rotation"/>
        </output>
    </function>
    <function name="localRotationToWorld" desc="Local space to world space rotation transformation" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="lrx" type="float" desc="local rotation x"/>
            <param name="lry" type="float" desc="local rotation y"/>
            <param name="lrz" type="float" desc="local rotation z"/>
        </input>
        <output>
            <param name="wrx" type="float" desc="world rotation x"/>
            <param name="wry" type="float" desc="world rotation y"/>
            <param name="wrz" type="float" desc="world rotation z"/>
        </output>
    </function>
    <function name="localToLocal" desc="Local space to local space transformation" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="targetTransformId" type="entityId" desc="targetTransformId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </output>
    </function>
    <function name="localToWorld" desc="Local space to world space transformation" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="lx" type="float" desc="local x translation"/>
            <param name="ly" type="float" desc="local y translation"/>
            <param name="lz" type="float" desc="local z translation"/>
        </input>
        <output>
            <param name="wx" type="float" desc="world x translation"/>
            <param name="wy" type="float" desc="world y translation"/>
            <param name="wz" type="float" desc="world z translation"/>
        </output>
    </function>
    <function name="MaterialCalibrationSolver:getCurrentSRGB" desc="get currently calibrated color in sRGB format and error value." category="Rendering">
        <input>
            <param name="angle" type="integer" desc="One of the angle values (-15, 15, 25, 45, 75 or 110)"/>
        </input>
        <output>
            <param name="color" type="floatArray" desc=""/>
            <param name="error" type="float" desc=""/>
        </output>
    </function>
    <function name="MaterialCalibrationSolver:getTargetSRGB" desc="Get target color in sRGB format." category="Rendering">
        <input>
            <param name="angle" type="integer" desc="One of the angle values (-15, 15, 25, 45, 75 or 110)"/>
        </input>
        <output>
            <param name="color" type="floatArray" desc=""/>
        </output>
    </function>
    <function name="MaterialCalibrationSolver:isDone" desc="Is calibration completed." category="Rendering">
        <input/>
        <output>
            <param name="isDone" type="boolean" desc=""/>
        </output>
    </function>
    <function name="MaterialCalibrationSolver:iterate" desc="Execute one iteration of a calibration." category="Rendering">
        <input/>
        <output>
            <param name="iterationStep" type="integer" desc=""/>
            <param name="iterationMaxStep" type="integer" desc=""/>
        </output>
    </function>
    <function name="MaterialCalibrationSolver:prepare" desc="Prepare everything for calibration process. Use data provided via setters." category="Rendering">
        <input/>
        <output/>
    </function>
    <function name="MaterialCalibrationSolver:reset" desc="Reset calibrator to original state." category="Rendering">
        <input/>
        <output/>
    </function>
    <function name="MaterialCalibrationSolver:setChannels" desc="Set which channels will be used in calibration" category="Rendering">
        <input>
            <param name="channelR" type="boolean" desc=""/>
            <param name="channelG" type="boolean" desc=""/>
            <param name="channelB" type="boolean" desc=""/>
            <param name="channelSmoothness" type="boolean" desc=""/>
            <param name="channelMetalness" type="boolean" desc=""/>
        </input>
        <output/>
    </function>
    <function name="MaterialCalibrationSolver:setCustomParameterChannels" desc="Set which custom parameter channels will be used in calibration" category="Rendering">
        <input>
            <param name="parameterName" type="string" desc=""/>
            <param name="channelR" type="boolean" desc=""/>
            <param name="channelG" type="boolean" desc=""/>
            <param name="channelB" type="boolean" desc=""/>
            <param name="channelA" type="boolean" desc=""/>
        </input>
        <output/>
    </function>
    <function name="MaterialCalibrationSolver:setCustomParameterChannelValueRange" desc="Set value range for custom parameter channel" category="Rendering">
        <input>
            <param name="parameterName" type="string" desc=""/>
            <param name="channelIndex" type="integer" desc=""/>
            <param name="minValue" type="float" desc=""/>
            <param name="maxValue" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="MaterialCalibrationSolver:setShape" desc="Set a shape which will be used in calibration. Solver will take first material from that shape" category="Rendering">
        <input>
            <param name="shapeId" type="entityId" desc=""/>
        </input>
        <output/>
    </function>
    <function name="MaterialCalibrationSolver:setValueRangeChannelB" desc="Set value range for channel B" category="Rendering">
        <input>
            <param name="minValue" type="float" desc=""/>
            <param name="maxValue" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="MaterialCalibrationSolver:setValueRangeChannelG" desc="Set value range for channel G" category="Rendering">
        <input>
            <param name="minValue" type="float" desc=""/>
            <param name="maxValue" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="MaterialCalibrationSolver:setValueRangeChannelMetalness" desc="Set value range for channel metalness" category="Rendering">
        <input>
            <param name="minValue" type="float" desc=""/>
            <param name="maxValue" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="MaterialCalibrationSolver:setValueRangeChannelR" desc="Set value range for channel R" category="Rendering">
        <input>
            <param name="minValue" type="float" desc=""/>
            <param name="maxValue" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="MaterialCalibrationSolver:setValueRangeChannelSmoothness" desc="Set value range for channel smoothness" category="Rendering">
        <input>
            <param name="minValue" type="float" desc=""/>
            <param name="maxValue" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="mathEulerRotateVector" desc="Euler angle vector rotation" category="Math">
        <input>
            <param name="x" type="float" desc="euler angle x axis"/>
            <param name="y" type="float" desc="euler angle y axis"/>
            <param name="z" type="float" desc="euler angle z axis"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </output>
    </function>
    <function name="mathEulerToQuaternion" desc="Euler angle to quaternion" category="Math">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="qx" type="float" desc="qx"/>
            <param name="qy" type="float" desc="qy"/>
            <param name="qz" type="float" desc="qz"/>
            <param name="qw" type="float" desc="qw"/>
        </output>
    </function>
    <function name="mathQuaternionRotateVector" desc="Quaternion vector rotation" category="Math">
        <input>
            <param name="qx" type="float" desc="qx"/>
            <param name="qy" type="float" desc="qy"/>
            <param name="qz" type="float" desc="qz"/>
            <param name="qw" type="float" desc="qw"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </output>
    </function>
    <function name="mathQuaternionToEuler" desc="Quaternion to euler angle" category="Math">
        <input>
            <param name="qx" type="float" desc="qx"/>
            <param name="qy" type="float" desc="qy"/>
            <param name="qz" type="float" desc="qz"/>
            <param name="qw" type="float" desc="qw"/>
        </input>
        <output>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </output>
    </function>
    <function name="mergeLightShadows" desc="Merge shadows of multiple light sources and replace them with a approximated and representative match" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
            <param name="lightId2" type="entityId" desc=""/>
            <param name="lightId3" type="entityId" desc="optional light id 3"/>
            <param name="lightId4" type="entityId" desc="optional light id 4"/>
            <param name="lightId5" type="entityId" desc="optional light id 5"/>
            <param name="lightId6" type="entityId" desc="optional light id 6"/>
            <param name="lightId7" type="entityId" desc="optional light id 7"/>
            <param name="lightId8" type="entityId" desc="optional light id 8"/>
            <param name="lightId9" type="entityId" desc="optional light id 9"/>
            <param name="lightId10" type="entityId" desc="optional light id 10"/>
        </input>
        <output/>
    </function>
    <function name="moveCCT" desc="Enqueue character movement" category="Physics">
        <input>
            <param name="characterIndex" type="integer" desc="characterIndex"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="collisionGroup" type="integer" desc="collisionGroup"/>
            <param name="collisionMask" type="integer" desc="collisionMask"/>
        </input>
        <output/>
    </function>
    <function name="overlapBox" desc="Overlap box rigid body objects synchronously/blocking&#xA;Callbacks will be performed before the function returns&#xA;If the callback function returns true any possible following callbacks will be omitted, and no more work is done&#xA;Note that a &quot;dynamic&quot; object is considered to be any object which is not static or kinematic&#xA;Note that supplying false values to all of includeDynamics, includeKinematics and includeStatics will set them all to true" category="Physics">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="rx" type="float" desc="rx"/>
            <param name="ry" type="float" desc="ry"/>
            <param name="rz" type="float" desc="rz"/>
            <param name="ex" type="float" desc="ex"/>
            <param name="ey" type="float" desc="ey"/>
            <param name="ez" type="float" desc="ez"/>
            <param name="callbackFunctionName" type="string" desc="overlapBoxCallback(nodeId, subShapeIndex) -> boolean continueChecking"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional, default=ALL_BITS]"/>
            <param name="includeDynamics" type="boolean?" desc="includeDynamics [optional, default=true]"/>
            <param name="includeKinematics" type="boolean?" desc="includeKinematics [optional, default=true]"/>
            <param name="includeStatics" type="boolean?" desc="includeStatics  [optional, default=true]"/>
            <param name="exactTest" type="boolean?" desc="exactTest [optional, default=false]"/>
        </input>
        <output>
            <param name="numShapes" type="integer" desc="number of hit shapes, equal to number of performed callbacks"/>
        </output>
    </function>
    <function name="overlapBoxAsync" desc="Overlap box rigid body objects asynchronously&#xA;If the callback function returns true any possible following callbacks will be omitted&#xA;Note that a &quot;dynamic&quot; object is considered to be any object which is not static or kinematic&#xA;Note that supplying false values to all of includeDynamics, includeKinematics and includeStatics will set them all to true" category="Physics">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="rx" type="float" desc="rx"/>
            <param name="ry" type="float" desc="ry"/>
            <param name="rz" type="float" desc="rz"/>
            <param name="ex" type="float" desc="ex"/>
            <param name="ey" type="float" desc="ey"/>
            <param name="ez" type="float" desc="ez"/>
            <param name="callbackFunctionName" type="string" desc="overlapBoxAsyncCallback(nodeId, subShapeIndex, isLast) -> boolean continueReporting"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional, default=ALL_BITS]"/>
            <param name="includeDynamics" type="boolean?" desc="includeDynamics [optional, default=true]"/>
            <param name="includeKinematics" type="boolean?" desc="includeKinematics [optional, default=true]"/>
            <param name="includeStatics" type="boolean?" desc="includeStatics  [optional, default=true]"/>
            <param name="exactTest" type="boolean?" desc="exactTest [optional, default=false]"/>
        </input>
        <output/>
    </function>
    <function name="overlapConvex" desc="Overlap rigid body objects with an arbitrary convex mesh synchronously/blocking&#xA;Callbacks will be performed before the function returns&#xA;If the callback function returns true any possible following callbacks will be omitted, and no more work is done&#xA;Note that a &quot;dynamic&quot; object is considered to be any object which is not static or kinematic&#xA;Note that supplying false values to all of includeDynamics, includeKinematics and includeStatics will set them all to true" category="Physics">
        <input>
            <param name="shapeId" type="entityId" desc="convex shape to use for overlap, has to have &apos;CPU Mesh&apos; flag set"/>
            <param name="callbackFunctionName" type="string" desc="overlapConvexCallback(nodeId, subShapeIndex) -> boolean continueChecking"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional, default=ALL_BITS]"/>
            <param name="includeDynamics" type="boolean?" desc="includeDynamics [optional, default=true]"/>
            <param name="includeKinematics" type="boolean?" desc="includeKinematics [optional, default=true]"/>
            <param name="includeStatics" type="boolean?" desc="includeStatics  [optional, default=true]"/>
            <param name="exactTest" type="boolean?" desc="exactTest [optional, default=false] (Non-exact is not implemented yet and it will always use exact test)"/>
        </input>
        <output>
            <param name="numShapes" type="integer" desc="number of hit shapes, equal to number of performed callbacks"/>
        </output>
    </function>
    <function name="overlapConvexAsync" desc="Overlap rigid body objects with an arbitrary convex mesh asynchronously&#xA;If the callback function returns true any possible following callbacks will be omitted&#xA;Note that a &quot;dynamic&quot; object is considered to be any object which is not static or kinematic&#xA;Note that supplying false values to all of includeDynamics, includeKinematics and includeStatics will set them all to true" category="Physics">
        <input>
            <param name="shapeId" type="entityId" desc="convex shape to use for overlap, has to have &apos;CPU Mesh&apos; flag set"/>
            <param name="callbackFunctionName" type="string" desc="overlapConvexAsyncCallback(nodeId, subShapeIndex, isLast) -> boolean continueReporting"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional, default=ALL_BITS]"/>
            <param name="includeDynamics" type="boolean?" desc="includeDynamics [optional, default=true]"/>
            <param name="includeKinematics" type="boolean?" desc="includeKinematics [optional, default=true]"/>
            <param name="includeStatics" type="boolean?" desc="includeStatics  [optional, default=true]"/>
            <param name="exactTest" type="boolean?" desc="exactTest [optional, default=false] (Non-exact is not implemented yet and it will always use exact test)"/>
        </input>
        <output/>
    </function>
    <function name="overlapConvexPolyhedron" desc="Overlap rigid body objects with a convex polyhedron shape synchronously/blocking&#xA;Convexity is not validated&#xA;Callbacks will be performed before the function returns&#xA;If the callback function returns true any possible following callbacks will be omitted, and no more work is done&#xA;Note that a &quot;dynamic&quot; object is considered to be any object which is not static or kinematic&#xA;Note that supplying false values to all of includeDynamics, includeKinematics and includeStatics will set them all to true" category="Physics">
        <input>
            <param name="shapeVertexPositions" type="floatArray" desc="convex polyhedron shape to use for overlap. List of points in the format {x0,y0,z0,...,xn,yn,zn}"/>
            <param name="callbackFunctionName" type="string" desc="overlapConvexCallback(nodeId, subShapeIndex) -> boolean continueChecking"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional, default=ALL_BITS]"/>
            <param name="includeDynamics" type="boolean?" desc="includeDynamics [optional, default=true]"/>
            <param name="includeKinematics" type="boolean?" desc="includeKinematics [optional, default=true]"/>
            <param name="includeStatics" type="boolean?" desc="includeStatics  [optional, default=true]"/>
            <param name="exactTest" type="boolean?" desc="exactTest [optional, default=false] (Non-exact is not implemented yet and it will always use exact test)"/>
        </input>
        <output>
            <param name="numShapes" type="integer" desc="number of hit shapes, equal to number of performed callbacks"/>
        </output>
    </function>
    <function name="overlapConvexPolyhedronAsync" desc="Overlap rigid body objects with a convex polyhedron shape asynchronously&#xA;Convexity is not validated&#xA;If the callback function returns true any possible following callbacks will be omitted&#xA;Note that a &quot;dynamic&quot; object is considered to be any object which is not static or kinematic&#xA;Note that supplying false values to all of includeDynamics, includeKinematics and includeStatics will set them all to true" category="Physics">
        <input>
            <param name="shapeVertexPositions" type="floatArray" desc="convex polyhedron shape to use for overlap. List of points in the format {x0,y0,z0,...,xn,yn,zn}"/>
            <param name="callbackFunctionName" type="string" desc="overlapConvexAsyncCallback(nodeId, subShapeIndex, isLast) -> boolean continueReporting"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional, default=ALL_BITS]"/>
            <param name="includeDynamics" type="boolean?" desc="includeDynamics [optional, default=true]"/>
            <param name="includeKinematics" type="boolean?" desc="includeKinematics [optional, default=true]"/>
            <param name="includeStatics" type="boolean?" desc="includeStatics  [optional, default=true]"/>
            <param name="exactTest" type="boolean?" desc="exactTest [optional, default=false] (Non-exact is not implemented yet and it will always use exact test)"/>
        </input>
        <output/>
    </function>
    <function name="overlapCylinder" desc="Overlap cylinder rigid body objects synchronously/blocking&#xA;Callbacks will be performed before the function returns&#xA;If the callback function returns true any possible following callbacks will be omitted, and no more work is done&#xA;Note that a &quot;dynamic&quot; object is considered to be any object which is not static or kinematic&#xA;Note that supplying false values to all of includeDynamics, includeKinematics and includeStatics will set them all to true" category="Physics">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="radius" type="float" desc="radius"/>
            <param name="height" type="float" desc="height"/>
            <param name="axis" type="integer" desc="one of enum Axis"/>
            <param name="callbackFunctionName" type="string" desc="overlapCylinderCallback(nodeId, subShapeIndex) -> boolean continueChecking"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional, default=ALL_BITS]"/>
            <param name="includeDynamics" type="boolean?" desc="includeDynamics [optional, default=true]"/>
            <param name="includeKinematics" type="boolean?" desc="includeKinematics [optional, default=true]"/>
            <param name="includeStatics" type="boolean?" desc="includeStatics  [optional, default=true]"/>
            <param name="exactTest" type="boolean?" desc="exactTest [optional, default=false]"/>
        </input>
        <output>
            <param name="numShapes" type="integer" desc="number of hit shapes, equal to number of performed callbacks"/>
        </output>
    </function>
    <function name="overlapCylinderAsync" desc="Overlap cylinder rigid body objects asynchronously&#xA;If the callback function returns true any possible following callbacks will be omitted&#xA;Note that a &quot;dynamic&quot; object is considered to be any object which is not static or kinematic&#xA;Note that supplying false values to all of includeDynamics, includeKinematics and includeStatics will set them all to true" category="Physics">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="radius" type="float" desc="radius"/>
            <param name="height" type="float" desc="height"/>
            <param name="axis" type="integer" desc="one of enum Axis"/>
            <param name="callbackFunctionName" type="string" desc="overlapCylinderAsyncCallback(nodeId, subShapeIndex, isLast) -> boolean continueReporting"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional, default=ALL_BITS]"/>
            <param name="includeDynamics" type="boolean?" desc="includeDynamics [optional, default=true]"/>
            <param name="includeKinematics" type="boolean?" desc="includeKinematics [optional, default=true]"/>
            <param name="includeStatics" type="boolean?" desc="includeStatics  [optional, default=true]"/>
            <param name="exactTest" type="boolean?" desc="exactTest [optional, default=false]"/>
        </input>
        <output/>
    </function>
    <function name="overlapSphere" desc="Overlap sphere rigid body objects synchronously/blocking&#xA;Callbacks will be performed before the function returns&#xA;If the callback function returns true any possible following callbacks will be omitted, and no more work is done&#xA;Note that a &quot;dynamic&quot; object is considered to be any object which is not static or kinematic&#xA;Note that supplying false values to all of includeDynamics, includeKinematics and includeStatics will set them all to true" category="Physics">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="radius" type="float" desc="radius"/>
            <param name="callbackFunctionName" type="string" desc="overlapSphereCallback(nodeId, subShapeIndex) -> boolean continueChecking"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional, default=ALL_BITS]"/>
            <param name="includeDynamics" type="boolean?" desc="includeDynamics [optional, default=true]"/>
            <param name="includeKinematics" type="boolean?" desc="includeKinematics [optional, default=true]"/>
            <param name="includeStatics" type="boolean?" desc="includeStatics  [optional, default=true]"/>
            <param name="exactTest" type="boolean?" desc="exactTest [optional, default=false]"/>
        </input>
        <output>
            <param name="numShapes" type="integer" desc="number of hit shapes, equal to number of performed callbacks"/>
        </output>
    </function>
    <function name="overlapSphereAsync" desc="Overlap sphere rigid body objects asynchronously&#xA;If the callback function returns true any possible following callbacks will be omitted&#xA;Note that a &quot;dynamic&quot; object is considered to be any object which is not static or kinematic&#xA;Note that supplying false values to all of includeDynamics, includeKinematics and includeStatics will set them all to true" category="Physics">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="radius" type="float" desc="radius"/>
            <param name="callbackFunctionName" type="string" desc="overlapSphereAsyncCallback(nodeId, subShapeIndex, isLast) -> boolean continueReporting"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional, default=ALL_BITS]"/>
            <param name="includeDynamics" type="boolean?" desc="includeDynamics [optional, default=true]"/>
            <param name="includeKinematics" type="boolean?" desc="includeKinematics [optional, default=true]"/>
            <param name="includeStatics" type="boolean?" desc="includeStatics  [optional, default=true]"/>
            <param name="exactTest" type="boolean?" desc="exactTest [optional, default=false]"/>
        </input>
        <output/>
    </function>
    <function name="pauseStreamedSample" desc="Pause streamed sample object" category="Sound">
        <input>
            <param name="streamedSampleId" type="entityId" desc="streamedSampleId"/>
        </input>
        <output/>
    </function>
    <function name="pinSharedI3DFileInCache" desc="Pin a shared I3D file into the cache, so it&apos;s not auto-deleted" category="I3D">
        <input>
            <param name="filename" type="string" desc="filename"/>
            <param name="verbose" type="boolean" desc="verbose"/>
        </input>
        <output/>
    </function>
    <function name="playSample" desc="Play sample object" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
            <param name="loops" type="integer" desc="loops"/>
            <param name="volume" type="float" desc="volume"/>
            <param name="offset" type="float" desc="offset to start playing [ms]"/>
            <param name="delay" type="float" desc="delay until to start playing [ms]"/>
            <param name="playAfterSample" type="entityId" desc="optionally wait until playAfterSample has finished playing"/>
        </input>
        <output/>
    </function>
    <function name="playStreamedSample" desc="Play streamed sample object" category="Sound">
        <input>
            <param name="streamedSampleId" type="entityId" desc="streamedSampleId"/>
            <param name="repeatCount" type="integer" desc="repeat count"/>
        </input>
        <output/>
    </function>
    <function name="print" desc="Print given values to console&#xA;Each argument is printed in a separate line&#xA;Can handle all data types without explicit casting" category="General">
        <input>
            <param name="arg1" type="any?" desc="arg1 [optional]"/>
            <param name="arg2" type="any?" desc="arg2 [optional]"/>
            <param name="arg3" type="any?" desc="arg3 [optional]"/>
            <param name="arg4" type="any?" desc="arg4 [optional]"/>
            <param name="arg5" type="any?" desc="arg5 [optional]"/>
            <param name="arg6" type="any?" desc="arg6 [optional]"/>
            <param name="arg7" type="any?" desc="arg7 [optional]"/>
            <param name="arg8" type="any?" desc="arg8 [optional]"/>
        </input>
        <output/>
    </function>
    <function name="printCallstack" desc="print callstack" category="Debug">
        <input>
            <param name="message" type="string?" desc=" [optional]"/>
        </input>
        <output/>
    </function>
    <function name="printError" desc="Print given values to console&#xA;Each argument is printed in a separate line&#xA;Can handle all data types without explicit casting&#xA;Text is colored orange in the script console and triggers automatic opening of console if &quot;openOnWarning&quot; setting is enabled" category="General">
        <input>
            <param name="arg1" type="any?" desc="arg1 [optional]"/>
            <param name="arg2" type="any?" desc="arg2 [optional]"/>
            <param name="arg3" type="any?" desc="arg3 [optional]"/>
            <param name="arg4" type="any?" desc="arg4 [optional]"/>
            <param name="arg5" type="any?" desc="arg5 [optional]"/>
            <param name="arg6" type="any?" desc="arg6 [optional]"/>
            <param name="arg7" type="any?" desc="arg7 [optional]"/>
            <param name="arg8" type="any?" desc="arg8 [optional]"/>
        </input>
        <output/>
    </function>
    <function name="printWarning" desc="Print given values to console&#xA;Each argument is printed in a separate line&#xA;Can handle all data types without explicit casting&#xA;Text is colored red in the script console and triggers automatic opening of console if &quot;openOnError&quot; setting is enabled" category="General">
        <input>
            <param name="arg1" type="any?" desc="arg1 [optional]"/>
            <param name="arg2" type="any?" desc="arg2 [optional]"/>
            <param name="arg3" type="any?" desc="arg3 [optional]"/>
            <param name="arg4" type="any?" desc="arg4 [optional]"/>
            <param name="arg5" type="any?" desc="arg5 [optional]"/>
            <param name="arg6" type="any?" desc="arg6 [optional]"/>
            <param name="arg7" type="any?" desc="arg7 [optional]"/>
            <param name="arg8" type="any?" desc="arg8 [optional]"/>
        </input>
        <output/>
    </function>
    <function name="project" desc="Transform vector from world space into screen space" category="Node">
        <input>
            <param name="wx" type="float" desc="wx"/>
            <param name="wy" type="float" desc="wy"/>
            <param name="wz" type="float" desc="wz"/>
        </input>
        <output>
            <param name="sx" type="float" desc="sx"/>
            <param name="sy" type="float" desc="sy"/>
            <param name="sz" type="float" desc="sz"/>
        </output>
    </function>
    <function name="projectToCamera" desc="Project world position to screen for specified camera" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
            <param name="aspectRatio" type="float" desc=""/>
            <param name="x" type="float" desc=""/>
            <param name="y" type="float" desc=""/>
            <param name="z" type="float" desc=""/>
        </input>
        <output>
            <param name="x" type="float" desc="screenspace x coordinate"/>
            <param name="y" type="float" desc="screenspace y coordinate"/>
            <param name="z" type="float" desc="depth"/>
        </output>
    </function>
    <function name="raycastAll" desc="Raycast rigid body objects synchronously&#xA;Callbacks will be performed before the function returns&#xA;If the callback function returns true any possible following callbacks will be omitted" category="Physics">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="nx" type="float" desc="nx"/>
            <param name="ny" type="float" desc="ny"/>
            <param name="nz" type="float" desc="nz"/>
            <param name="maxDistance" type="float" desc="maxDistance"/>
            <param name="callbackFunctionName" type="string" desc="raycastAllCallback(actorId, x, y, z, distance, nx, ny, nz, subShapeIndex, shapeId, isLast) -> boolean continueReporting"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional]"/>
        </input>
        <output>
            <param name="numShapes" type="integer" desc="number of hit shapes, equal to number of performed callbacks"/>
        </output>
    </function>
    <function name="raycastAllAsync" desc="Raycast rigid body objects asynchronously&#xA;If the callback function returns true any possible following callbacks will be omitted" category="Physics">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="nx" type="float" desc="nx"/>
            <param name="ny" type="float" desc="ny"/>
            <param name="nz" type="float" desc="nz"/>
            <param name="maxDistance" type="float" desc="maxDistance"/>
            <param name="callbackFunctionName" type="string" desc="raycastAllAsyncCallback (actorId, x, y, z, distance, nx, ny, nz, subShapeIndex, shapeId, isLast) -> boolean continueReporting"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional]"/>
        </input>
        <output/>
    </function>
    <function name="raycastClosest" desc="Raycast closest rigid body object synchronously/blocking&#xA;Callbacks will be performed before the function returns&#xA;If the callback function returns true any possible following callbacks will be omitted" category="Physics">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="nx" type="float" desc="nx"/>
            <param name="ny" type="float" desc="ny"/>
            <param name="nz" type="float" desc="nz"/>
            <param name="maxDistance" type="float" desc="maxDistance"/>
            <param name="callbackFunctionName" type="string" desc="raycastClosestCallback (nodeId, x,y,z, distance, nx,ny,nz, subShapeIndex, shapeId, isLast) -> boolean continueReporting "/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional, default=ALL_BITS]"/>
        </input>
        <output>
            <param name="numShapes" type="integer" desc="number of hit shapes, equal to number of performed callbacks"/>
        </output>
    </function>
    <function name="raycastClosestAsync" desc="Raycast closest rigid body object asynchronously&#xA;If the callback function returns true any possible following callbacks will be omitted" category="Physics">
        <input>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="nx" type="float" desc="nx"/>
            <param name="ny" type="float" desc="ny"/>
            <param name="nz" type="float" desc="nz"/>
            <param name="maxDistance" type="float" desc="maxDistance"/>
            <param name="callbackFunctionName" type="string" desc="raycastClosestAsync(actorId, x,y,z, distance, nx,ny,nz, subShapeIndex, shapeId, isLast) -> boolean continueReporting"/>
            <param name="callbackTargetObject" type="object?" desc="targetObject [optional]"/>
            <param name="collisionMask" type="integer?" desc="collisionMask [optional, default=ALL_BITS]"/>
        </input>
        <output/>
    </function>
    <function name="readFillPlaneFromStream" desc="Read fill plane surface information from stream" category="Fillplanes">
        <input>
            <param name="fillPlaneShapeId" type="entityId" desc="fillPlaneShapeId"/>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="totalVolume" type="float" desc="total volume of the fill plane"/>
        </input>
        <output>
            <param name="success" type="boolean" desc=""/>
        </output>
    </function>
    <function name="releaseSharedI3DFile" desc="Reduces the ref count of the given shared i3d. Must be called for every successful loadSharedI3DFile and streamSharedI3DFile call to avoid memory leaks." category="I3D">
        <input>
            <param name="requestId" type="integer" desc="stream I3D request ID"/>
            <param name="warnIfInvalid" type="boolean?" desc="[optional] print a warning if the request ID is invalid, defaults to false"/>
        </input>
        <output/>
    </function>
    <function name="removeAllDifferentials" desc="remove all differential" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output/>
    </function>
    <function name="removeAudioSourceSampleElement" desc="Remove a sample element from an AudioSource" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
            <param name="sampleElementIndex" type="integer" desc="sampleElementIndex"/>
        </input>
        <output/>
    </function>
    <function name="removeCCT" desc="Remove character controller" category="Physics">
        <input>
            <param name="characterIndex" type="integer" desc="characterIndex"/>
        </input>
        <output/>
    </function>
    <function name="removeFromPhysics" desc="Remove node and recursively all child nodes from physics&#xA;Not instant as physics run in a separate thread with an independent framerate.&#xA;Use getIsAddedToPhysics() to check a nodes current state." category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output/>
    </function>
    <function name="removeLightShadowIgnoreShapes" desc="(Recursively) removes given entity or its shape children from the ignore list for shadow rendering" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source node"/>
            <param name="nodeId" type="entityId" desc="id of shape or parent node of a set of shapes (such as a vehicle)."/>
        </input>
        <output/>
    </function>
    <function name="removeMergedShadowIgnoreShapes" desc="(Recursively) removes given entity or its shape children from the ignore list for merged shadow rendering" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source node"/>
            <param name="shapeId" type="entityId" desc="id of shape or parent node of a set of shapes (such as a vehicle)."/>
        </input>
        <output/>
    </function>
    <function name="removeSplineAttribute" desc="Remove spline attribute" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc=""/>
            <param name="attributeIndex" type="integer" desc="attribute index (0 based)"/>
        </input>
        <output/>
    </function>
    <function name="removeUserAttribute" desc="Remove user attribute by name" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="attributeName" type="string" desc="name of the attribute to remove"/>
        </input>
        <output/>
    </function>
    <function name="removeXMLProperty" desc="Remove XML property." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="xmlPath" type="string" desc="Path to element or attribute"/>
        </input>
        <output>
            <param name="success" type="boolean" desc="success"/>
        </output>
    </function>
    <function name="renderOverlay" desc="Render overlay&#xA;Only allowed to be called within &quot;draw&quot;" category="Overlays">
        <input>
            <param name="overlayId" type="entityId" desc="overlayId"/>
            <param name="x" type="float" desc="screenspace x [0 ..1]"/>
            <param name="y" type="float" desc="screenspace y [0 ..1]"/>
            <param name="width" type="float" desc="normalized width, 1 = full screen width"/>
            <param name="height" type="float" desc="normalized height 1 = full screen height"/>
        </input>
        <output/>
    </function>
    <function name="renderText" desc="Render text to viewport&#xA;Screenspace coordinates origin is bottom left corner." category="Text Rendering">
        <input>
            <param name="x" type="float" desc="screenspace x [0..1]"/>
            <param name="y" type="float" desc="screenspace y [0..1]"/>
            <param name="fontSize" type="float" desc="fontSize"/>
            <param name="string" type="string" desc="string to render, can contain linebreaks"/>
        </input>
        <output/>
    </function>
    <function name="resetEmitStartTimer" desc="Resets the start timer of emitted particles.&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="time" type="float?" desc="scale time scale [optional]"/>
        </input>
        <output/>
    </function>
    <function name="resetEmitStopTimer" desc="Resets the stop timer of emitted particles.&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="time" type="float?" desc="scale time scale [optional]"/>
        </input>
        <output/>
    </function>
    <function name="resetNumOfEmittedParticles" desc="Resets the counter of emitted particles. This is used if the maxEmit attribute is set for the particle system.&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
        </input>
        <output/>
    </function>
    <function name="resumeStreamedSample" desc="Resume streamed sample" category="Sound">
        <input>
            <param name="streamedSampleId" type="entityId" desc="streamedSampleId"/>
        </input>
        <output/>
    </function>
    <function name="rotateAboutLocalAxis" desc="Rotate transform about given local axis" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="rotation" type="float" desc="rotation in radians"/>
            <param name="dx" type="float" desc="axis x direction"/>
            <param name="dy" type="float" desc="axis y direction"/>
            <param name="dz" type="float" desc="axis z direction"/>
        </input>
        <output/>
    </function>
    <function name="saveXMLFile" desc="Save XML file to preset path" category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
        </input>
        <output>
            <param name="success" type="boolean" desc="success"/>
        </output>
    </function>
    <function name="saveXMLFileToMemory" desc="Get XML as xml string" category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
        </input>
        <output>
            <param name="xmlString" type="string" desc=""/>
        </output>
    </function>
    <function name="set2DMaskFromOverlay" desc="Set mask for 2d rendering (font and overlays)" category="Overlays">
        <input>
            <param name="textureId" type="entityId" desc=""/>
            <param name="maskAlphaOnly" type="boolean" desc="if true, applies the mask to the alpha channel only, otherwise to all 4 channels"/>
            <param name="x" type="float" desc="x position"/>
            <param name="y" type="float" desc="y position"/>
            <param name="width" type="float" desc=""/>
            <param name="height" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="set2DMaskFromTexture" desc="Set mask for 2d rendering (font and overlays)" category="Overlays">
        <input>
            <param name="textureId" type="entityId" desc=""/>
            <param name="maskAlphaOnly" type="boolean" desc="if true, applies the mask to the alpha channel only, otherwise to all 4 channels"/>
            <param name="x" type="float" desc="x position"/>
            <param name="y" type="float" desc="y position"/>
            <param name="width" type="float" desc=""/>
            <param name="height" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setAngularDamping" desc="Set angular damping" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="angularDamping" type="float" desc="angularDamping"/>
        </input>
        <output/>
    </function>
    <function name="setAngularVelocity" desc="Set angular velocity of transform object" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="velocityX" type="float" desc="velocityX"/>
            <param name="velocityY" type="float" desc="velocityY"/>
            <param name="velocityZ" type="float" desc="velocityZ"/>
        </input>
        <output/>
    </function>
    <function name="setAnimTrackBlendWeight" desc="Set animation track blend weight" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
            <param name="weight" type="float" desc="weight"/>
        </input>
        <output/>
    </function>
    <function name="setAnimTrackLoopState" desc="Set animation track loop state" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
            <param name="loopState" type="boolean" desc="loopState"/>
        </input>
        <output/>
    </function>
    <function name="setAnimTrackSpeedScale" desc="Set animation track speed scale" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
            <param name="speedScale" type="float" desc="speedScale"/>
        </input>
        <output/>
    </function>
    <function name="setAnimTrackTime" desc="Set animation track time" category="Animation">
        <input>
            <param name="characterSetId" type="entityId" desc="characterSetId"/>
            <param name="trackId" type="integer" desc="trackId"/>
            <param name="time" type="float" desc="time"/>
            <param name="immediateUpdate" type="boolean?" desc="immediateUpdate [optional]"/>
        </input>
        <output/>
    </function>
    <function name="setAudioCullingWorldProperties" desc="Set audio culling world properties" category="Sound">
        <input>
            <param name="gridMinX" type="float" desc="gridMinX"/>
            <param name="gridMinY" type="float" desc="gridMinY"/>
            <param name="gridMinZ" type="float" desc="gridMinZ"/>
            <param name="gridMaxX" type="float" desc="gridMaxX"/>
            <param name="gridMaxY" type="float" desc="gridMaxY"/>
            <param name="gridMaxZ" type="float" desc="gridMaxZ"/>
            <param name="gridSize" type="integer" desc="gridSize"/>
            <param name="clipDistanceThreshold1" type="float" desc="clipDistanceThreshold1"/>
            <param name="clipDistanceThreshold2" type="float" desc="clipDistanceThreshold2"/>
        </input>
        <output/>
    </function>
    <function name="setAudioSourceAutoPlay" desc="Set audio source auto play enabled" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
            <param name="autoPlayEnabled" type="boolean" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setAudioSourceInnerRange" desc="Sets inner range of audio source. If the camera is further than this distance volume will start to decrease" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
            <param name="range" type="float" desc="inner range (fade start)"/>
        </input>
        <output/>
    </function>
    <function name="setAudioSourceMaxRetriggerDelay" desc="Set the AudioSource&apos;s max retrigger delay" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
            <param name="maxRetriggerDelay" type="float" desc="maxRetriggerDelay"/>
        </input>
        <output/>
    </function>
    <function name="setAudioSourceMinRetriggerDelay" desc="Get the AudioSource&apos;s min retrigger delay" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
            <param name="minRetriggerDelay" type="float" desc="minRetriggerDelay"/>
        </input>
        <output/>
    </function>
    <function name="setAudioSourcePriority" desc="Set audio source priority." category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
            <param name="priority" type="integer" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setAudioSourceRandomPlayback" desc="Set the AudioSource&apos;s random playback state" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
            <param name="randomPlayback" type="boolean" desc="randomPlayback"/>
        </input>
        <output/>
    </function>
    <function name="setAudioSourceRange" desc="Sets (outer) range of audio source" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
            <param name="range" type="float" desc="outer range (fade end)"/>
        </input>
        <output/>
    </function>
    <function name="setAudioSourceSampleElementProbability" desc="Set the AudioSource&apos;s sample element&apos;s probability" category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
            <param name="index" type="integer" desc="index"/>
            <param name="probability" type="float" desc="probability"/>
        </input>
        <output/>
    </function>
    <function name="setAudioSourceTickInaudible" desc="Set the inaudible behavior of the sound. By default, if a sound is inaudible, it&apos;s paused, and will resume when it becomes audible again." category="Sound">
        <input>
            <param name="audioSource" type="entityId" desc="audioSource"/>
            <param name="tickIfInaudible" type="boolean" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setCamera" desc="Set active camera" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
        </input>
        <output/>
    </function>
    <function name="setCCTHeight" desc="Set character height in meters of the cylinder part of the character capsule. Height will be reverted if the resizing leads to a collision." category="Physics">
        <input>
            <param name="characterIndex" type="integer" desc="characterIndex"/>
            <param name="height" type="float" desc="height"/>
            <param name="collisionGroup" type="integer" desc="collisionGroup"/>
            <param name="collisionMask" type="integer" desc="collisionMask"/>
        </input>
        <output/>
    </function>
    <function name="setCenterOfMass" desc="Set center of mass (only for dynamic physics objects)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output/>
    </function>
    <function name="setClipDistance" desc="Set object clip distance" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="distance" type="float" desc="distance"/>
        </input>
        <output/>
    </function>
    <function name="setCollisionFilter" desc="Set collision filter" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="group" type="integer" desc="group"/>
            <param name="mask" type="integer" desc="mask"/>
        </input>
        <output/>
    </function>
    <function name="setCollisionFilterGroup" desc="Set collision filter group (mask remains the same)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="group" type="integer" desc="group"/>
        </input>
        <output/>
    </function>
    <function name="setCollisionFilterMask" desc="Set collision filter mask (group remains the same)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="mask" type="integer" desc="mask"/>
        </input>
        <output/>
    </function>
    <function name="setConditionalAnimationBoolValue" desc="Set boolean value" category="Animation">
        <input>
            <param name="conditionalAnimationEntityId" type="entityId" desc="conditionalAnimationEntityId"/>
            <param name="parameterId" type="integer" desc="parameterId"/>
            <param name="value" type="boolean" desc="value"/>
        </input>
        <output>
            <param name="success" type="boolean" desc="success"/>
        </output>
    </function>
    <function name="setConditionalAnimationFloatValue" desc="Set float value" category="Animation">
        <input>
            <param name="conditionalAnimationEntityId" type="entityId" desc="conditionalAnimationEntityId"/>
            <param name="parameterId" type="integer" desc="parameterId"/>
            <param name="value" type="float" desc="value"/>
        </input>
        <output>
            <param name="success" type="boolean" desc="success"/>
        </output>
    </function>
    <function name="setConditionalAnimationSpecificParameterIds" desc="Set specific parameter ids" category="Animation">
        <input>
            <param name="conditionalAnimationEntityId" type="entityId" desc="conditionalAnimationEntityId"/>
            <param name="velocityParmId" type="integer" desc="velocityParmId"/>
            <param name="angularVelocityParmId" type="integer" desc="angularVelocityParmId"/>
        </input>
        <output/>
    </function>
    <function name="setConditionalAnimationTime" desc="Set time" category="Animation">
        <input>
            <param name="conditionalAnimationEntityId" type="entityId" desc="conditionalAnimationEntityId"/>
            <param name="time" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setDensityMapSyncerCellChangedCallback" desc="" category="Terrain Detail">
        <input>
            <param name="densityMapSyncerId" type="entityId" desc=""/>
            <param name="densityMapId" type="entityId" desc=""/>
            <param name="callbackFunctionName" type="string" desc="callback function(densityMapId, cellX, cellZ)"/>
            <param name="target" type="object?" desc="target [optional]"/>
        </input>
        <output/>
    </function>
    <function name="setDirection" desc="Set the direction of an object, the positive z-axis points towards the given direction. The y-axis lies in the direction-up-plane." category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="upX" type="float" desc="upX"/>
            <param name="upY" type="float" desc="upY"/>
            <param name="upZ" type="float" desc="upZ"/>
        </input>
        <output/>
    </function>
    <function name="setEmitCountScale" desc="Set particle system count scale&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="countScale" type="float" desc="countScale"/>
        </input>
        <output/>
    </function>
    <function name="setEmitStartTime" desc="Set emitter starting time.&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="emitStartTime" type="float" desc="emitStartTime"/>
        </input>
        <output/>
    </function>
    <function name="setEmitStopTime" desc="Set emitter stop time.&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="emitStopTime" type="float" desc="emitStopTime"/>
        </input>
        <output/>
    </function>
    <function name="setEmitterShape" desc="Sets the emitter shape of the particle system&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="shapeId" type="entityId" desc="shapeId"/>
        </input>
        <output/>
    </function>
    <function name="setEmitterShapeVelocityScale" desc="Sets the emitter shape velocity scale of the particle system&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="shape" type="float" desc="velocity scale"/>
        </input>
        <output/>
    </function>
    <function name="setEmittingState" desc="Set whether the particle system should emit new particles&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="state" type="boolean" desc="state"/>
        </input>
        <output/>
    </function>
    <function name="setEnableDensityMapSyncerCellChangedCallback" desc="" category="Terrain Detail">
        <input>
            <param name="densityMapSyncer" type="entityId" desc=""/>
            <param name="densityMapId" type="entityId" desc=""/>
            <param name="cellX" type="integer" desc="cell index"/>
            <param name="cellZ" type="integer" desc="cell index"/>
            <param name="enable" type="boolean?" desc="enable flag (defaults to true) [optional]"/>
        </input>
        <output/>
    </function>
    <function name="setFarClip" desc="Set camera far clip distance" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
            <param name="farClip" type="float" desc="farClip"/>
        </input>
        <output/>
    </function>
    <function name="setFastShadowUpdate" desc="Set fast shadow update for camera" category="Rendering">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
            <param name="fastUpdate" type="boolean" desc="set true for fast shadow update or false for far shadows"/>
        </input>
        <output/>
    </function>
    <function name="setFillPlaneMaxPhysicalSurfaceAngle" desc="Set fill plane physical surface angle" category="Fillplanes">
        <input>
            <param name="fillPlaneShapeId" type="entityId" desc="fillPlaneShapeId"/>
            <param name="physicalSurfAngle" type="float" desc="physicalSurfAngle"/>
        </input>
        <output/>
    </function>
    <function name="setFoliageBendingRectangleAttributes" desc="" category="Foliage">
        <input>
            <param name="foliageBendingSystemId" type="entityId" desc=""/>
            <param name="rectangleId" type="integer" desc=""/>
            <param name="minX" type="float" desc=""/>
            <param name="maxX" type="float" desc=""/>
            <param name="minZ" type="float" desc=""/>
            <param name="maxZ" type="float" desc=""/>
            <param name="yOffset" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setFoliageBendingSystem" desc="" category="Foliage">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
            <param name="foliageBendingSystemId" type="entityId" desc="foliageBendingSystemId"/>
        </input>
        <output/>
    </function>
    <function name="setFovY" desc="Sets the vertical field of view angle" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="id of the camera"/>
            <param name="fovY" type="float" desc="field of view angle (radian)"/>
        </input>
        <output/>
    </function>
    <function name="setFrictionVelocity" desc="Sets friction velocity to collision" category="Physics">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="velocity" type="float" desc="velocity"/>
        </input>
        <output/>
    </function>
    <function name="setHasCollision" desc="Set if transform group has physics collision" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc=""/>
            <param name="hasCollision" type="boolean" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setInertiaScale" desc="Set center of mass (only for dynamic physics objects)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output/>
    </function>
    <function name="setIsCompound" desc="Set rigid body transform as compound. Required to not be in physics simulation when called" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="isCompound" type="boolean" desc="isCompound"/>
        </input>
        <output/>
    </function>
    <function name="setIsCompoundChild" desc="Set rigid body transform as compound child. Required to not be in physics simulation when called" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="isCompoundChild" type="boolean" desc="isCompoundChild"/>
        </input>
        <output/>
    </function>
    <function name="setIsNonRenderable" desc="Set if shape is non-renderable" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="isNonRenderable" type="boolean" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setIsOrthographic" desc="Set camera orthographic mode" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
            <param name="isOrthographic" type="boolean" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setJointAngularDrive" desc="Set joint angular drive" category="Physics">
        <input>
            <param name="jointIndex" type="integer" desc=""/>
            <param name="axis" type="integer" desc=""/>
            <param name="usePosition" type="boolean" desc=""/>
            <param name="useVelocity" type="boolean" desc=""/>
            <param name="spring" type="float" desc=""/>
            <param name="damping" type="float" desc=""/>
            <param name="forceLimit" type="float" desc=""/>
            <param name="targetRotation" type="float" desc=""/>
            <param name="targetAngularVelocity" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setJointDrive" desc="Set joint drive. Drives orientation if position drive or angular velocity if velocity drive." category="Physics">
        <input>
            <param name="jointIndex" type="integer" desc=""/>
            <param name="isLinear" type="boolean" desc=""/>
            <param name="isPosition" type="boolean" desc=""/>
            <param name="valueX" type="float" desc=""/>
            <param name="valueY" type="float" desc=""/>
            <param name="valueZ" type="float" desc=""/>
            <param name="angle" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setJointLinearDrive" desc="Set joint linear drive" category="Physics">
        <input>
            <param name="jointIndex" type="integer" desc=""/>
            <param name="axis" type="integer" desc="[0-2]"/>
            <param name="usePosition" type="boolean" desc=""/>
            <param name="useVelocity" type="boolean" desc=""/>
            <param name="spring" type="float" desc=""/>
            <param name="damping" type="float" desc=""/>
            <param name="forceLimit" type="float" desc=""/>
            <param name="targetPosition" type="float" desc=""/>
            <param name="targetVelocity" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setLightConeAngle" desc="Set light cone angle in radian" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
            <param name="cone" type="float" desc="angle"/>
        </input>
        <output/>
    </function>
    <function name="setLightDropOff" desc="Set light dropoff" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
            <param name="dropoff" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setLightIESProfile" desc="Set IES Light profile as a path to a *.ies file." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
            <param name="&apos;*.ies&apos;" type="string" desc="filepath "/>
        </input>
        <output/>
    </function>
    <function name="setLightRange" desc="Set range of a light" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="lightId"/>
            <param name="range" type="float" desc="range"/>
        </input>
        <output/>
    </function>
    <function name="setLightScatteringColor" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
            <param name="dirX" type="float" desc=""/>
            <param name="dirY" type="float" desc=""/>
            <param name="dirZ" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setLightScatteringConeAngle" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
            <param name="scattering" type="float" desc="cone angle"/>
        </input>
        <output/>
    </function>
    <function name="setLightScatteringDirection" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
            <param name="dirX" type="float" desc=""/>
            <param name="dirY" type="float" desc=""/>
            <param name="dirZ" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setLightScatteringIntensity" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
            <param name="scattering" type="float" desc="intensity"/>
        </input>
        <output/>
    </function>
    <function name="setLightShadowMap" desc="Set light shadow map" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="lightId"/>
            <param name="castShowMap" type="boolean" desc=""/>
            <param name="depthMapResolution" type="integer" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setLightShadowPriority" desc="Sets shadow priority (float value) for the given shadow light. Higher value means higher priority (will be picked before lower priority lights when too many shadows are on the screen)." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source"/>
            <param name="shadowPriority" type="float" desc="shadow priority value of the light source"/>
        </input>
        <output/>
    </function>
    <function name="setLightSoftShadowDepthBiasFactor" desc="Sets soft shadow depth bias factor of light source. The bias factor is multiplied with the depth bias of the light source (e.g. depth bias = 0.0001f, bias factor = 2.0f -> depth bias is 0.0002f). They are separated so you can still have the normal bias for PCF shadows (when soft shadows are disabled), which generally&#xA;need a smaller bias." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source"/>
            <param name="softShadowDistance" type="float" desc="depth bias factor for soft shadows used by the light source"/>
        </input>
        <output/>
    </function>
    <function name="setLightSoftShadowDistance" desc="Sets soft shadow light distance for directional lights (it&apos;s fake, fixed distance from each pixel). Ignored by spot lights." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source"/>
            <param name="softShadowDistance" type="float" desc="Distance (in meters) of the fake area light source to the ground"/>
        </input>
        <output/>
    </function>
    <function name="setLightSoftShadowSize" desc="Sets soft shadow size. This is essentially the size of the virtual/imagined light source that is casting the soft shadow (for directional lights, instead of an infinitely far away sun, it&apos;s a fake square light source). The size of the shadow on the floor is then a function of this size, the light source distance from the ground,&#xA;and the distance of shadow blocker to the ground." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source"/>
            <param name="softShadowSize" type="float" desc="soft shadow light size"/>
        </input>
        <output/>
    </function>
    <function name="setLightUseLightScattering" desc="" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
            <param name="useLightScattering" type="boolean" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setLinearDamping" desc="Set linear damping" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="linearDamping" type="float" desc="linearDamping"/>
        </input>
        <output/>
    </function>
    <function name="setLinearVelocity" desc="Set linear velocity of transform object" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="velocityX" type="float" desc="velocityX"/>
            <param name="velocityY" type="float" desc="velocityY"/>
            <param name="velocityZ" type="float" desc="velocityZ"/>
        </input>
        <output/>
    </function>
    <function name="setLockedGroup" desc="Set transform object locked group flag" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="locked" type="boolean" desc="group locked group"/>
        </input>
        <output/>
    </function>
    <function name="setMass" desc="Set mass" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="mass" type="float" desc="mass in tons"/>
        </input>
        <output/>
    </function>
    <function name="setMaterial" desc="Set shape material at index" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="material" type="entityId" desc="materialId of the material entity"/>
            <param name="materialIndex" type="integer" desc="material index of shape to set, starting at 0"/>
        </input>
        <output/>
    </function>
    <function name="setMaterialCustomMapFromFile" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
            <param name="name" type="string" desc=""/>
            <param name="filename" type="string" desc=""/>
            <param name="textueWrap" type="boolean?" desc="[optional, default defined by custom shader; ignored anyway]"/>
            <param name="isSRGB" type="boolean?" desc="[optional, default defined by custom shader]"/>
            <param name="sharedEdit" type="boolean?" desc="[optional, default=true]"/>
        </input>
        <output>
            <param name="newMaterialId" type="entityId" desc="material id of new material (same as materialId with shared edit mode)"/>
        </output>
    </function>
    <function name="setMaterialCustomParameter" desc="Set the custom parameter values of a material" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
            <param name="name" type="string" desc=""/>
            <param name="x" type="float" desc=""/>
            <param name="y" type="float" desc=""/>
            <param name="z" type="float" desc=""/>
            <param name="w" type="float" desc=""/>
            <param name="sharedEdit" type="boolean?" desc="[optional, default=true]"/>
        </input>
        <output>
            <param name="newMaterialId" type="entityId" desc="material id of new material (same as materialId with shared edit mode)"/>
        </output>
    </function>
    <function name="setMaterialCustomShaderVariation" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
            <param name="shaderVariationName" type="string" desc=""/>
            <param name="sharedEdit" type="boolean" desc=""/>
        </input>
        <output>
            <param name="newMaterialId" type="entityId" desc="material id of new material (same as materialId with shared edit mode)"/>
        </output>
    </function>
    <function name="setMaterialDiffuseMapFromFile" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
            <param name="filename" type="string" desc=""/>
            <param name="textueWrap" type="boolean" desc="(ignored)"/>
            <param name="isSRGB" type="boolean" desc=""/>
            <param name="sharedEdit" type="boolean" desc=""/>
        </input>
        <output>
            <param name="newMaterialId" type="entityId" desc="material id of new material (same as materialId with shared edit mode)"/>
        </output>
    </function>
    <function name="setMaterialDynamicArrayOfTextureSize" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
            <param name="name" type="string" desc=""/>
            <param name="size" type="integer" desc="size"/>
            <param name="sharedEdit" type="boolean?" desc="[optional, default=true]"/>
        </input>
        <output>
            <param name="newMaterialId" type="entityId" desc="material id of new material (same as materialId with shared edit mode)"/>
        </output>
    </function>
    <function name="setMaterialGlossMapFromFile" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
            <param name="filename" type="string" desc=""/>
            <param name="textueWrap" type="boolean" desc="(ignored)"/>
            <param name="isSRGB" type="boolean" desc=""/>
            <param name="sharedEdit" type="boolean" desc=""/>
        </input>
        <output>
            <param name="newMaterialId" type="entityId" desc="material id of new material (same as materialId with shared edit mode)"/>
        </output>
    </function>
    <function name="setMaterialNormalMapFromFile" desc="" category="Rendering">
        <input>
            <param name="materialId" type="entityId" desc=""/>
            <param name="filename" type="string" desc=""/>
            <param name="textueWrap" type="boolean" desc="(ignored)"/>
            <param name="isSRGB" type="boolean" desc=""/>
            <param name="sharedEdit" type="boolean" desc=""/>
        </input>
        <output>
            <param name="newMaterialId" type="entityId" desc="material id of new material (same as materialId with shared edit mode)"/>
        </output>
    </function>
    <function name="setMaterialSlotName" desc="Sets the shapes slot name for the material at the given index." category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="materialIndex" type="integer" desc="material index of shape, starting at 0"/>
            <param name="slotName" type="string" desc="slotName for the material at the given index or an empty string to remove the slot name"/>
        </input>
        <output/>
    </function>
    <function name="setMaxNumOfParticles" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="maxNumParticles" type="integer" desc="maximum number of active particles"/>
        </input>
        <output/>
    </function>
    <function name="setMergedShadowActive" desc="For the given light source, enables or disables the entire merged shadow (i.e. for all lights in the group). Can be used to toggle shadows e.g. for comparison purposes." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source node"/>
            <param name="shouldEnable" type="boolean" desc="enables (true) or disables (false) the merged shadow group"/>
        </input>
        <output/>
    </function>
    <function name="setMergedShadowLightSize" desc="Sets the soft shadow light size for the merged shadow of the given light source (if it belongs to any merged shadow)." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source node"/>
            <param name="lightSize" type="float" desc="soft shadow light size of the merged shadow"/>
        </input>
        <output/>
    </function>
    <function name="setMergedShadowNearPlaneOffset" desc="Sets the near plane for culling and rendering of the given merged shadow. Useful if the center of the merged shadow ends up inside objects and you want it to only start rendering at some distance from the center." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source node"/>
            <param name="nearPlane" type="float" desc="near plane of the merged shadow"/>
        </input>
        <output/>
    </function>
    <function name="setMergedShadowSettings" desc="Sets various shadow settings of the merged shadow that this light belongs to (sets it for all lights in the group). Arguments can be nil if you&apos;d like one of them to remain unchanged.&#xA;By default, these are simply set to the equivalent settings of the very first light that was added to the merged shadow group.&#xA;If you are unsure about the exact values of some settings, you can hand in the equivalent setting of one of the lights in the group (e.g. depth bias, shadow map resolution, etc.)." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of the light source node"/>
            <param name="depthBias" type="float?" desc="shadow map depth bias for the merged shadow [optional, default=currentValue]"/>
            <param name="slopeScaleDepthBias" type="float?" desc="slope-scaled shadow map depth bias for the merged shadow [optional, default=currentValue]"/>
            <param name="slopeScaleDepthClamp" type="float?" desc="clamp for the slope-scaled shadow map depth bias for the merged shadow [optional, default=currentValue]"/>
            <param name="shadowMapResolution" type="integer?" desc="resolution of the merged shadow&apos;s shadow/depth map, will be used for both width and height [optional, default=currentValue]"/>
        </input>
        <output/>
    </function>
    <function name="setMergedShadowSettingsLight" desc="Sets the shadow settings light for a group of light sources with merged shadows. This will replace the automatic computation and explicitly use all the shadow settings from the given shadow settings light when rendering the merged shadow." category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc="id of one of the light sources in a given merged shadow group"/>
            <param name="shadowSettingsLightId" type="entityId" desc="id the light source that should be used as a source of settings"/>
        </input>
        <output/>
    </function>
    <function name="setMinClipDistance" desc="Set minimum clip distance" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="minDist" type="float" desc="minDist"/>
        </input>
        <output/>
    </function>
    <function name="setName" desc="Set entity name" category="Entity">
        <input>
            <param name="entityId" type="entityId" desc="entityId"/>
            <param name="entityName" type="string" desc="entityName"/>
        </input>
        <output/>
    </function>
    <function name="setNearClip" desc="Set camera near clip distance" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
            <param name="nearClip" type="float" desc="nearClip"/>
        </input>
        <output/>
    </function>
    <function name="setNoteNodeColor" desc="Set note node color" category="NoteNode">
        <input>
            <param name="noteId" type="entityId" desc="Id of the note node"/>
            <param name="colorR" type="float" desc="R component of note color [0-1]"/>
            <param name="colorG" type="float" desc="G component of note color [0-1]"/>
            <param name="colorB" type="float" desc="B component of note color [0-1]"/>
        </input>
        <output/>
    </function>
    <function name="setNoteNodeFixedSize" desc="Set note node fixed size" category="NoteNode">
        <input>
            <param name="noteId" type="entityId" desc="Id of the note node"/>
            <param name="fixedSize" type="boolean" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setNoteNodeText" desc="Set note node text" category="NoteNode">
        <input>
            <param name="noteId" type="entityId" desc="Id of the note node"/>
            <param name="text" type="string" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setNumOfParticlesToEmitPerMs" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="emittedParticlesPerMs" type="float" desc="emittedParticlesPerMs"/>
        </input>
        <output/>
    </function>
    <function name="setObjectMask" desc="Set object mask" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="mask" type="integer" desc="mask"/>
        </input>
        <output/>
    </function>
    <function name="setOrthographicHeight" desc="Set camera orthographic height" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
            <param name="orthographicHeight" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setOverlayColor" desc="Set overlay color and alpha for whole overlay" category="Overlays">
        <input>
            <param name="overlayId" type="entityId" desc="overlayId"/>
            <param name="red" type="float" desc="red"/>
            <param name="green" type="float" desc="green"/>
            <param name="blue" type="float" desc="blue"/>
            <param name="alpha" type="float" desc="alpha"/>
        </input>
        <output/>
    </function>
    <function name="setOverlayCornerColor" desc="Set overlay color and alpha for specified corner&#xA;Values are linearly interpolated between the corners allowing for gradients" category="Overlays">
        <input>
            <param name="overlayId" type="entityId" desc="overlayId"/>
            <param name="cornerIndex" type="integer" desc="corner index (same order as uvs: 0 = bottom left, 1 = top left, 2 = bottom right, 3 = top right) "/>
            <param name="red" type="float" desc="red"/>
            <param name="green" type="float" desc="green"/>
            <param name="blue" type="float" desc="blue"/>
            <param name="alpha" type="float" desc="alpha"/>
        </input>
        <output/>
    </function>
    <function name="setOverlayLayer" desc="Set layer for texture array overlays" category="Overlays">
        <input>
            <param name="overlayId" type="entityId" desc="overlayId"/>
            <param name="layer" type="integer" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setOverlayRotation" desc="Set overlay rotation" category="Overlays">
        <input>
            <param name="overlayId" type="entityId" desc="overlayId"/>
            <param name="rotation" type="float" desc="rotation"/>
            <param name="pivotX" type="float" desc="x position of pivot of rotation (relative to position of overlay)"/>
            <param name="pivotY" type="float" desc="y position of pivot of rotation (relative to position of overlay)"/>
        </input>
        <output/>
    </function>
    <function name="setOverlaySignedDistanceFieldWidth" desc="Set overlay signed distance field width" category="Overlays">
        <input>
            <param name="overlayId" type="entityId" desc="overlayId"/>
            <param name="sdfWidth" type="float" desc="range of the sdf in normalized color (0.5 full range, 0 disabled)"/>
        </input>
        <output/>
    </function>
    <function name="setOverlayUVs" desc="Set overlay uv coordinates" category="Overlays">
        <input>
            <param name="overlayId" type="entityId" desc="overlayId"/>
            <param name="u0" type="float" desc="bottom left u tex coord (original = 0)"/>
            <param name="v0" type="float" desc="bottom left v tex coord (original = 0)"/>
            <param name="u1" type="float" desc="top left u tex coord (original = 0)"/>
            <param name="v1" type="float" desc="top left v tex coord (original = 1)"/>
            <param name="u2" type="float" desc="bottom right u tex coord (original = 1)"/>
            <param name="v2" type="float" desc="bottom right v tex coord (original = 0)"/>
            <param name="u3" type="float" desc="top right u tex coord (original = 1)"/>
            <param name="v3" type="float" desc="top right v tex coord (original = 1)"/>
        </input>
        <output/>
    </function>
    <function name="setParticleShape" desc="Sets the particle shape of the particle system&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="nodeId" type="entityId" desc="nodeId"/>
        </input>
        <output/>
    </function>
    <function name="setParticleSystemLifespan" desc="Set particle system life span.&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="lifeSpan" type="float" desc="lifeSpan"/>
            <param name="keepBlendTimes" type="boolean" desc="keepBlendTimes"/>
        </input>
        <output/>
    </function>
    <function name="setParticleSystemNormalSpeed" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
            <param name="normalSpeed" type="float" desc="normalSpeed"/>
        </input>
        <output/>
    </function>
    <function name="setParticleSystemSpeed" desc="Set particle system speed&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="speed" type="float" desc="speed"/>
        </input>
        <output/>
    </function>
    <function name="setParticleSystemSpeedRandom" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
            <param name="speedRandom" type="float" desc="speedRandom"/>
        </input>
        <output/>
    </function>
    <function name="setParticleSystemSpriteScaleX" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
            <param name="spriteScaleX" type="float" desc="spriteScaleX"/>
        </input>
        <output/>
    </function>
    <function name="setParticleSystemSpriteScaleXGain" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
            <param name="spriteScaleXGain" type="float" desc="spriteScaleXGain"/>
        </input>
        <output/>
    </function>
    <function name="setParticleSystemSpriteScaleY" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
            <param name="spriteScaleY" type="float" desc="spriteScaleY"/>
        </input>
        <output/>
    </function>
    <function name="setParticleSystemSpriteScaleYGain" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
            <param name="spriteScaleYGain" type="float" desc="spriteScaleYGain"/>
        </input>
        <output/>
    </function>
    <function name="setParticleSystemTangentSpeed" desc="The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemEntityId" type="entityId" desc="particleSystemEntityId"/>
            <param name="tangentSpeed" type="float" desc="tangentSpeed"/>
        </input>
        <output/>
    </function>
    <function name="setParticleSystemTimeScale" desc="Sets the time scale for the particle simulation.&#xA;The particleSystemId can be retrieved by using getGeometry() on the shape/node" category="Particle System">
        <input>
            <param name="particleSystemId" type="entityId" desc="particleSystemId"/>
            <param name="timeScale" type="float" desc="timeScale"/>
        </input>
        <output/>
    </function>
    <function name="setPolylineTranslation" desc="Translate polyline" category="Fillplanes">
        <input>
            <param name="fillPlaneShapeId" type="entityId" desc="fillPlaneShapeId"/>
            <param name="polyLineIdx" type="integer" desc="polyLineIdx"/>
            <param name="dx" type="float" desc="dx"/>
            <param name="dz" type="float" desc="dz"/>
        </input>
        <output/>
    </function>
    <function name="setProjectionOffset" desc="Set camera projection offset" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
        </input>
        <output/>
    </function>
    <function name="setQuaternion" desc="Set quaternion in local space" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="w" type="float" desc="w"/>
        </input>
        <output/>
    </function>
    <function name="setRainActiveDropsMultiplier" desc="Sets multiplier from 0.0 to 1.0 based on the maximum drops (setMaxRainDropsMultiplier) for the current number of simulated rain drops (and splashes).&#xA;The actual amount of rain drops fall are then this multiplier times max rain drops multiplier times the default engine amount of maximum rain drops (16384 drops)." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="rain" type="float" desc="drop multiplier"/>
        </input>
        <output/>
    </function>
    <function name="setRainAmountMultiplier" desc="Sets multiplier for number of supported rain drops (for hardware settings purposes)." category="Precipitation">
        <input>
            <param name="multiplier" type="float" desc="multiplier"/>
        </input>
        <output/>
    </function>
    <function name="setRainBehindCameraBufferForMirrors" desc="Rain drops spawn a certain distance behind the camera as well in order to show up in mirrors, etc.&#xA;This float value gives a percentage of the overall depth of the spawn box by which the spawn box is essentially shifted backwards." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="buffer" type="float" desc="Percentage value by which the spawn box is shifted back to spawn rain behind the camera as well"/>
        </input>
        <output/>
    </function>
    <function name="setRainBounceRandomFactor" desc="When precipitation particles bounce, they reflect from the surface normal. But the direction of the normal is rotated randomly a little bit to give variation. The random factor here determines how random this can be. At 0.0f the reflection vector will always be exactly the normal. At a very high value,&#xA;(like 10000) the vector can become almost parallel to the ground. Default value is 1.0 (makes it so it can rotate to around 45 degrees to the side)." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="randomfactor" type="float" desc="random factor for bounce randomization"/>
        </input>
        <output/>
    </function>
    <function name="setRainBounceRestitution" desc="Sets the coefficient of restitution for the bounces (essentially, how much a particle slows down upon bouncing). Defaultvalue 0.25 (75% slowdown per bounce)." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="restitution" type="float" desc="coefficient of restitution"/>
        </input>
        <output/>
    </function>
    <function name="setRainCameraVelocityMultiplier" desc="Set camera velocity multiplier. default 1.0. 0.0 would mean camera velocity is not included in the orientation of rain streaks." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="multiplier" type="float" desc="camera velocity multiplier"/>
        </input>
        <output/>
    </function>
    <function name="setRainDistributionPower" desc="If rainDistributionPower is not 1.0, then rain is not evenly distributed throughout the world but instead&#xA;some more rain drops spawn closer to the camera and then decrease in number as you get further from the camera. Essentially makes it so the rain looks more&#xA;dense than it really is while rendering and simulating a reduced amount of rain drops.&#xA;Values larger than 1.0 will progressively shift more rain drops spawns closer to the mostConcentratedRainDistance (see setMostConcentratedRainDistance). Values smaller than 1.0&#xA;have the opposite effect and are not intended to be used." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="mostConcentratedRainDistance" type="float" desc="Distance from the camera where the distribution is most concentrated"/>
        </input>
        <output/>
    </function>
    <function name="setRainForwardDirection" desc="Sets the forward direction used for the spawn box orientation (&apos;up&apos; and &apos;right&apos; are determined by the algorithm)" category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="forwardX" type="float" desc="x component of forward vector"/>
            <param name="forwardY" type="float" desc="y component of forward vector"/>
            <param name="forwardZ" type="float" desc="z component of forward vector"/>
        </input>
        <output/>
    </function>
    <function name="setRainHeightmapCollisionThreshold" desc="Sets a bit of extra height below the actual raycasted rain occlusion that is accepted as an area where rain drops are not culled." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="tolerance" type="float" desc="tolerance"/>
        </input>
        <output/>
    </function>
    <function name="setRainMaxBounces" desc="Sets max bounces of a particle before a splash spawns (intended for hail, etc., but in principle you can use this for rain and such as well)." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="bounces" type="integer" desc="max number of bounces (default 0)"/>
        </input>
        <output/>
    </function>
    <function name="setRainMaxDropsMultiplier" desc="Sets multiplier (can be larger than 1.0) for the maximum number of supported rain drops, based on the default engine limit (16384 drops). This is an upper limit and sets up GPU buffers (etc.) to fit the corresponding amount of rain drops&#xA;and as such should only be used to set up the max rain drop count at the start of the application or when settings change." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="max" type="float" desc="rain drops multiplier"/>
        </input>
        <output/>
    </function>
    <function name="setRainMostConcentratedDistance" desc="(Also see setRainDistributionPower). Rain is most densely concentrated at this distance from the camera (in meters)." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="mostConcentratedRainDistance" type="float" desc="Distance from the camera where the distribution is most concentrated"/>
        </input>
        <output/>
    </function>
    <function name="setRainRandomOffset" desc="The rain simulation draws random numbers between 0 and 1 for various purposes (such as determining rain drop position when it spawns, etc.).&#xA;Since the simulation is deterministic, usually two rain systems spawned at the same time will give particles exactly in the same locations, which can&#xA;be undesirable when e.g. blending between two rain system states. This function allows to set a random offset (between 0 and 1) that is added whenever&#xA;a random number is rolled, resulting in the same drops in two different rain systems to have different positions, velocities and such.&#xA;By default each loaded rain system will already have a randomly generated random offset. But you can set it explicitly here." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="randomOffset" type="float" desc="random offset"/>
        </input>
        <output/>
    </function>
    <function name="setRainSpawnBoxParameters" desc="Rain drops only spawn in a limited area around the camera. This sets parameters for the box that the rain spawns in." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="spawnHeight" type="float" desc="Height that rain drops spawn at."/>
            <param name="boxWidth" type="float" desc="Width of the spawn box."/>
            <param name="boxHeight" type="float" desc="Height of the spawn box."/>
        </input>
        <output/>
    </function>
    <function name="setRainSpawnVelocity" desc="Set spawn velocity of rain drops. The horizontal (x and z) components can be further modified during simulation by the wind force and turbulence." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="velocityX" type="float" desc="x (&apos;right&apos;) component of spawn velocity of rain drops"/>
            <param name="velocityY" type="float" desc="y (&apos;up&apos;) component of spawn velocity of rain drops"/>
            <param name="velocityZ" type="float" desc="z (&apos;forward&apos;) component of spawn velocity of rain drops"/>
        </input>
        <output/>
    </function>
    <function name="setRainTurbulenceParameters" desc="Set parameters for rain turbulence. Rain turbulence randomly accelerates rain drops according to some noise that varies over time." category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="turbulence" type="float" desc="Determines how strong the turbulence is. Default 10.0"/>
            <param name="timeScale" type="float" desc="Turbulence varies over time. This speeds up or slows down that process."/>
            <param name="pulsePeriod" type="float" desc="Turbulence ebbs and flows in terms of its strength. This is the duration / period of that pulsing."/>
            <param name="frequency" type="float" desc="Spatial frequency of the turbulence (how fast the turbulence changes in space. Lower it to have a larger space affected by the same kind of turbulence)."/>
        </input>
        <output/>
    </function>
    <function name="setRainWindForce" desc="Sets a force (in x and z directions in world space) that accelerates rain drops by a constant amount every frame" category="Precipitation">
        <input>
            <param name="precipitationEntity" type="entityId" desc="precipitationEntity"/>
            <param name="forceX" type="float" desc="x direction of wind force"/>
            <param name="forceZ" type="float" desc="z direction of wind force"/>
        </input>
        <output/>
    </function>
    <function name="setReflectionMapScaling" desc="Set shape reflection map scaling" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="scale" type="float" desc="scale"/>
            <param name="shared" type="boolean" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setRigidBodyType" desc="Set rigid body type. If shape does not have CPU-Mesh flag set, setting the type to NONE will clear the baked physics data.&#xA;To temporarily disable physics for a node use removeFromPhysics() and addToPhysics() functions instead." category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="type" type="integer" desc="one of enum RIGID_BODY_TYPE"/>
        </input>
        <output/>
    </function>
    <function name="setRootNode" desc="Set rootnode" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
        </input>
        <output/>
    </function>
    <function name="setRotation" desc="Set local space rotation of a transform (relative to its parent)" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="x" type="float" desc="x rotation in radians"/>
            <param name="y" type="float" desc="y rotation in radians"/>
            <param name="z" type="float" desc="z rotation in radians"/>
        </input>
        <output/>
    </function>
    <function name="setSamplePitch" desc="Set sample pitch" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
            <param name="pitch" type="float" desc="pitch"/>
        </input>
        <output/>
    </function>
    <function name="setSampleVelocity" desc="Set velocity of a sample object" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output/>
    </function>
    <function name="setSampleVolume" desc="Set sample volume" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
            <param name="volume" type="float" desc="volume"/>
        </input>
        <output/>
    </function>
    <function name="setScale" desc="Set scale of a transform object" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
        </input>
        <output/>
    </function>
    <function name="setShaderParameter" desc="Set shader parameter" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="parameterName" type="string" desc="parameterName"/>
            <param name="x" type="float?" desc="[optional, default=currentValue]"/>
            <param name="y" type="float?" desc="[optional, default=currentValue]"/>
            <param name="z" type="float?" desc="[optional, default=currentValue]"/>
            <param name="w" type="float?" desc="[optional, default=currentValue]"/>
            <param name="shared" type="boolean?" desc="[optional, default=true]"/>
            <param name="materialIndex" type="integer?" desc="material index or a negative value to set to all materials [optional, default=-1]"/>
        </input>
        <output/>
    </function>
    <function name="setShaderParameterRecursive" desc="Set shader parameter recursively" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="parameterName" type="string" desc="parameterName"/>
            <param name="x" type="float?" desc="[optional, default=currentValue]"/>
            <param name="y" type="float?" desc="[optional, default=currentValue]"/>
            <param name="z" type="float?" desc="[optional, default=currentValue]"/>
            <param name="w" type="float?" desc="[optional, default=currentValue]"/>
            <param name="shared" type="boolean?" desc="[optional, default=true]"/>
            <param name="materialIndex" type="integer?" desc="material index or a negative value to set to all materials [optional, default=-1]"/>
        </input>
        <output/>
    </function>
    <function name="setShadowFocusBox" desc="Set active shadow focus box" category="Rendering">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId to use as shadowFocusBox or 0 to reset to none"/>
        </input>
        <output/>
    </function>
    <function name="setShallowWaterSimulationFakeExtraDepth" desc="Sets a fake height that is added to the terrain height below the water rest level. This makes the water deeper than it really is, which causes waves to move faster and be deeper. For visual tuning purposes." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="height" type="float" desc="fake height to add below the water rest level"/>
        </input>
        <output/>
    </function>
    <function name="setShallowWaterSimulationFoamAccumulationRate" desc="Sets foam accumulation rate (determines how much and how quickly foam spawns in turbulent waters)." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="foam" type="float" desc="accumulation rate"/>
        </input>
        <output/>
    </function>
    <function name="setShallowWaterSimulationFoamDecayRate" desc="Sets foam decay rate (how quickly foam decays after it has spawned)." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="foam" type="float" desc="decay rate"/>
        </input>
        <output/>
    </function>
    <function name="setShallowWaterSimulationGroundHeightTexture" desc="Manually sets ground height texture of the simulation. Only intended for debugging purposes." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="textureId" type="entityId" desc="texture/id to use as ground height. Has to be an UINT texture."/>
        </input>
        <output/>
    </function>
    <function name="setShallowWaterSimulationGroundHeightTextureFromTerrain" desc="Manually sets ground height texture from a terrain transform group. The terrain transform group has to remain alive for the time the Shallow Water Simulation is alive.&#xA;When the simulation has a terrain-based ground height texture, the simulation fetches the terrain height correctly based on the world position set from shallowWaterSimulationSetWorldPosition&#xA;as well as the physical grid size set when the simulation was created." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="terrainTransformGroup" type="integer" desc="transform group/id to get the height texture from"/>
        </input>
        <output/>
    </function>
    <function name="setShallowWaterSimulationParameters" desc="Sets various simulation parameters of the shallow water simulation" category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="deltaTime" type="float" desc="time step size for each iteration"/>
            <param name="externalAcceleration" type="float" desc="external downwards accelerations (mostly gravity)"/>
            <param name="velocityDampening" type="float" desc="artificial dampening factor between 0 and 1 (default: 1.0) that slows down velocities over time and causes the water to calm. even high values (e.g. 0.999) will significantly reduce how turbulent the water looks"/>
        </input>
        <output/>
    </function>
    <function name="setShallowWaterSimulationPerfectlyMatchedLayerParameters" desc="Sets various parameters used for the perfectly matched layers algorithm" category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="dampeningFactor" type="float" desc="controls how quickly and how strongly into the dampening region stuff is dampened."/>
            <param name="lambdaUpdateFactor" type="float" desc="controls how quickly the dampening field changes over time. smaller values make the simulation more stable but may cause the dampening effect to worsen"/>
            <param name="lambdaDecay" type="float" desc="controls how quickly the dampening field decays per simulation iteration (e.g. 0.9 -> dampening field strength reduce to 90% after one iteration)"/>
            <param name="borderSize" type="integer" desc="size of the dampening region in grid cells"/>
            <param name="isCubicScaling" type="boolean" desc="determines whether the dampening increases cubically from the start of the dampening border (false means it scales quadratically)."/>
            <param name="leftBorder" type="boolean" desc="sets whether PML boundary condition is active for the left border of the simulation"/>
            <param name="rightBorder" type="boolean" desc="sets whether PML boundary condition is active for the right border of the simulation"/>
            <param name="bottomBorder" type="boolean" desc="sets whether PML boundary condition is active for the bottom border of the simulation"/>
            <param name="topBorder" type="boolean" desc="sets whether PML boundary condition is active for the top border of the simulation"/>
        </input>
        <output/>
    </function>
    <function name="setShallowWaterSimulationPhysicalGridSize" desc="Sets (total) world space size of the simulation grid." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="width" type="float" desc="world space width of the simulation grid"/>
            <param name="height" type="float" desc="world space height of the simulation grid"/>
        </input>
        <output/>
    </function>
    <function name="setShallowWaterSimulationWorldPosition" desc="Sets (2D) world position of the simulation (x and z coordinates). If a height map from a terrain transform group was assigned to the simulation, changing the world position&#xA;also automatically updates the simulations positioning relative to the terrain height map and translates the simulation contents when the simulation moves.&#xA;This function automatically snaps the given position to multiples of the grids cell size, and returns the actual position used internally." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="x" type="float" desc="x world space coordinate of the simulation"/>
            <param name="z" type="float" desc="z world space coordinate of the simulation"/>
        </input>
        <output>
            <param name="ax" type="float" desc="actual internal position x"/>
            <param name="az" type="float" desc="actual internal position z"/>
        </output>
    </function>
    <function name="setShapeBones" desc="Set the bones of the shape given the new root node. The hierarchy of the new bones must be mostly the same as for the currently set bones. Additional children after the used bones are allowed. Bones are matched by node indices and not by name.&#xA;The new root newRootBoneId must match with oldRootBoneId or the currently assigned root (lowest common root node of all bones) if oldRootBoneId is 0." category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="newRootBoneId" type="entityId" desc="The roof the new skeleton"/>
            <param name="oldRootBoneId" type="entityId" desc="The root of the currently assigned skeleton. If 0, the lowest common root node of the currently assigned bones is used"/>
            <param name="keepBindPoses" type="boolean?" desc="If true, the bind poses of the current bones are kept, otherwise the new bones are assumed to be in the bind pose [optional]"/>
        </input>
        <output>
            <param name="success" type="boolean" desc=""/>
        </output>
    </function>
    <function name="setShapeBonesFromShape" desc="Set the same bones as the other shape uses. Both shapes must use exactly the same number of bones" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="sourceShapeId" type="entityId" desc="sourceShapeId"/>
        </input>
        <output>
            <param name="success" type="boolean" desc=""/>
        </output>
    </function>
    <function name="setShapeBoundingSphere" desc="Set the bounding sphere of this shape only" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc=""/>
            <param name="localPosX" type="float" desc=""/>
            <param name="localPosY" type="float" desc=""/>
            <param name="localPosZ" type="float" desc=""/>
            <param name="radius" type="float" desc="if &lt; 0, the bounding sphere of the geometry will be used"/>
        </input>
        <output/>
    </function>
    <function name="setShapeBuildNavMeshMask" desc="Set shape build nav mesh mask" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc=""/>
            <param name="mask" type="integer" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setShapeCastShadowmap" desc="Set shape cast shadow map " category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="castShadowmap" type="boolean" desc="castShadowmap"/>
        </input>
        <output/>
    </function>
    <function name="setShapeDecalLayer" desc="Set shape decal layer" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc=""/>
            <param name="decalLayer" type="integer" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setShapeGeometryBoundingSphere" desc="Set the bounding sphere of the shape&apos;s geometry.&#xA;Warning: This does not update the bounding volumes of other shapes using this geometry. Those are only updated if they are invalided, e.g. by moving the shape or calling invalidShapeBoundingVolume" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc=""/>
            <param name="localPosX" type="float" desc=""/>
            <param name="localPosY" type="float" desc=""/>
            <param name="localPosZ" type="float" desc=""/>
            <param name="radius" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setShapeReceiveShadowmap" desc="Set shape receive shadow map" category="Shape">
        <input>
            <param name="shapeId" type="entityId" desc="shapeId"/>
            <param name="receiveShadowmap" type="boolean" desc="receiveShadowmap"/>
        </input>
        <output/>
    </function>
    <function name="setSolverIterationCount" desc="Set solver iteration count (only for dynamic physics objects)" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="count" type="integer" desc="count"/>
        </input>
        <output/>
    </function>
    <function name="setSplineAttributeAtCV" desc="Set the spline attribute value at given CV" category="Spline">
        <input>
            <param name="shapeId" type="integer" desc=""/>
            <param name="attributeIndex" type="integer" desc="attribute index (0 based)"/>
            <param name="CVIndex" type="integer" desc=""/>
            <param name="value" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setSplineCV" desc="Set the position of a spline control point." category="Spline">
        <input>
            <param name="shapeId" type="integer" desc="Spline id"/>
            <param name="index" type="integer" desc="The index of the control point to be positioned, starting at 0"/>
            <param name="x" type="float" desc="New spline point position x in spline localspace"/>
            <param name="y" type="float" desc="New spline point position y in spline localspace"/>
            <param name="z" type="float" desc="New spline point position z in spline localspace"/>
        </input>
        <output/>
    </function>
    <function name="setSplineEP" desc="Set the position of a spline edit point." category="Spline">
        <input>
            <param name="shapeId" type="integer" desc="Spline id"/>
            <param name="index" type="integer" desc="The index of the edit point to be positioned, starting at 0"/>
            <param name="x" type="float" desc="New spline point position x in spline localspace"/>
            <param name="y" type="float" desc="New spline point position y in spline localspace"/>
            <param name="z" type="float" desc="New spline point position z in spline localspace"/>
        </input>
        <output/>
    </function>
    <function name="setStreamedSampleGroup" desc="Set streamed sample group" category="Sound">
        <input>
            <param name="streamedSampleId" type="entityId" desc="streamedSampleId"/>
            <param name="group" type="integer" desc="group"/>
        </input>
        <output/>
    </function>
    <function name="setStreamedSampleVolume" desc="Set streamed sample volume" category="Sound">
        <input>
            <param name="streamedSampleId" type="entityId" desc="streamedSampleId"/>
            <param name="volume" type="float" desc="volume"/>
        </input>
        <output/>
    </function>
    <function name="setStreamI3DFileDelay" desc="Set random delay parameters for streamed I3D loading" category="I3D">
        <input>
            <param name="minDelay" type="float" desc="min delay in seconds"/>
            <param name="maxDelay" type="float" desc="max delay in seconds"/>
        </input>
        <output/>
    </function>
    <function name="setStreamSharedI3DFileDelay" desc="Set random delay parameters for shared I3D loading" category="I3D">
        <input>
            <param name="minDelay" type="float" desc="min delay in seconds for loaded shared I3D"/>
            <param name="maxDelay" type="float" desc="max delay in seconds for loaded shared I3D"/>
            <param name="minDelayCached" type="float" desc="min delay in seconds for cached shared I3D"/>
            <param name="maxDelayCached" type="float" desc="max delay in seconds for cached shared I3D"/>
        </input>
        <output/>
    </function>
    <function name="setTerrainFillVisualHeight" desc="Set fill level mapping for a type (NB: finalizeTerrainFillLayers must be called afterwards)" category="Terrain Detail">
        <input>
            <param name="fillDataPlaneId" type="entityId" desc="fillDataPlaneId"/>
            <param name="fillType" type="integer" desc="fillType"/>
            <param name="firstFillLevel" type="integer" desc="first fill level to adjust"/>
            <param name="firstMappedFillLevel" type="float" desc="mapped fill level corresponding to firstFillLevel"/>
            <param name="lastFillLevel" type="integer?" desc="last fill level to adjust [optional]"/>
            <param name="lastMappedFillLevel" type="float?" desc="mapped fill level corresponding to lastFillLevel [optional]"/>
        </input>
        <output/>
    </function>
    <function name="setTerrainHeightAtWorldPos" desc="Set terrain height at world pos" category="Terrain">
        <input>
            <param name="terrainId" type="entityId" desc="terrainId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y (not relevant, can be 0)"/>
            <param name="z" type="float" desc="z"/>
            <param name="height" type="float" desc="absolute height in m"/>
        </input>
        <output/>
    </function>
    <function name="setTextAlignment" desc="Set the text horizontal alignment to be used for the following renderText calls" category="Text Rendering">
        <input>
            <param name="alignment" type="integer" desc="one of enum values RenderText.ALIGN_*"/>
        </input>
        <output/>
    </function>
    <function name="setTextBold" desc="Set the text boldness to be used for the following renderText calls" category="Text Rendering">
        <input>
            <param name="isBold" type="boolean" desc="isBold"/>
        </input>
        <output/>
    </function>
    <function name="setTextClipArea" desc="Sets clip area used for text rendering. Characters are only rendered within the clip area.&#xA;Set to unit area (0,0,1,1) to disable." category="Text Rendering">
        <input>
            <param name="clipMinX" type="float" desc=""/>
            <param name="clipMinY" type="float" desc=""/>
            <param name="clipMaxX" type="float" desc=""/>
            <param name="clipMaxY" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setTextColor" desc="Set the text color to be used for the following renderText calls" category="Text Rendering">
        <input>
            <param name="r" type="float" desc="r"/>
            <param name="g" type="float" desc="g"/>
            <param name="b" type="float" desc="b"/>
            <param name="a" type="float" desc="a"/>
        </input>
        <output/>
    </function>
    <function name="setTextDepthTestEnabled" desc="Set 3D text rendering depth check" category="Text Rendering">
        <input>
            <param name="depthCheckEnabled" type="boolean" desc="if true rendered 3D text can be concealed by other meshes"/>
        </input>
        <output/>
    </function>
    <function name="setTextFirstLineIndentation" desc="Set text first line indentation" category="Text Rendering">
        <input>
            <param name="indentation" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setTextLineBounds" desc="Set text line bounds" category="Text Rendering">
        <input>
            <param name="startLine" type="integer" desc="startLine"/>
            <param name="numLines" type="integer" desc="numLines"/>
        </input>
        <output/>
    </function>
    <function name="setTextLineHeightScale" desc="" category="Text Rendering">
        <input>
            <param name="lineHeightScale" type="float" desc="factor for adjusting the spacing between lines"/>
        </input>
        <output/>
    </function>
    <function name="setTextRotation" desc="" category="Text Rendering">
        <input>
            <param name="rotation" type="float" desc=""/>
            <param name="rotationCenterX" type="float?" desc="[optional, default=position of renderText call]"/>
            <param name="rotationCenterY" type="float?" desc="[optional, default=position of renderText call]"/>
        </input>
        <output/>
    </function>
    <function name="setTextVerticalAlignment" desc="Set the text vertical alignment to be used for the following renderText calls" category="Text Rendering">
        <input>
            <param name="verticalAlignment" type="integer" desc="one of enum values RenderText.VERTICAL_ALIGN_*"/>
        </input>
        <output/>
    </function>
    <function name="setTextWidthScale" desc="Set the text scale width to be used for the following renderText calls" category="Text Rendering">
        <input>
            <param name="scaleWidth" type="float" desc="scaleWidth"/>
        </input>
        <output/>
    </function>
    <function name="setTextWrapWidth" desc="Set text wrap width" category="Text Rendering">
        <input>
            <param name="wrapWidth" type="float" desc="wrapWidth"/>
            <param name="allowForcedWrap" type="boolean?" desc="allow wrapping mid word when no separator is available [optional, default=true]"/>
        </input>
        <output/>
    </function>
    <function name="setTranslation" desc="Set translation of a transform object in its local space (relative to parent node)" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="x" type="float" desc="x translation relative to parent node"/>
            <param name="y" type="float" desc="y translation relative to parent node"/>
            <param name="z" type="float" desc="z translation relative to parent node"/>
        </input>
        <output/>
    </function>
    <function name="setTriggerReportStatics" desc="Set if a trigger should report overlaps with static objects. By default triggers don&apos;t report overlaps with static objects" category="Physics">
        <input>
            <param name="triggerNodeId" type="entityId" desc=""/>
            <param name="reportStatics" type="boolean" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setUserAttribute" desc="Set user attribute value" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="name" type="string" desc="name"/>
            <param name="type" type="integer?" desc="Value of UserAttributeType enum [optional]"/>
            <param name="value" type="any?" desc="value (type must match the type specified in type) [optional]"/>
        </input>
        <output/>
    </function>
    <function name="setVisibility" desc="Set transform object visibility" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="visibility" type="boolean" desc="visibility"/>
        </input>
        <output/>
    </function>
    <function name="setVisibilityConditionDayOfYear" desc="Set the day of year condition of the visibility condition (0 to unset)" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="dayOfYearStart" type="integer" desc="dayOfYearStart"/>
            <param name="dayOfYearEnd" type="integer" desc="dayOfYearEnd"/>
        </input>
        <output/>
    </function>
    <function name="setVisibilityConditionMinuteOfDay" desc="Set the minute of day condition (0 to unset) of the visibility condition" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="minuteOfDayStart" type="integer" desc="minuteOfDayStart"/>
            <param name="minuteOfDayEnd" type="integer" desc="minuteOfDayEnd"/>
        </input>
        <output/>
    </function>
    <function name="setVisibilityConditionRenderInvisible" desc="Set the render invisible property of the visibility condition" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="renderInvisible" type="boolean" desc="if true, the object will always be rendered and the custom shader is supposed to change the rendering based on the visibility parameter"/>
        </input>
        <output/>
    </function>
    <function name="setVisibilityConditionViewerSpacialityMask" desc="Set the viewerspaciality mask condition of the visibility condition" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="viewerSpacialityRequiredMask" type="integer" desc=""/>
            <param name="viewerSpacialityPreventMask" type="integer" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setVisibilityConditionVisibleShaderParameter" desc="Set the shader parameter of the visibility condition" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="shaderVisibilityParam" type="float" desc="shader parameter when condition is met (ie. object is visible)"/>
        </input>
        <output/>
    </function>
    <function name="setVisibilityConditionWeatherMask" desc="Set the weather mask condition of the visibility condition" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="weatherRequiredMask" type="integer" desc=""/>
            <param name="weatherPreventMask" type="integer" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setWetness" desc="" category="Rendering">
        <input>
            <param name="wetness" type="float" desc=""/>
        </input>
        <output/>
    </function>
    <function name="setWheelShapeDirection" desc="Set wheel shape direction" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
            <param name="dirX" type="float" desc="dirX"/>
            <param name="dirY" type="float" desc="dirY"/>
            <param name="dirZ" type="float" desc="dirZ"/>
            <param name="axleX" type="float" desc="axleX"/>
            <param name="axleY" type="float" desc="axleY"/>
            <param name="axleZ" type="float" desc="axleZ"/>
        </input>
        <output/>
    </function>
    <function name="setWheelShapeForcePoint" desc="Set wheel shape force point" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
            <param name="positionX" type="float" desc="positionX"/>
            <param name="positionY" type="float" desc="positionY"/>
            <param name="positionZ" type="float" desc="positionZ"/>
        </input>
        <output/>
    </function>
    <function name="setWheelShapeProps" desc="Set wheel shape properties" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
            <param name="motorTorque" type="float" desc="motorTorque"/>
            <param name="brakeTorque" type="float" desc="brakeTorque"/>
            <param name="steerAngle" type="float" desc="steerAngle"/>
            <param name="rotationDamping" type="float" desc="rotationDamping"/>
        </input>
        <output/>
    </function>
    <function name="setWheelShapeSteeringCenter" desc="Set wheel shape steering center" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
            <param name="positionX" type="float" desc="positionX"/>
            <param name="positionY" type="float" desc="positionY"/>
            <param name="positionZ" type="float" desc="positionZ"/>
        </input>
        <output/>
    </function>
    <function name="setWheelShapeTireFriction" desc="Set wheel shape tire friction" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wheelShapeIndex" type="integer" desc="wheelShapeIndex"/>
            <param name="maxLongStiffness" type="float" desc="maxLongStiffness"/>
            <param name="maxLatStiffness" type="float" desc="maxLatStiffness"/>
            <param name="maxLatStiffnessTireLoad" type="float" desc="maxLatStiffnessTireLoad"/>
            <param name="frictionMultiplier" type="float" desc="frictionMultiplier"/>
        </input>
        <output/>
    </function>
    <function name="setWorldDirection" desc="Set the direction of an object with direction (x y z) and up (upX, upY, upZ) vectors given in world coordinates" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="upX" type="float" desc="upX"/>
            <param name="upY" type="float" desc="upY"/>
            <param name="upZ" type="float" desc="upZ"/>
        </input>
        <output/>
    </function>
    <function name="setWorldQuaternion" desc="Set quaternion in world space" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
            <param name="x" type="float" desc="x"/>
            <param name="y" type="float" desc="y"/>
            <param name="z" type="float" desc="z"/>
            <param name="w" type="float" desc="w"/>
        </input>
        <output/>
    </function>
    <function name="setWorldRotation" desc="Set world rotation of a transform object" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="x" type="float" desc="x rotation"/>
            <param name="y" type="float" desc="y rotation"/>
            <param name="z" type="float" desc="z rotation"/>
        </input>
        <output/>
    </function>
    <function name="setWorldTranslation" desc="Set translation of a transform object in world space" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wx" type="float" desc="x translation"/>
            <param name="wy" type="float" desc="y translation"/>
            <param name="wz" type="float" desc="z translation"/>
        </input>
        <output/>
    </function>
    <function name="setXMLBool" desc="Set XML file boolean attribute." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="attributePath" type="string" desc="attributePath"/>
            <param name="value" type="boolean" desc="value"/>
        </input>
        <output/>
    </function>
    <function name="setXMLFloat" desc="Set XML file float attribute." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="attributePath" type="string" desc="attributePath"/>
            <param name="value" type="float" desc="value"/>
        </input>
        <output/>
    </function>
    <function name="setXMLInt" desc="Set XML file integer attribute. If provided with a decimal number any decimals will be rounded in the saved value." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="attributePath" type="string" desc="attributePath"/>
            <param name="value" type="integer" desc="value"/>
        </input>
        <output/>
    </function>
    <function name="setXMLString" desc="Set XML file string attribute." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="attributePath" type="string" desc="attributePath"/>
            <param name="value" type="string" desc="value"/>
        </input>
        <output/>
    </function>
    <function name="setXMLUInt" desc="Set XML file unsigned integer attribute (in the range 0 - 4&apos;294&apos;967&apos;295). If provided with a decimal number any decimals will be rounded in the saved value." category="XML">
        <input>
            <param name="xmlId" type="entityId" desc="xmlId"/>
            <param name="attributePath" type="string" desc="attributePath"/>
            <param name="value" type="integer" desc="value"/>
        </input>
        <output/>
    </function>
    <function name="shallowWaterSimulationAddWaterPlaneGeometry" desc="TODO" category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="TODO"/>
            <param name="waterGeometry" type="entityId" desc="TODO"/>
        </input>
        <output/>
    </function>
    <function name="shallowWaterSimulationPaintCustomObstacle" desc="Paints a custom solid obstacle in the shape of a rotated rectangle into the simulation. You have to set the number of active obstacles with shallowWaterSimulationSetNumCustomObstacles first." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="obstacleIndex" type="integer" desc="index of the obstacle, starting at 0"/>
            <param name="x" type="float" desc="x position of the rectangle center (world coordinates)"/>
            <param name="y" type="float" desc="y position of the rectangle center (world coordinates)"/>
            <param name="width" type="float" desc="width of the rectangle (world size)"/>
            <param name="height" type="float" desc="height of the rectangle (world size)"/>
            <param name="angle" type="float" desc="rotation angle of the rectangle (counter-clock wise, in radians)."/>
            <param name="velocityX" type="float" desc="x velocity component of the obstacle (0 for a static, non-moving obstacle)"/>
            <param name="velocityY" type="float" desc="y velocity component of the obstacle (0 for a static, non-moving obstacle)"/>
            <param name="height" type="float" desc="height of the obstacle. makes it so the obstacle only applies when it touches below the water surface. so for a wavey surface, waves can flow under the obstacle if they go low enough."/>
        </input>
        <output/>
    </function>
    <function name="shallowWaterSimulationPaintDepthCircle" desc="Adds depth into the simulation in the shape of a circle" category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="x" type="float" desc="x position of the circle center (world coordinates)"/>
            <param name="y" type="float" desc="y position of the circle center (world coordinates)"/>
            <param name="radius" type="float" desc="radius of the circle (world size)"/>
            <param name="value" type="float" desc="to be added to depth (can be negative for removing water)"/>
            <param name="paintHeight" type="float?" desc="[optional] height that the paint should happen at. will only be painted if waterHeight in that location >= paintHeight"/>
        </input>
        <output/>
    </function>
    <function name="shallowWaterSimulationPaintDepthRect" desc="Adds depth into the simulation in the shape of a rectangle" category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="x" type="float" desc="x position of the rectangle center (world coordinates)"/>
            <param name="y" type="float" desc="y position of the rectangle center (world coordinates)"/>
            <param name="width" type="float" desc="width of the rectangle (world size)"/>
            <param name="height" type="float" desc="height of the rectangle (world size)"/>
            <param name="value" type="float" desc="to be added to depth (can be negative for removing water)"/>
            <param name="paintHeight" type="float?" desc="[optional] height that the paint should happen at. will only be painted if waterHeight in that location >= paintHeight"/>
        </input>
        <output/>
    </function>
    <function name="shallowWaterSimulationPaintDepthSource" desc="Paints a custom depth source into the simulation. Depth sources make it so the depth in that area can never go below the specified value, acting like a source that pours out water until the surrounding area is filled to that level." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="sourceIndex" type="integer" desc="index of the source, starting at 0, up to 16 (currently)"/>
            <param name="x" type="float" desc="x position of the rectangle center (world coordinates)"/>
            <param name="y" type="float" desc="y position of the rectangle center (world coordinates)"/>
            <param name="width" type="float" desc="width of the rectangle (world size)"/>
            <param name="height" type="float" desc="height of the rectangle (world size)"/>
            <param name="angle" type="float" desc="rotation angle of the rectangle (counter-clock wise, in radians)."/>
            <param name="depth" type="float" desc="depth of the water source"/>
        </input>
        <output/>
    </function>
    <function name="shallowWaterSimulationPaintVelocityCircle" desc="Adds velocity into the simulation in the shape of a circle" category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="x" type="float" desc="x position of the circle center (world coordinates)"/>
            <param name="y" type="float" desc="y position of the circle center (world coordinates)"/>
            <param name="radius" type="float" desc="radius of the circle (world size)"/>
            <param name="velocityX" type="float" desc="value to be added to the x component of velocity"/>
            <param name="velocityY" type="float" desc="value to be added to the y component of velocity"/>
            <param name="paintHeight" type="float?" desc="[optional] height that the paint should happen at. will only be painted if waterHeight in that location >= paintHeight"/>
        </input>
        <output/>
    </function>
    <function name="shallowWaterSimulationPaintVelocityRect" desc="Adds velocity into the simulation in the shape of a rectangle." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="x" type="float" desc="x position of the rectangle center (world coordinates)"/>
            <param name="y" type="float" desc="y position of the rectangle center (world coordinates)"/>
            <param name="width" type="float" desc="width of the rectangle (world size)"/>
            <param name="height" type="float" desc="height of the rectangle (world size)"/>
            <param name="velocityX" type="float" desc="value to be added to the x component of velocity"/>
            <param name="velocityY" type="float" desc="value to be added to the y component of velocity"/>
            <param name="paintHeight" type="float?" desc="[optional] height that the paint should happen at. will only be painted if waterHeight in that location >= paintHeight"/>
        </input>
        <output/>
    </function>
    <function name="shallowWaterSimulationRemoveWaterPlaneGeometry" desc="TODO" category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="TODO"/>
            <param name="waterGeometry" type="entityId" desc="TODO"/>
        </input>
        <output/>
    </function>
    <function name="shallowWaterSimulationResetSimulation" desc="Resets simulation to its initial state (water level = determined by the water level planes, all velocities 0)" category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
        </input>
        <output/>
    </function>
    <function name="shallowWaterSimulationSetNumDepthSources" desc="Sets the number of active depth sources." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="numDepthSource" type="integer" desc="number of active depth sources"/>
        </input>
        <output/>
    </function>
    <function name="shallowWaterSimulationTranslateSimulation" desc="Manually translates the contents of the simulation by integer increments. Only meant for debugging purposes. Setting the world position of the simulation should do this automatically." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="x" type="integer" desc="x offset to translate the simulation contents by"/>
            <param name="y" type="integer" desc="y offset to translate the simulation contents by"/>
        </input>
        <output/>
    </function>
    <function name="simulatePhysics" desc="Enable/disable physics simulation" category="Physics">
        <input>
            <param name="state" type="boolean" desc="state"/>
        </input>
        <output/>
    </function>
    <function name="simulatePhysicsTimeScale" desc="Time scale of physics simulation" category="Physics">
        <input>
            <param name="scale" type="float" desc="scale"/>
        </input>
        <output/>
    </function>
    <function name="source" desc="Source script file" category="General">
        <input>
            <param name="filename" type="string" desc="filename"/>
            <param name="environment" type="ref?" desc="environment [optional]"/>
        </input>
        <output/>
    </function>
    <function name="splitLightShadow" desc="Splits the given light source from its merged shadow, if the light sources&apos; shadow is merged with other light sources&apos; shadows" category="Lighting">
        <input>
            <param name="lightId" type="entityId" desc=""/>
        </input>
        <output/>
    </function>
    <function name="startDebugging" desc="Attach to debugger&#xA;Note that the connection is not instant and breakpoints may only trigger a few frames later" category="Debug">
        <input/>
        <output/>
    </function>
    <function name="stopDebugging" desc="Detach from debugger" category="Debug">
        <input/>
        <output/>
    </function>
    <function name="stopSample" desc="Stop sample object" category="Sound">
        <input>
            <param name="sampleId" type="entityId" desc="sampleId"/>
            <param name="delay" type="float" desc="delay until to stop playing [ms]"/>
            <param name="fadeTime" type="float" desc="time to fade out the sample [ms]"/>
        </input>
        <output/>
    </function>
    <function name="stopStreamedSample" desc="Stop streamed sample" category="Sound">
        <input>
            <param name="streamedSampleId" type="entityId" desc="streamedSampleId"/>
        </input>
        <output/>
    </function>
    <function name="streamAlignReadToByteBoundary" desc="Stream align read to byte boundary" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output/>
    </function>
    <function name="streamAlignWriteToByteBoundary" desc="Stream align write to byte boundary" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output/>
    </function>
    <function name="streamGetNumOfUnreadBits" desc="Stream get number of unread bits" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="value" type="integer" desc="value"/>
        </output>
    </function>
    <function name="streamGetReadOffset" desc="Stream get read offset it bits" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="offset" type="integer" desc="offset"/>
        </output>
    </function>
    <function name="streamGetWriteOffset" desc="Return the write pointer offset in bits" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="offset" type="integer" desc="offset"/>
        </output>
    </function>
    <function name="streamI3DFile" desc="Stream I3D file asynchronously" category="I3D">
        <input>
            <param name="filename" type="string" desc="filename"/>
            <param name="callbackFunctionName" type="string?" desc="callback(nodeId, LoadI3DFailedReason.* failedReason, arguments) [optional]"/>
            <param name="callbackTarget" type="object?" desc="target [optional]"/>
            <param name="arguments" type="object?" desc="arguments to return in callback function [optional]"/>
            <param name="addPhysics" type="boolean?" desc="addPhysics [optional]"/>
            <param name="callOnCreate" type="boolean?" desc="callOnCreate [optional]"/>
            <param name="verbose" type="boolean?" desc="verbose [optional]"/>
        </input>
        <output>
            <param name="requestId" type="integer" desc="request id for streaming, used to cancel the stream request"/>
        </output>
    </function>
    <function name="streamReadBool" desc="Stream read boolean" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="value" type="boolean" desc="value"/>
        </output>
    </function>
    <function name="streamReadFloat32" desc="Stream read 32bit float" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="value" type="float" desc="value"/>
        </output>
    </function>
    <function name="streamReadInt16" desc="Stream read 16bit signed integer" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="value" type="integer" desc="value"/>
        </output>
    </function>
    <function name="streamReadInt32" desc="Stream read 32bit signed integer" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="value" type="integer" desc="value"/>
        </output>
    </function>
    <function name="streamReadInt8" desc="Stream read 8bit signed integer" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="value" type="integer" desc="value"/>
        </output>
    </function>
    <function name="streamReadIntN" desc="Stream read 32bit signed integer" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="numberofBits" type="integer" desc="numberofBits"/>
        </input>
        <output>
            <param name="value" type="integer" desc="value"/>
        </output>
    </function>
    <function name="streamReadManualTimestamp" desc="Stream read manual timestamp" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="timestamp" type="integer" desc="timestamp"/>
        </output>
    </function>
    <function name="streamReadString" desc="Stream read string" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="value" type="string" desc="value"/>
        </output>
    </function>
    <function name="streamReadUInt16" desc="Stream read 16bit unsigned integer." category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="uint16" type="integer" desc="uint16"/>
        </output>
    </function>
    <function name="streamReadUInt32" desc="Stream read 32bit unsigned integer" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="value" type="integer" desc="value"/>
        </output>
    </function>
    <function name="streamReadUInt8" desc="Stream read 8bit unsigned integer." category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="uint8" type="integer" desc="uint8"/>
        </output>
    </function>
    <function name="streamReadUIntN" desc="Stream read N-bit unsigned integer. 0&amp;lt;N&amp;lt;32." category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="numberOfBits" type="integer" desc="numberOfBits"/>
        </input>
        <output>
            <param name="value" type="integer" desc="value"/>
        </output>
    </function>
    <function name="streamSetReadOffset" desc="Set the read pointer to the given offset in bits" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="offset" type="integer" desc="offset"/>
        </input>
        <output/>
    </function>
    <function name="streamSetWriteOffset" desc="Set the write pointer to the given offset in bits" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="offset" type="integer" desc="offset"/>
        </input>
        <output/>
    </function>
    <function name="streamSharedI3DFile" desc="Stream shared I3D file. Can call the callback in the same callstack when the file is already loaded" category="I3D">
        <input>
            <param name="filename" type="string" desc="filename"/>
            <param name="callbackFunctionName" type="string?" desc="callback(nodeId, LoadI3DFailedReason.* failedReason, arguments) [optional]"/>
            <param name="callbackTarget" type="object?" desc="target [optional]"/>
            <param name="arguments" type="object?" desc="arguments to return in callback function [optional]"/>
            <param name="addPhysics" type="boolean?" desc="addPhysics [optional]"/>
            <param name="callOnCreate" type="boolean?" desc="callOnCreate [optional]"/>
            <param name="verbose" type="boolean?" desc="verbose [optional]"/>
        </input>
        <output>
            <param name="requestId" type="integer" desc="request id for streaming, used to cancel the stream request"/>
        </output>
    </function>
    <function name="streamWriteBool" desc="Stream write boolean" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="value" type="boolean" desc="value"/>
        </input>
        <output>
            <param name="value" type="boolean" desc="value"/>
        </output>
    </function>
    <function name="streamWriteFloat32" desc="Stream write 32bit float" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="value" type="float" desc="value"/>
        </input>
        <output/>
    </function>
    <function name="streamWriteInt16" desc="Stream write 16bit signed integer" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="value" type="integer" desc="value"/>
        </input>
        <output/>
    </function>
    <function name="streamWriteInt32" desc="Stream write 32bit signed integer" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="value" type="integer" desc="value"/>
        </input>
        <output/>
    </function>
    <function name="streamWriteInt8" desc="Stream write 8bit signed integer" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="value" type="integer" desc="value"/>
        </input>
        <output/>
    </function>
    <function name="streamWriteIntN" desc="Stream write N bit signed integer. 0 &amp;lt; N &amp;lt; 32." category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="value" type="integer" desc="value"/>
            <param name="numberOfBits" type="integer" desc="numberOfBits"/>
        </input>
        <output/>
    </function>
    <function name="streamWriteManualTimestamp" desc="Stream write manual timestamp" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="timestamp" type="integer" desc="timestamp"/>
        </input>
        <output/>
    </function>
    <function name="streamWriteStream" desc="Stream write stream" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="streamSrcId" type="entityId" desc="streamSrcId"/>
            <param name="numBits" type="integer" desc="numBits"/>
            <param name="useReadStream" type="boolean" desc="useReadStream"/>
        </input>
        <output/>
    </function>
    <function name="streamWriteString" desc="Stream write string" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="value" type="string" desc="value"/>
        </input>
        <output/>
    </function>
    <function name="streamWriteTimestamp" desc="Stream write timestamp" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output/>
    </function>
    <function name="streamWriteUInt16" desc="Stream write 16bit unsigned integer." category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="value" type="integer" desc="value"/>
        </input>
        <output/>
    </function>
    <function name="streamWriteUInt32" desc="Stream write 32bit unsigned integer" category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="value" type="integer" desc="value"/>
        </input>
        <output/>
    </function>
    <function name="streamWriteUInt8" desc="Stream write 8bit unsigned integer." category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="uint8" type="integer" desc="uint8"/>
        </input>
        <output/>
    </function>
    <function name="streamWriteUIntN" desc="Stream write N-bit unsigned integer. 0&amp;lt;N&amp;lt;32." category="Network">
        <input>
            <param name="streamId" type="entityId" desc="streamId"/>
            <param name="value" type="integer" desc="value"/>
            <param name="numberofBits" type="integer" desc="numberofBits"/>
        </input>
        <output/>
    </function>
    <function name="transformToViewSpace" desc="Project world position to view space for specified camera" category="Camera">
        <input>
            <param name="cameraId" type="entityId" desc="cameraId"/>
            <param name="x" type="float" desc=""/>
            <param name="y" type="float" desc=""/>
            <param name="z" type="float" desc=""/>
        </input>
        <output>
            <param name="x" type="float" desc="VS"/>
            <param name="y" type="float" desc="VS"/>
            <param name="z" type="float" desc="VS"/>
        </output>
    </function>
    <function name="unicodeToUtf8" desc="Converts an unicode value to an utf8 string" category="String">
        <input>
            <param name="unicode" type="integer" desc="unicode"/>
        </input>
        <output>
            <param name="utf8string" type="string" desc="utf8string"/>
        </output>
    </function>
    <function name="unlink" desc="Unlink node from parent" category="Node">
        <input>
            <param name="objectId" type="entityId" desc="objectId"/>
        </input>
        <output/>
    </function>
    <function name="unpinSharedI3DFileInCache" desc="Unpin a shared I3D file in the cache, so it can be auto-deleted again" category="I3D">
        <input>
            <param name="filename" type="string" desc="filename"/>
        </input>
        <output/>
    </function>
    <function name="unProject" desc="Transform vector from screen space into world space" category="Node">
        <input>
            <param name="sx" type="float" desc="screenspace x [0..1]"/>
            <param name="sy" type="float" desc="screenspace y [0..1]"/>
            <param name="sz" type="float" desc="screenspace z / depth [0..1]"/>
        </input>
        <output>
            <param name="wx" type="float" desc="wx"/>
            <param name="wy" type="float" desc="wy"/>
            <param name="wz" type="float" desc="wz"/>
        </output>
    </function>
    <function name="updateConditionalAnimation" desc="Update" category="Animation">
        <input>
            <param name="conditionalAnimationEntityId" type="entityId" desc="conditionalAnimationEntityId"/>
            <param name="dt" type="float" desc="dt"/>
        </input>
        <output/>
    </function>
    <function name="updateDifferential" desc="update differential" category="Physics">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="index" type="integer" desc="index"/>
            <param name="ratio" type="float" desc="ratio"/>
            <param name="bias" type="float" desc="bias"/>
        </input>
        <output/>
    </function>
    <function name="updateShallowWaterSimulation" desc="Requests the simulation to be updated by the given time amount. The internals automatically take care of running the correct number of iterations (based on the delta time set in shallowWaterSimulationSetParameters) per requested update.&#xA;It&apos;s intended that you just forward the delta time from the script update function here, but you can also scale it to simulate fast forward or slow down of the simulation time." category="ShallowWaterSimulation">
        <input>
            <param name="shallowWaterSimulation" type="entityId" desc="id of the shallow water simulation"/>
            <param name="simulatedTime" type="float" desc="simulated time in seconds."/>
        </input>
        <output/>
    </function>
    <function name="utf8Strlen" desc="Returns the length of an utf8 formatted string" category="String">
        <input>
            <param name="utf8string" type="string" desc="utf8string"/>
        </input>
        <output>
            <param name="length" type="integer" desc="length"/>
        </output>
    </function>
    <function name="utf8Substr" desc="Returns a sub string of an utf8 formatted string" category="String">
        <input>
            <param name="utf8string" type="string" desc="utf8string"/>
            <param name="startIndex" type="integer" desc="startIndex"/>
            <param name="length" type="integer?" desc="length [optional]"/>
        </input>
        <output>
            <param name="subString" type="string" desc="subString"/>
        </output>
    </function>
    <function name="utf8ToLower" desc="Returns a lower case string of an utf8 formatted string" category="String">
        <input>
            <param name="utf8string" type="string" desc="utf8string"/>
        </input>
        <output>
            <param name="utf8string" type="string" desc="utf8string"/>
        </output>
    </function>
    <function name="utf8ToUnicode" desc="Converts an utf8 string to unicode" category="String">
        <input>
            <param name="utf8string" type="string" desc="utf8string"/>
        </input>
        <output>
            <param name="unicode" type="integer" desc="unicode"/>
            <param name="utf8Len" type="integer" desc="utf8Len"/>
        </output>
    </function>
    <function name="utf8ToUpper" desc="Return a upper case string of an utf8 formatted string" category="String">
        <input>
            <param name="utf8string" type="string" desc="utf8string"/>
        </input>
        <output>
            <param name="utf8string" type="string" desc="utf8string"/>
        </output>
    </function>
    <function name="voiceChatRemoveConnection" desc="Remove voice chat connection" category="VoiceChat">
        <input>
            <param name="connectionId" type="integer" desc="connectionId"/>
        </input>
        <output/>
    </function>
    <function name="worldDirectionToLocal" desc="World space to local space transformation, only direction without translation" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wdx" type="float" desc="world direction x"/>
            <param name="wdy" type="float" desc="world direction y"/>
            <param name="wdz" type="float" desc="world direction z"/>
        </input>
        <output>
            <param name="ldx" type="float" desc="local direction x"/>
            <param name="ldy" type="float" desc="local direction y"/>
            <param name="ldz" type="float" desc="local direction z"/>
        </output>
    </function>
    <function name="worldRotationToLocal" desc="World space to local space rotation transformation" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wrx" type="float" desc="world rotation x"/>
            <param name="wry" type="float" desc="world rotation y"/>
            <param name="wrz" type="float" desc="world rotation z"/>
        </input>
        <output>
            <param name="lrx" type="float" desc="local rotation x"/>
            <param name="lry" type="float" desc="local rotation y"/>
            <param name="lrz" type="float" desc="local rotation z"/>
        </output>
    </function>
    <function name="worldToLocal" desc="World space to local space translation transformation" category="Node">
        <input>
            <param name="transformId" type="entityId" desc="transformId"/>
            <param name="wx" type="float" desc="world x"/>
            <param name="wy" type="float" desc="world y"/>
            <param name="wz" type="float" desc="world z"/>
        </input>
        <output>
            <param name="lx" type="float" desc="local x"/>
            <param name="ly" type="float" desc="local y"/>
            <param name="lz" type="float" desc="local z"/>
        </output>
    </function>
    <function name="writeFillPlaneToStream" desc="Write fill plane surface information to stream" category="Fillplanes">
        <input>
            <param name="fillPlaneShapeId" type="entityId" desc="fillPlaneShapeId"/>
            <param name="streamId" type="entityId" desc="streamId"/>
        </input>
        <output>
            <param name="success" type="boolean" desc=""/>
        </output>
    </function>
    <enum name="AgentState">
        <value valueHint="0">DRIVING</value>
        <value valueHint="1">BLOCKED</value>
        <value valueHint="2">PLANNING</value>
        <value valueHint="3">NOT_REACHABLE</value>
        <value valueHint="4">TARGET_REACHED</value>
    </enum>
    <enum name="AnimalHusbandryFeedingType">
        <value valueHint="0">FOOD</value>
        <value valueHint="1">WATER</value>
    </enum>
    <enum name="AsyncResult">
        <value valueHint="0">NO</value>
        <value valueHint="1">YES</value>
        <value valueHint="2">NOT_AVAILABLE</value>
    </enum>
    <enum name="AtmosphereQuality">
        <value valueHint="0">OFF</value>
        <value valueHint="1">LOW</value>
        <value valueHint="2">MEDIUM</value>
        <value valueHint="3">HIGH</value>
        <value valueHint="4">VERIY_HIGH</value>
        <value valueHint="5">NUM</value>
    </enum>
    <enum name="AudioSourcePriority">
        <value valueHint="0">VERY_LOW</value>
        <value valueHint="1">LOW</value>
        <value valueHint="2">MEDIUM</value>
        <value valueHint="3">HIGH</value>
        <value valueHint="4">VERY_HIGH</value>
    </enum>
    <enum name="Axis">
        <value valueHint="0">X</value>
        <value valueHint="1">Y</value>
        <value valueHint="2">Z</value>
    </enum>
    <enum name="BrushType">
        <value valueHint="0">BRUSH_TYPE_CIRCLE</value>
        <value valueHint="1">BRUSH_TYPE_SQUARE</value>
    </enum>
    <enum name="ClassIds">
        <value valueHint="34">OVERLAY</value>
        <value valueHint="35">IMAGE_OVERLAY</value>
        <value valueHint="36">VIDEO_OVERLAY</value>
        <value valueHint="7">TERRAIN_TRANSFORM_GROUP</value>
        <value valueHint="11">FOLIAGE_TRANSFORM_GROUP</value>
        <value valueHint="8">TERRAIN_DETAIL_TRANSFORM_GROUP</value>
        <value valueHint="9">TERRAIN_LAYER_TRANSFORM_GROUP</value>
        <value valueHint="12">SHAPE</value>
        <value valueHint="14">LIGHT_SOURCE</value>
        <value valueHint="15">AUDIO_SOURCE</value>
        <value valueHint="16">CAMERA</value>
        <value valueHint="17">NAVIGATION_MESH</value>
        <value valueHint="18">MESH_SPLIT_SHAPE</value>
        <value valueHint="21">GEOMETRY</value>
        <value valueHint="5">TRANSFORM_GROUP</value>
        <value valueHint="24">PARTICLE_SYSTEM</value>
        <value valueHint="25">PRECIPITATION</value>
        <value valueHint="22">SPLINE</value>
        <value valueHint="59">NOTE</value>
        <value valueHint="26">MATERIAL</value>
    </enum>
    <enum name="CompanionAnimalType">
        <value valueHint="1">DOG</value>
        <value valueHint="2">DEER</value>
        <value valueHint="3">BOAR</value>
    </enum>
    <enum name="DebugMode">
        <value valueHint="0">NONE</value>
        <value valueHint="1">PHYSICS</value>
        <value valueHint="2">LIGHTSOURCE</value>
        <value valueHint="3">AUDIOSOURCE</value>
        <value valueHint="4">OCCLUDER</value>
        <value valueHint="5">AD_TRACKING</value>
        <value valueHint="6">PRECIPITATION</value>
    </enum>
    <enum name="DebugRendering">
        <value valueHint="0">NONE</value>
        <value valueHint="1">ALPHA</value>
        <value valueHint="2">PARALLAX</value>
        <value valueHint="4">ALBEDO</value>
        <value valueHint="5">NORMALS</value>
        <value valueHint="6">TANGENT_SPACE_NORMALS</value>
        <value valueHint="7">SMOOTHNESS</value>
        <value valueHint="8">METALNESS</value>
        <value valueHint="9">AMBIENT_OCCLUSION</value>
        <value valueHint="10">BAKED_AMBIENT_OCCLUSION</value>
        <value valueHint="11">SCREEN_SPACE_AMBIENT_OCCLUSION</value>
        <value valueHint="12">SPECULAR_OCCLUSION</value>
        <value valueHint="13">DIFFUSE_LIGHTING</value>
        <value valueHint="14">SPECULAR_LIGHTING</value>
        <value valueHint="15">INDIRECT_LIGHTING</value>
        <value valueHint="16">LIGHT_GRID</value>
        <value valueHint="17">SHADOW_SPLITS</value>
        <value valueHint="21">DEPTH</value>
        <value valueHint="22">DEPTH_SCALED</value>
        <value valueHint="18">MIP_LEVELS</value>
        <value valueHint="19">TRIANGLE_DENSITY</value>
        <value valueHint="20">TERRAIN_SLOPES</value>
        <value valueHint="23">MOTION_VECTORS</value>
        <value valueHint="24">SHADING_RATE</value>
        <value valueHint="25">MESH_LOD</value>
        <value valueHint="26">CUSTOM1</value>
        <value valueHint="27">CUSTOM2</value>
        <value valueHint="28">WETNESS</value>
        <value valueHint="29">POROSITY</value>
        <value valueHint="30">QUAD_OVERDRAW</value>
        <value valueHint="31">ALPHA_OVERDRAW</value>
        <value valueHint="32">ZPASS_OVERDRAW</value>
        <value valueHint="33">DRAWCALLS</value>
        <value valueHint="34">INSTANCED_DRAWCALLS</value>
    </enum>
    <enum name="DensityCoordType">
        <value valueHint="0">POINT_POINT_POINT</value>
        <value valueHint="1">POINT_VECTOR_VECTOR</value>
    </enum>
    <enum name="DensityFilterSupersamplingMode">
        <value valueHint="0">ALL</value>
        <value valueHint="1">ANY</value>
    </enum>
    <enum name="DensityIndexCompareMode">
        <value valueHint="0">UPDATE</value>
        <value valueHint="1">KEEP</value>
        <value valueHint="2">ZERO</value>
    </enum>
    <enum name="DensityRoundingMode">
        <value valueHint="1">NEAREST</value>
        <value valueHint="2">NEAREST_EXPAND</value>
        <value valueHint="0">INCLUSIVE</value>
        <value valueHint="4">VERTEX_NEAREST</value>
        <value valueHint="5">VERTEX_NEAREST_EXPAND</value>
        <value valueHint="3">VERTEX_INCLUSIVE</value>
    </enum>
    <enum name="DensityTypeCompareType">
        <value valueHint="0">EQUAL</value>
        <value valueHint="1">NOTEQUAL</value>
        <value valueHint="2">ALWAYS</value>
    </enum>
    <enum name="DensityValueCompareType">
        <value valueHint="0">ALWAYS</value>
        <value valueHint="2">GREATER</value>
        <value valueHint="3">BETWEEN</value>
        <value valueHint="1">EQUAL</value>
        <value valueHint="4">NOTEQUAL</value>
        <value valueHint="5">NOTBETWEEN</value>
    </enum>
    <enum name="DLSSQuality">
        <value valueHint="0">OFF</value>
        <value valueHint="4">MAX_PERFORMANCE</value>
        <value valueHint="3">BALANCED_PERFORMANCE</value>
        <value valueHint="2">MAX_QUALITY</value>
        <value valueHint="5">ULTRA_PERFORMANCE</value>
        <value valueHint="1">ULTRA_QUALITY</value>
        <value valueHint="6">NUM</value>
    </enum>
    <enum name="DRSQuality">
        <value valueHint="0">OFF</value>
        <value valueHint="1">LOW</value>
        <value valueHint="2">MEDIUM</value>
        <value valueHint="3">HIGH</value>
        <value valueHint="4">VERY_HIGH</value>
        <value valueHint="5">NUM</value>
    </enum>
    <enum name="FacialAnimationEmotion">
        <value valueHint="16">ANGER</value>
        <value valueHint="17">SURPRISE</value>
        <value valueHint="18">DISGUST</value>
        <value valueHint="19">HAPPINESS</value>
        <value valueHint="20">FEAR</value>
        <value valueHint="21">SADNESS</value>
        <value valueHint="22">CONFUSION</value>
        <value valueHint="23">NONE</value>
    </enum>
    <enum name="FidelityFxSR30Quality">
        <value valueHint="0">OFF</value>
        <value valueHint="1">QUALITY</value>
        <value valueHint="2">BALANCED</value>
        <value valueHint="3">PERFORMANCE</value>
        <value valueHint="4">ULTRA_PERFORMANCE</value>
        <value valueHint="5">NUM</value>
    </enum>
    <enum name="FidelityFxSRQuality">
        <value valueHint="0">OFF</value>
        <value valueHint="1">ULTRA_QUALITY</value>
        <value valueHint="2">QUALITY</value>
        <value valueHint="3">BALANCED</value>
        <value valueHint="4">PERFORMANCE</value>
        <value valueHint="5">NUM</value>
    </enum>
    <enum name="FileAccess">
        <value valueHint="0">WRITE</value>
        <value valueHint="1">READ</value>
    </enum>
    <enum name="FullscreenMode">
        <value valueHint="0">WINDOWED</value>
        <value valueHint="1">WINDOWED_FULLSCREEN</value>
        <value valueHint="2">EXCLUSIVE_FULLSCREEN</value>
        <value valueHint="3">NUM</value>
    </enum>
    <enum name="GamepadCategories">
        <value valueHint="0">CATEGORY_UNKNOWN</value>
        <value valueHint="2">CATEGORY_WHEEL</value>
        <value valueHint="3">CATEGORY_JOYSTICK</value>
        <value valueHint="1">CATEGORY_GAMEPAD</value>
        <value valueHint="4">CATEGORY_FARMWHEEL</value>
        <value valueHint="5">CATEGORY_FARMSIDEPANEL</value>
        <value valueHint="6">CATEGORY_FARMWHEEL_HORI</value>
        <value valueHint="7">CATEGORY_FARMSIDEPANEL_HORI</value>
        <value valueHint="8">CATEGORY_FARMJOYSTICK_THRUSTMASTER</value>
    </enum>
    <enum name="HusbandryAreaType">
        <value valueHint="0">INDOOR</value>
    </enum>
    <enum name="InAppPurchase">
        <value valueHint="0">ERROR_OK</value>
        <value valueHint="1">ERROR_NETWORK_UNAVAILABLE</value>
        <value valueHint="2">ERROR_PURCHASE_IN_PROGRESS</value>
        <value valueHint="3">ERROR_FAILED</value>
        <value valueHint="4">ERROR_CANCELLED</value>
        <value valueHint="5">ERROR_PENDING_PAYMENT</value>
        <value valueHint="6">ERROR_RESTORED</value>
    </enum>
    <enum name="InAppPurchasePurchaseState">
        <value valueHint="0">PURCHASED</value>
        <value valueHint="1">NOT_PURCHASED</value>
    </enum>
    <enum name="InAppPurchaseResponse">
        <value valueHint="0">OK</value>
        <value valueHint="1">NETWORK_UNAVAILABLE</value>
        <value valueHint="2">PURCHASE_IN_PROGRESS</value>
        <value valueHint="3">FAILED</value>
        <value valueHint="4">CANCELLED</value>
        <value valueHint="5">PENDING_PAYMENT</value>
        <value valueHint="6">RESTORED</value>
    </enum>
    <enum name="IntersectMode">
        <value valueHint="0">INTERSECT_FIRST</value>
        <value valueHint="1">INTERSECT_CLOSEST_TO_P1</value>
        <value valueHint="2">INTERSECT_CLOSEST_TO_P2</value>
    </enum>
    <enum name="LensFlareQuality">
        <value valueHint="0">OFF</value>
        <value valueHint="2">HIGH</value>
        <value valueHint="1">MEDIUM</value>
        <value valueHint="3">NUM</value>
    </enum>
    <enum name="LightType">
        <value valueHint="0">DIRECTIONAL</value>
        <value valueHint="1">POINT</value>
        <value valueHint="2">SPOT</value>
    </enum>
    <enum name="LoadI3DFailedReason">
        <value valueHint="0">NONE</value>
        <value valueHint="1">CANCELLED</value>
        <value valueHint="2">FILE_NOT_FOUND</value>
        <value valueHint="3">UNKNOWN</value>
    </enum>
    <enum name="MasterServerServerDetailsFailedReason">
        <value valueHint="0">NOT_FOUND</value>
        <value valueHint="2">NO_CROSS_PLAY</value>
    </enum>
    <enum name="MSAA">
        <value valueHint="0">OFF</value>
        <value valueHint="1">MSAA_2</value>
        <value valueHint="2">MSAA_4</value>
        <value valueHint="3">MSAA_8</value>
    </enum>
    <enum name="MultiplayerAvailability">
        <value valueHint="0">AVAILABILITY_UNKNOWN</value>
        <value valueHint="1">AVAILABLE</value>
        <value valueHint="2">NOT_AVAILABLE</value>
        <value valueHint="3">NO_PRIVILEGES</value>
    </enum>
    <enum name="NATType">
        <value valueHint="0">NAT_UNKNOWN</value>
        <value valueHint="1">NAT_OPEN</value>
        <value valueHint="2">NAT_MODERATE</value>
        <value valueHint="3">NAT_STRICT</value>
    </enum>
    <enum name="Network">
        <value valueHint="0">TYPE_APPLICATION</value>
        <value valueHint="1">TYPE_CONNECTION_REQUEST_ACCEPTED</value>
        <value valueHint="2">TYPE_CONNECTION_ATTEMPT_FAILED</value>
        <value valueHint="4">TYPE_NEW_INCOMING_CONNECTION</value>
        <value valueHint="5">TYPE_NO_FREE_INCOMING_CONNECTIONS</value>
        <value valueHint="6">TYPE_DISCONNECTION_NOTIFICATION</value>
        <value valueHint="7">TYPE_CONNECTION_LOST</value>
        <value valueHint="8">TYPE_RSA_PUBLIC_KEY_MISMATCH</value>
        <value valueHint="9">TYPE_CONNECTION_BANNED</value>
        <value valueHint="10">TYPE_INVALID_PASSWORD</value>
        <value valueHint="13">TYPE_PONG</value>
    </enum>
    <enum name="NormalMapFormat">
        <value valueHint="0">NONE</value>
        <value valueHint="1">S2CHANNEL</value>
        <value valueHint="2">U3CHANNEL</value>
        <value valueHint="3">U4CHANNEL</value>
    </enum>
    <enum name="PhysicsDebugDrawMode">
        <value valueHint="1">FRAMES</value>
        <value valueHint="2">AABBS</value>
        <value valueHint="4">CONTACT_POINTS</value>
        <value valueHint="8">CONSTRAINTS</value>
        <value valueHint="16">CONSTRAINT_LIMITS</value>
        <value valueHint="32">CENTERS_OF_MASS</value>
        <value valueHint="64">INERTIAS</value>
        <value valueHint="128">WHEELS</value>
        <value valueHint="256">COLLISION_GEOMETRIES_STATIC</value>
        <value valueHint="512">COLLISION_GEOMETRIES_DYNAMIC</value>
        <value valueHint="1024">COLLISION_GEOMETRIES_KINEMATIC</value>
        <value valueHint="2048">COLLISION_GEOMETRIES_TRIGGER</value>
        <value valueHint="4096">COLLISION_GEOMETRIES_TERRAIN</value>
        <value valueHint="8192">COLLISION_GEOMETRIES_TERRAIN_DETAIL</value>
        <value valueHint="16384">COLLISION_GEOMETRIES_TERRAIN_DISPLACEMENT</value>
        <value valueHint="32768">CHARACTER_CONTROLLERS</value>
    </enum>
    <enum name="PlatformId">
        <value valueHint="0">UNKNOWN</value>
        <value valueHint="1">WIN</value>
        <value valueHint="2">MAC</value>
        <value valueHint="3">ANDROID</value>
        <value valueHint="4">IOS</value>
        <value valueHint="5">SWITCH</value>
        <value valueHint="6">XBOX_SERIES</value>
        <value valueHint="7">PS5</value>
    </enum>
    <enum name="PostProcessAntiAliasing">
        <value valueHint="0">OFF</value>
        <value valueHint="1">TAA</value>
        <value valueHint="2">TAA_MOBILE</value>
        <value valueHint="3">DLAA</value>
        <value valueHint="4">FSR3</value>
        <value valueHint="5">XESS</value>
        <value valueHint="6">NUM</value>
    </enum>
    <enum name="PresenceModes">
        <value valueHint="0">PRESENCE_IDLE</value>
        <value valueHint="1">PRESENCE_CAREER</value>
        <value valueHint="2">PRESENCE_TUTORIAL</value>
        <value valueHint="3">PRESENCE_MULTIPLAYER</value>
        <value valueHint="4">PRESENCE_MULTIPLAYER_ALONE</value>
        <value valueHint="5">PRESENCE_MULTIPLAYER_CROSSPLAY</value>
    </enum>
    <enum name="RenderText">
        <value valueHint="0">ALIGN_LEFT</value>
        <value valueHint="1">ALIGN_CENTER</value>
        <value valueHint="2">ALIGN_RIGHT</value>
        <value valueHint="0">VERTICAL_ALIGN_BASELINE</value>
        <value valueHint="1">VERTICAL_ALIGN_TOP</value>
        <value valueHint="2">VERTICAL_ALIGN_MIDDLE</value>
        <value valueHint="3">VERTICAL_ALIGN_BOTTOM</value>
        <value valueHint="1.1">DEFAULT_LINE_HEIGHT_SCALE</value>
    </enum>
    <enum name="ReportUserReason">
        <value valueHint="0">PLAYER_NAME</value>
        <value valueHint="1">VOICE_CHAT</value>
        <value valueHint="2">TEXT_CHAT</value>
        <value valueHint="3">BEHAVIOR</value>
        <value valueHint="4">CHEATING</value>
    </enum>
    <enum name="Reverb">
        <value valueHint="11">GS_CITY</value>
        <value valueHint="12">GS_FOREST</value>
        <value valueHint="13">GS_INDOOR_HALL</value>
        <value valueHint="14">GS_OPEN_FIELD</value>
        <value valueHint="15">GS_TUNNEL</value>
    </enum>
    <enum name="RigidBodyType">
        <value valueHint="0">NONE</value>
        <value valueHint="1">STATIC</value>
        <value valueHint="2">DYNAMIC</value>
        <value valueHint="3">KINEMATIC</value>
    </enum>
    <enum name="Savegame">
        <value valueHint="0">ERROR_OK</value>
        <value valueHint="1">ERROR_CANCELLED</value>
        <value valueHint="2">ERROR_DEVICE_UNAVAILABLE</value>
        <value valueHint="3">ERROR_DATA_CORRUPT</value>
        <value valueHint="4">ERROR_BAD_INDEX</value>
        <value valueHint="5">ERROR_SCAN_FAILED</value>
        <value valueHint="6">ERROR_SCAN_IN_PROGRESS</value>
        <value valueHint="7">ERROR_SAVE_FAILED</value>
        <value valueHint="8">ERROR_SAVE_NO_SPACE</value>
        <value valueHint="9">ERROR_LOAD_FAILED</value>
        <value valueHint="10">ERROR_LOAD_INVALID_USER</value>
        <value valueHint="11">ERROR_OPERATION_IN_PROGRESS</value>
        <value valueHint="12">ERROR_CLOUD_CONFLICT</value>
        <value valueHint="13">ERROR_RESOLVE_FAILED</value>
        <value valueHint="14">ERROR_QUOTA_EXCEEDED</value>
    </enum>
    <enum name="SaveGameResolvePolicy">
        <value valueHint="0">KEEP_LOCAL</value>
        <value valueHint="1">KEEP_REMOTE</value>
        <value valueHint="2">KEEP_BOTH</value>
    </enum>
    <enum name="ScreenSpaceReflectionsQuality">
        <value valueHint="0">OFF</value>
        <value valueHint="1">HIGH</value>
        <value valueHint="2">VERY_HIGH</value>
        <value valueHint="3">ULTRA</value>
        <value valueHint="4">NUM</value>
    </enum>
    <enum name="ScreenSpaceShadowsQuality">
        <value valueHint="0">OFF</value>
        <value valueHint="1">ON</value>
        <value valueHint="2">NUM</value>
    </enum>
    <enum name="Store">
        <value valueHint="0">STORE_NONE</value>
        <value valueHint="1">STORE_CLOSED</value>
        <value valueHint="2">STORE_ACTIVE</value>
        <value valueHint="3">STORE_COMPLETE</value>
        <value valueHint="4">STORE_ABORT</value>
        <value valueHint="5">STORE_ERROR</value>
        <value valueHint="0">STORE_OFFLINE</value>
        <value valueHint="1">STORE_GOING_ONLINE</value>
        <value valueHint="2">STORE_ONLINE</value>
        <value valueHint="3">STORE_NETFAIL</value>
        <value valueHint="4">STORE_AGE_RESTRICTED</value>
    </enum>
    <enum name="TerrainLoadFlags">
        <value valueHint="1">TEXTURE_CACHE</value>
        <value valueHint="2">LOD_TEXTURE_CACHE</value>
        <value valueHint="4">NORMAL_MAP_CACHE</value>
        <value valueHint="8">OCCLUDER_CACHE</value>
        <value valueHint="16">DENSITY_MAPS_USE_LOAD_DIR</value>
        <value valueHint="64">TEXTURE_CACHE_USE_LOAD_DIR</value>
        <value valueHint="32">HEIGHT_MAP_USE_LOAD_DIR</value>
        <value valueHint="128">NORMAL_MAP_CACHE_USE_LOAD_DIR</value>
        <value valueHint="256">OCCLUDER_CACHE_USE_LOAD_DIR</value>
        <value valueHint="511">GAME_DEFAULT</value>
    </enum>
    <enum name="TEXTURE_FILTERING">
        <value valueHint="0">BILINEAR</value>
        <value valueHint="1">TRILINEAR</value>
        <value valueHint="2">ANISO_1</value>
        <value valueHint="3">ANISO_2</value>
        <value valueHint="4">ANISO_4</value>
        <value valueHint="5">ANISO_8</value>
        <value valueHint="6">ANISO_16</value>
    </enum>
    <enum name="TextureFormat">
        <value valueHint="27">R32G32B32A32_FLOAT</value>
        <value valueHint="25">R32G32_FLOAT</value>
        <value valueHint="23">R32_FLOAT</value>
    </enum>
    <enum name="UploadState">
        <value valueHint="0">UPLOADED</value>
        <value valueHint="1">NOT_UPLOADED</value>
        <value valueHint="2">UPLOADING</value>
    </enum>
    <enum name="UserAttributeType">
        <value valueHint="0">BOOLEAN</value>
        <value valueHint="1">INTEGER</value>
        <value valueHint="2">FLOAT</value>
        <value valueHint="3">STRING</value>
        <value valueHint="4">CALLBACK</value>
        <value valueHint="5">NODE_ID</value>
    </enum>
    <enum name="ValarPowerMode">
        <value valueHint="0">LOW</value>
        <value valueHint="1">HIGH</value>
        <value valueHint="2">NUM</value>
    </enum>
    <enum name="ValarQuality">
        <value valueHint="0">OFF</value>
        <value valueHint="1">QUALITY</value>
        <value valueHint="2">BALANCED</value>
        <value valueHint="3">PERFORMANCE</value>
        <value valueHint="4">NUM</value>
    </enum>
    <enum name="VoiceChatConnectionStatus">
        <value valueHint="0">SILENT</value>
        <value valueHint="1">ACTIVE</value>
        <value valueHint="2">UNAVAILABLE</value>
    </enum>
    <enum name="VoiceChatRecordingMode">
        <value valueHint="0">DISABLED</value>
        <value valueHint="1">MUTED</value>
        <value valueHint="2">ALWAYS</value>
        <value valueHint="3">AUTOMATIC</value>
        <value valueHint="4">TEST</value>
    </enum>
    <enum name="VolumetricFogQuality">
        <value valueHint="0">OFF</value>
        <value valueHint="1">LOW</value>
        <value valueHint="2">MEDIUM</value>
        <value valueHint="3">HIGH</value>
        <value valueHint="4">VERIY_HIGH</value>
        <value valueHint="5">ULTRA_QUALITY</value>
        <value valueHint="6">NUM</value>
    </enum>
    <enum name="XeSSQuality">
        <value valueHint="5">OFF</value>
        <value valueHint="0">ULTRA_QUALITY_PLUS</value>
        <value valueHint="1">ULTRA_QUALITY</value>
        <value valueHint="2">QUALITY</value>
        <value valueHint="3">BALANCED</value>
        <value valueHint="4">PERFORMANCE</value>
        <value valueHint="6">NUM</value>
    </enum>
</scriptBinding>
